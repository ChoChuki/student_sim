[
    {
        "problem_id": "p02753",
        "question": "Score : 100 points\n\nProblem StatementIn AtCoder City, there are three stations numbered 1, 2, and 3.\nEach of these stations is operated by one of the two railway companies, A and B. A string S of length 3 represents which company operates each station. If S_i is A, Company A operates Station i; if S_i is B, Company B operates Station i.\nTo improve the transportation condition, for each pair of a station operated by Company A and one operated by Company B, there will be a bus service connecting them.\nDetermine if there is a pair of stations that will be connected by a bus service.\n\nConstraints\nEach character of S is A or B.\n|S| = 3\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputIf there is a pair of stations that will be connected by a bus service, print Yes; otherwise, print No.\n\nSample Input 1ABA\n\nSample Output 1Yes\n\nCompany A operates Station 1 and 3, while Company B operates Station 2.\nThere will be a bus service between Station 1 and 2, and between Station 2 and 3, so print Yes.\n\nSample Input 2BBA\n\nSample Output 2Yes\n\nCompany B operates Station 1 and 2, while Company A operates Station 3.\nThere will be a bus service between Station 1 and 3, and between Station 2 and 3, so print Yes.\n\nSample Input 3BBB\n\nSample Output 3No\n\nCompany B operates all the stations. Thus, there will be no bus service, so print No.",
        "desc": "The problem tests knowledge of string manipulation and conditional logic in C++, specifically checking for the presence of different characters within a short string. It is classified as an easy-level programming challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  string S;\n  cin >> S;\n  int cnt_A = 0, cnt_B = 0;\n  for (int i = 0; i < 3; i++) {\n    if (S[i] == 'A') cnt_A++;\n    if (S[i] == 'B') cnt_B++; \n  }\n  if (cnt_A > 0 && cnt_B > 0) {\n    cout << \"Yes\" << endl;\n  }\n  else {\n    cout << \"No\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02754",
        "question": "Score : 200 points\n\nProblem StatementTakahashi has many red balls and blue balls. Now, he will place them in a row.\nInitially, there is no ball placed.\nTakahashi, who is very patient, will do the following operation 10^{100} times:\n\nPlace A blue balls at the end of the row of balls already placed. Then, place B red balls at the end of the row.\n\nHow many blue balls will be there among the first N balls in the row of balls made this way?\n\nConstraints\n1 \\leq N \\leq 10^{18}\nA, B \\geq 0\n0 &lt; A + B \\leq 10^{18}\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN A B\n\nOutputPrint the number of blue balls that will be there among the first N balls in the row of balls.\n\nSample Input 18 3 4\n\nSample Output 14\n\nLet b denote a blue ball, and r denote a red ball. The first eight balls in the row will be bbbrrrrb, among which there are four blue balls.\n\nSample Input 28 0 4\n\nSample Output 20\n\nHe placed only red balls from the beginning.\n\nSample Input 36 2 4\n\nSample Output 32\n\nAmong bbrrrr, there are two blue balls.",
        "desc": "This C++ problem assesses the ability to handle large integers and apply mathematical concepts like cycle computation and integer division to efficiently determine the count of specific elements within a sequence. With high constraints (N up to 10¹⁸) and requiring optimal algorithm design, it is classified as a medium to hard difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, A, B;\n  cin >> N >> A >> B;\n  int sum = N / (A + B) * A;\n  int r = N % (A + B);\n  sum += min(r, A);\n  cout << sum << endl;\n}",
        "error_desc": "1. Variables `N`, `A`, and `B` are declared as `int` instead of `long long`, which cannot handle values up to 10¹⁸.\n2. The variable `sum` is declared as `int`, causing potential overflow when calculating `N / (A + B) * A`.\n3. The variable `r` is declared as `int`, leading to incorrect remainder calculations for large `N`.\n4. The expression `A + B` may exceed the range of `int`, resulting in incorrect computations."
    },
    {
        "problem_id": "p02755",
        "question": "Score : 300 points\n\nProblem StatementFind the price of a product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax levied on it is A yen and B yen, respectively. (Yen is the currency of Japan.)\nHere, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.\nIf multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print -1.\n\nConstraints\n1 \\leq A \\leq B \\leq 100\nA and B are integers.\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputIf there is a price that satisfies the condition, print an integer representing the lowest such price; otherwise, print -1.\n\nSample Input 12 2\n\nSample Output 125\n\nIf the price of a product before tax is 25 yen, the amount of consumption tax levied on it is:\n\nWhen the consumption tax rate is 8 percent: \\lfloor 25 \\times 0.08 \\rfloor = \\lfloor 2 \\rfloor = 2 yen.\nWhen the consumption tax rate is 10 percent: \\lfloor 25 \\times 0.1 \\rfloor = \\lfloor 2.5 \\rfloor = 2 yen.\n\nThus, the price of 25 yen satisfies the condition. There are other possible prices, such as 26 yen, but print the minimum such price, 25.\n\nSample Input 28 10\n\nSample Output 2100\n\nIf the price of a product before tax is 100 yen, the amount of consumption tax levied on it is:\n\nWhen the consumption tax rate is 8 percent: \\lfloor 100 \\times 0.08 \\rfloor = 8 yen.\nWhen the consumption tax rate is 10 percent: \\lfloor 100 \\times 0.1 \\rfloor = 10 yen.\n\nSample Input 319 99\n\nSample Output 3-1\n\nThere is no price before tax satisfying this condition, so print -1.",
        "desc": "This C++ problem tests knowledge of integer arithmetic, floor operations, and iterative search techniques to determine the minimal price that satisfies specific tax conditions. It is classified as a challenging problem, suitable for intermediate to advanced programmers.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int A, B;\n  double tax_a = 0.08, tax_b = 0.10, A_v, B_v;\n  cin >> A >> B;\n  vector<double> a, b;\n  for (double i = 0; i < 0.9; i+=0.1) {\n    A_v = A; B_v = B;\n    A_v += i; B_v += i;\n    int num = i * 10;\n    int A_s = A_v / tax_a;\n    int B_s = B_v / tax_b;\n    a.push_back(A_s);\n    b.push_back(B_s);\n  }\n  sort(a.begin(), a.end());\n  sort(b.begin(), b.end());\n  int min = 1000;\n  for (int i = 0; i < 10; i++) {\n    for (int j = 0; j < 10; j++) {\n      if (a[i] == b[j]) {\n        if (min > b[j]) min = b[j];\n      }\n    }\n  }\n  if (min == 1000) {\n    cout << -1 << endl;\n  }\n  else {\n    cout << min << endl;\n  }  \n}",
        "error_desc": "1. The loop incorrectly uses a double variable `i` from 0 to 0.9 instead of iterating over possible integer prices.\n2. Variables `A_v` and `B_v` are improperly updated by adding `i`, which does not correctly relate to the price before tax.\n3. The calculations for `A_s` and `B_s` do not correctly implement the floor function required by the problem.\n4. Vectors `a` and `b` are declared as `vector<double>` but store integer values, leading to type inconsistencies.\n5. The variable name `min` shadows the standard library function `min()`, which can cause unexpected behavior.\n6. The nested loops assume exactly 10 elements in vectors `a` and `b`, which may not accurately reflect the number of possible prices.\n7. The program does not correctly find the minimum price that satisfies both tax conditions, resulting in incorrect output."
    },
    {
        "problem_id": "p02765",
        "question": "Score : 100 points\n\nProblem StatementTakahashi is a member of a programming competition site, ButCoder.\nEach member of ButCoder is assigned two values: Inner Rating and Displayed Rating.\nThe Displayed Rating of a member is equal to their Inner Rating if the member has participated in 10 or more contests. Otherwise, the Displayed Rating will be their Inner Rating minus 100 \\times (10 - K) when the member has participated in K contests.\nTakahashi has participated in N contests, and his Displayed Rating is R. Find his Inner Rating.\n\nConstraints\nAll values in input are integers.\n1 \\leq N \\leq 100\n0 \\leq R \\leq 4111\n\nInputInput is given from Standard Input in the following format:\nN R\n\nOutputPrint his Inner Rating.\n\nSample Input 12 2919\n\nSample Output 13719\n\nTakahashi has participated in 2 contests, which is less than 10, so his Displayed Rating is his Inner Rating minus 100 \\times (10 - 2) = 800.\nThus, Takahashi's Inner Rating is 2919 + 800 = 3719.\n\nSample Input 222 3051\n\nSample Output 23051",
        "desc": "This C++ problem assesses the ability to implement conditional logic and perform arithmetic calculations based on input criteria. It is categorized as an easy-level question, suitable for beginners practicing basic programming constructs.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, R;\n  cin >> N >> R;\n  if (N < 10) cout << R + 100 * (10 - N) << endl;\n  else cout << R << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02766",
        "question": "Score : 200 points\n\nProblem StatementGiven is an integer N. Find the number of digits that N has in base K.\n\nNotesFor information on base-K representation, see Positional notation - Wikipedia.\n\nConstraints\nAll values in input are integers.\n1 \\leq N \\leq 10^9\n2 \\leq K \\leq 10\n\nInputInput is given from Standard Input in the following format:\nN K\n\nOutputPrint the number of digits that N has in base K.\n\nSample Input 111 2\n\nSample Output 14\n\nIn binary, 11 is represented as 1011.\n\nSample Input 21010101 10\n\nSample Output 27\n\nSample Input 3314159265 3\n\nSample Output 318",
        "desc": "This problem assesses understanding of number base conversions and digit calculation by requiring the determination of how many digits an integer \\( N \\) has in base \\( K \\). It tests concepts such as logarithmic computations or iterative division and is categorized as a medium-difficulty C++ programming challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, K, ans = 0;\n  cin >> N >> K;\n  while (N > 0) {\n    N /= K;\n    ans++;\n  }\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02767",
        "question": "Score : 300 points\n\nProblem StatementThere are N people living on a number line.\nThe i-th person lives at coordinate X_i.\nYou are going to hold a meeting that all N people have to attend.\nThe meeting can be held at any integer coordinate. If you choose to hold the meeting at coordinate P, the i-th person will spend (X_i - P)^2 points of stamina to attend the meeting.\nFind the minimum total points of stamina the N people have to spend.\n\nConstraints\nAll values in input are integers.\n1 \\leq N \\leq 100\n1 \\leq X_i \\leq 100\n\nInputInput is given from Standard Input in the following format:\nN\nX_1 X_2 ... X_N\n\nOutputPrint the minimum total stamina the N people have to spend.\n\nSample Input 12\n1 4\n\nSample Output 15\n\nAssume the meeting is held at coordinate 2. In this case, the first person will spend (1 - 2)^2 points of stamina, and the second person will spend (4 - 2)^2 = 4 points of stamina, for a total of 5 points of stamina. This is the minimum total stamina that the 2 people have to spend.\nNote that you can hold the meeting only at an integer coordinate.\n\nSample Input 27\n14 14 2 13 56 2 37\n\nSample Output 22354",
        "desc": "This C++ problem requires determining the optimal integer coordinate to minimize the sum of squared distances for N people on a number line, testing concepts such as brute-force iteration and quadratic optimization. It is classified as an intermediate-level challenge due to its need for efficient searching within given constraints.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N;\n  cin >> N;\n  vector<int> X(N), sum(N);\n  for (int i = 0; i < N; i++) cin >> X[i];\n  sort(X.begin(), X.end());\n  int L = X[0];\n  int R = X[N-1];\n  int ans = INT_MAX;\n  for (int i = L; i <= R; i++) {\n    int cost = 0;\n    for (int j = 0; j < N; j++) {\n      cost += (X[j] - i) * (X[j] - i); \n    }\n    ans = min(ans, cost);\n  }\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03564",
        "question": "Score : 200 points\n\nProblem StatementSquare1001 has seen an electric bulletin board displaying the integer 1.\nHe can perform the following operations A and B to change this value:\n\nOperation A: The displayed value is doubled.\nOperation B: The displayed value increases by K.\n\nSquare1001 needs to perform these operations N times in total.\nFind the minimum possible value displayed in the board after N operations.\n\nConstraints\n1 \\leq N, K \\leq 10\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nK\n\nOutputPrint the minimum possible value displayed in the board after N operations.\n\nSample Input 14\n3\n\nSample Output 110\n\nThe value will be minimized when the operations are performed in the following order: A, A, B, B.\nIn this case, the value will change as follows: 1 → 2 → 4 → 7 → 10.  \n\nSample Input 210\n10\n\nSample Output 276\n\nThe value will be minimized when the operations are performed in the following order: A, A, A, A, B, B, B, B, B, B.\nIn this case, the value will change as follows: 1 → 2 → 4 → 8 → 16 → 26 → 36 → 46 → 56 → 66 → 76.  \nBy the way, this contest is AtCoder Beginner Contest 076.",
        "desc": "This C++ problem evaluates the ability to optimize sequences using dynamic programming or exhaustive search techniques to achieve the minimal possible value after a series of operations. It is categorized as a beginner to intermediate difficulty level, suitable for those familiar with basic algorithmic strategies and problem-solving.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, K, sum = 1;\n  cin >> N >> K;\n  for (int i = 0; i < N; i++) {\n    if (sum * 2 > sum + K) sum += K;\n    else sum *= 2; \n  }\n  cout << sum << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03565",
        "question": "Score : 300 points\n\nProblem StatementE869120 found a chest which is likely to contain treasure.\nHowever, the chest is locked. In order to open it, he needs to enter a string S consisting of lowercase English letters.\nHe also found a string S', which turns out to be the string S with some of its letters (possibly all or none) replaced with ?.  \nOne more thing he found is a sheet of paper with the following facts written on it:  \n\nCondition 1: The string S contains a string T as a contiguous substring.\nCondition 2: S is the lexicographically smallest string among the ones that satisfy Condition 1.\n\nPrint the string S.\nIf such a string does not exist, print UNRESTORABLE.  \n\nConstraints\n1 \\leq |S'|, |T| \\leq 50\nS' consists of lowercase English letters and ?.\nT consists of lowercase English letters.\n\nInputInput is given from Standard Input in the following format:\nS\nT'\n\nOutputPrint the string S.\nIf such a string does not exist, print UNRESTORABLE instead.  \n\nSample Input 1?tc????\ncoder\n\nSample Output 1atcoder\n\nThere are 26 strings that satisfy Condition 1: atcoder, btcoder, ctcoder,..., ztcoder.\nAmong them, the lexicographically smallest is atcoder, so we can say S = atcoder.\n\nSample Input 2??p??d??\nabc\n\nSample Output 2UNRESTORABLE\n\nThere is no string that satisfies Condition 1, so the string S does not exist.",
        "desc": "This C++ problem requires reconstructing a string by replacing wildcard characters (`?`) to ensure it contains a specific substring `T` while being the lexicographically smallest possible. It tests knowledge of string manipulation, pattern matching, and greedy algorithms, and is classified as a challenging (hard) difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  string s, t;\n  cin >> s >> t;\n  int L = -1;\n  int sl = s.length();\n  int tl = t.length();\n  for (int i = 0; i < sl-tl+1; i++) {\n    for (int j = 0; j < tl; j++) {\n      if (s[i+j] != t[j] && s[i+j] != '?') break;\n      else if (j == tl-1) L = i;  \n    }\n  }\n  if (L == -1) {\n    cout << \"UNRESTORABLE\" << endl;\n    return 0;\n  }\n  for (int i = L; i < L+tl; i++) s[i] = t[i-L];\n  for (int i = 0; i < sl; i++) {\n    if (s[i] == '?') s[i] = 'a';\n  }\n  cout << s << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03803",
        "question": "Score : 100 points\n\nProblem StatementAlice and Bob are playing One Card Poker.\nOne Card Poker is a two-player game using playing cards.  \nEach card in this game shows an integer between 1 and 13, inclusive.\nThe strength of a card is determined by the number written on it, as follows:  \nWeak 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10 &lt; 11 &lt; 12 &lt; 13 &lt; 1 Strong  \nOne Card Poker is played as follows:  \n\nEach player picks one card from the deck. The chosen card becomes the player's hand.\nThe players reveal their hands to each other. The player with the stronger card wins the game.\nIf their cards are equally strong, the game is drawn.  \n\nYou are watching Alice and Bob playing the game, and can see their hands.\nThe number written on Alice's card is A, and the number written on Bob's card is B.\nWrite a program to determine the outcome of the game.  \n\nConstraints\n1≦A≦13 \n1≦B≦13 \nA and B are integers.\n\nInputThe input is given from Standard Input in the following format:\nA B\n\nOutputPrint Alice if Alice will win. Print Bob if Bob will win. Print Draw if the game will be drawn.\n\nSample Input 18 6\n\nSample Output 1Alice\n\n8 is written on Alice's card, and 6 is written on Bob's card.\nAlice has the stronger card, and thus the output should be Alice.\n\nSample Input 21 1\n\nSample Output 2Draw\n\nSince their cards have the same number, the game will be drawn.\n\nSample Input 313 1\n\nSample Output 3Bob",
        "desc": "This C++ problem involves reading two integers representing card values with a custom strength hierarchy and determining the game outcome using conditional logic. It tests fundamental concepts such as input/output handling and conditional statements, and is considered to have an easy difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int A, B;\n  cin >> A >> B;\n  if (A < B) {\n    if (A == 1) {\n      cout << \"Alice\" << endl;\n      return 0;\n    }  \n    cout << \"Bob\" << endl; \n  } else if (A > B) {\n    if (B == 1) {\n      cout << \"Bob\" << endl;\n      return 0;\n    }\n    cout << \"Alice\" << endl;\n  } \n  else if (A == B) cout << \"Draw\" << endl;  \n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03804",
        "question": "Score : 200 points\n\nProblem StatementYou are given an image A composed of N rows and N columns of pixels, and a template image B composed of M rows and M columns of pixels.\nA pixel is the smallest element of an image, and in this problem it is a square of size 1×1.\nAlso, the given images are binary images, and the color of each pixel is either white or black.  \nIn the input, every pixel is represented by a character: . corresponds to a white pixel, and # corresponds to a black pixel.\nThe image A is given as N strings A_1,...,A_N.\nThe j-th character in the string A_i corresponds to the pixel at the i-th row and j-th column of the image A (1≦i,j≦N).\nSimilarly, the template image B is given as M strings B_1,...,B_M.\nThe j-th character in the string B_i corresponds to the pixel at the i-th row and j-th column of the template image B (1≦i,j≦M).  \nDetermine whether the template image B is contained in the image A when only parallel shifts can be applied to the images.  \n\nConstraints\n1≦M≦N≦50 \nA_i is a string of length N consisting of # and ..\nB_i is a string of length M consisting of # and ..\n\nInputThe input is given from Standard Input in the following format:\nN M\nA_1\nA_2\n:  \nA_N\nB_1\nB_2\n:  \nB_M\n\nOutputPrint Yes if the template image B is contained in the image A. Print No otherwise.\n\nSample Input 13 2\n#.#\n.#.\n#.#\n#.\n.#\n\nSample Output 1Yes\n\nThe template image B is identical to the upper-left 2 × 2 subimage and the lower-right 2 × 2 subimage of A. Thus, the output should be Yes.\n\nSample Input 24 1\n....\n....\n....\n....\n#\n\nSample Output 2No\n\nThe template image B, composed of a black pixel, is not contained in the image A composed of white pixels.",
        "desc": "This C++ problem involves determining if a smaller binary matrix B exists as a contiguous submatrix within a larger binary matrix A by applying parallel shifts. It tests understanding of 2D array traversal and pattern matching techniques, and is considered to have a medium difficulty level.",
        "program": "#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n  int N,M;\n  cin>>N>>M;\n  vector<string> A(N),B(M);\n  for(string &S:A) cin>>S;\n  for(string &S:B) cin>>S;\n  for(int i=0;i+M<=N;i++)\n    for(int j=0;j+M<=N;j++){\n      for(int k=0;k<M;k++)\n        for(int l=0;l<M;l++)\n          if(A[i+k][j+l]!=B[k][l]) goto home;\n      cout << \"Yes\" << endl;\n      return 0;\n      home:;\n    }\n  cout << \"No\" << endl;\n}",
        "error_desc": "No error."
    }
]