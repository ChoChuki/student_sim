[
    {
        "problem_id": "p03657",
        "question": "Score : 100 points\n\nProblem StatementSnuke is giving cookies to his three goats.\nHe has two cookie tins. One contains A cookies, and the other contains B cookies. He can thus give A cookies, B cookies or A+B cookies to his goats (he cannot open the tins).\nYour task is to determine whether Snuke can give cookies to his three goats so that each of them can have the same number of cookies.\n\nConstraints\n1 \\leq A,B \\leq 100\nBoth A and B are integers.\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputIf it is possible to give cookies so that each of the three goats can have the same number of cookies, print Possible; otherwise, print Impossible.\n\nSample Input 14 5\n\nSample Output 1Possible\n\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\nSample Input 21 1\n\nSample Output 2Impossible\n\nSince there are only two cookies, the three goats cannot have the same number of cookies no matter what Snuke gives to them.",
        "desc": "This C++ problem evaluates the ability to perform combinatorial logic and arithmetic operations to determine if three equal distributions can be made using given quantities without splitting them. It tests understanding of basic control structures and condition checking, and is considered to be of easy to medium difficulty.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int A, B;\n  cin >> A >> B;\n  if ((A + B) % 3) {\n    cout << \"Impossible\" << endl;\n  } else {\n    cout << \"Possible\" << endl;\n  }\n}",
        "error_desc": "1. The condition `(A + B) % 3` incorrectly checks only if the total number of cookies is divisible by three.\n2. The program does not consider distributing individual tins (A or B) to the goats separately.\n3. It fails to account for scenarios where a combination of A, B, and A+B cookies are given to achieve equal distribution."
    },
    {
        "problem_id": "p03643",
        "question": "Score : 100 points\n\nProblem StatementThis contest, AtCoder Beginner Contest, is abbreviated as ABC.\nWhen we refer to a specific round of ABC, a three-digit number is appended after ABC. For example, ABC680 is the 680th round of ABC.\nWhat is the abbreviation for the N-th round of ABC? Write a program to output the answer.\n\nConstraints\n100 ≤ N ≤ 999\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the abbreviation for the N-th round of ABC.\n\nSample Input 1100\n\nSample Output 1ABC100\n\nThe 100th round of ABC is ABC100.\n\nSample Input 2425\n\nSample Output 2ABC425\n\nSample Input 3999\n\nSample Output 3ABC999",
        "desc": "This C++ problem assesses basic input/output operations and simple arithmetic manipulation to format a specific string based on numerical input. It is classified as an easy-level question, suitable for beginners to practice string concatenation and integer handling.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int N;\n  cin >> N;\n  cout << \"ABC\" << N << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03631",
        "question": "Score : 100 points\n\nProblem StatementYou are given a three-digit positive integer N.\nDetermine whether N is a palindromic number.\nHere, a palindromic number is an integer that reads the same backward as forward in decimal notation.\n\nConstraints\n100≤N≤999\nN is an integer.\n\nInputInput is given from Standard Input in the following format:  \nN\n\nOutputIf N is a palindromic number, print Yes; otherwise, print No.\n\nSample Input 1575\n\nSample Output 1Yes\n\nN=575 is also 575 when read backward, so it is a palindromic number. You should print Yes.\n\nSample Input 2123\n\nSample Output 2No\n\nN=123 becomes 321 when read backward, so it is not a palindromic number. You should print No.\n\nSample Input 3812\n\nSample Output 3No",
        "desc": "This C++ problem requires determining whether a given three-digit integer is a palindrome by comparing its digits. It tests fundamental concepts such as integer manipulation and conditional statements, and is classified as an easy difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  string N;\n  cin >> N;\n  if (N[0] == N[2]) {\n    cout << \"Yes\" << endl;\n  } else {\n    cout << \"No\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03623",
        "question": "Score : 100 points\n\nProblem StatementSnuke lives at position x on a number line.\nOn this line, there are two stores A and B, respectively at position a and b, that offer food for delivery.\nSnuke decided to get food delivery from the closer of stores A and B.\nFind out which store is closer to Snuke's residence.\nHere, the distance between two points s and t on a number line is represented by |s-t|.\n\nConstraints\n1 \\leq x \\leq 1000\n1 \\leq a \\leq 1000\n1 \\leq b \\leq 1000\nx, a and b are pairwise distinct.\nThe distances between Snuke's residence and stores A and B are different.\n\nInputInput is given from Standard Input in the following format:\nx a b\n\nOutputIf store A is closer, print A; if store B is closer, print B.\n\nSample Input 15 2 7\n\nSample Output 1B\n\nThe distances between Snuke's residence and stores A and B are 3 and 2, respectively.\nSince store B is closer, print B.\n\nSample Input 21 999 1000\n\nSample Output 2A",
        "desc": "This C++ problem requires determining which of two stores is closer to a given position on a number line by calculating the absolute distances. It tests fundamental concepts such as input/output handling, use of absolute value functions, and conditional logic, and is classified as an easy difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int x, a, b, temp1, temp2;\n  cin >> x >> a >> b;\n  temp1 = a - x;\n  if (0 > temp1) {\n    temp1 *= -1;\n  }\n  temp2 = b - x;\n  if (0 > temp2) {\n    temp2 *= -1;\n  }\n  if (temp1 < temp2) {\n    cout << \"A\" << endl;\n  } else {\n    cout << \"B\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03609",
        "question": "Score : 100 points\n\nProblem StatementWe have a sandglass that runs for X seconds. The sand drops from the upper bulb at a rate of 1 gram per second. That is, the upper bulb initially contains X grams of sand.\nHow many grams of sand will the upper bulb contains after t seconds?\n\nConstraints\n1≤X≤10^9\n1≤t≤10^9\nX and t are integers.\n\nInputThe input is given from Standard Input in the following format:\nX t\n\nOutputPrint the number of sand in the upper bulb after t second.\n\nSample Input 1100 17\n\nSample Output 183\n\n17 out of the initial 100 grams of sand will be consumed, resulting in 83 grams.\n\nSample Input 248 58\n\nSample Output 20\n\nAll 48 grams of sand will be gone, resulting in 0 grams.\n\nSample Input 31000000000 1000000000\n\nSample Output 30",
        "desc": "This C++ problem requires calculating the remaining sand in a sandglass after a specified time, testing the programmer's ability to perform basic arithmetic operations and implement conditional logic efficiently with large integer inputs. It is classified as an easy difficulty level challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int X, t;\n  cin >> X >> t;\n  if (X - t >= 0) {\n    cout << X - t << endl;\n  } else {\n    cout << 0 << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03573",
        "question": "Score : 100 points\n\nProblem StatementYou are given three integers, A, B and C.\nAmong them, two are the same, but the remaining one is different from the rest.\nFor example, when A=5,B=7,C=5, A and C are the same, but B is different.\nFind the one that is different from the rest among the given three integers.  \n\nConstraints\n-100 \\leq A,B,C \\leq 100 \nA, B and C are integers.\nThe input satisfies the condition in the statement.\n\nInputInput is given from Standard Input in the following format:  \nA B C\n\nOutputAmong A, B and C, print the integer that is different from the rest.\n\nSample Input 15 7 5\n\nSample Output 17\n\nThis is the same case as the one in the statement.\n\nSample Input 21 1 7\n\nSample Output 27\n\nIn this case, C is the one we seek.\n\nSample Input 3-100 100 100\n\nSample Output 3-100",
        "desc": "This C++ problem requires identifying the unique integer among three given numbers where two are identical, testing fundamental concepts such as conditional statements and comparison operations. It is classified as an easy-level exercise, suitable for beginners to practice basic logic implementation and decision-making structures.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int A, B, C;\n  cin >> A >> B >> C;\n  if (A == B) {\n    cout << C << endl;\n  } else if (A == C) {\n    cout << B << endl;\n  } else {\n    cout << A << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03555",
        "question": "Score : 100 points\n\nProblem StatementYou are given a grid with 2 rows and 3 columns of squares.\nThe color of the square at the i-th row and j-th column is represented by the character C_{ij}.\nWrite a program that prints YES if this grid remains the same when rotated 180 degrees, and prints NO otherwise.\n\nConstraints\nC_{i,j}(1 \\leq i \\leq 2, 1 \\leq j \\leq 3) is a lowercase English letter.\n\nInputInput is given from Standard Input in the following format:\nC_{11}C_{12}C_{13}\nC_{21}C_{22}C_{23}\n\nOutputPrint YES if this grid remains the same when rotated 180 degrees; print NO otherwise.\n\nSample Input 1pot\ntop\n\nSample Output 1YES\n\nThis grid remains the same when rotated 180 degrees.\n\nSample Input 2tab\nbet\n\nSample Output 2NO\n\nThis grid does not remain the same when rotated 180 degrees.\n\nSample Input 3eye\neel\n\nSample Output 3NO",
        "desc": "This C++ problem tests understanding of array indexing and symmetry checking by requiring verification if a 2×3 character grid remains identical when rotated 180 degrees. It is classified as an easy to medium difficulty level exercise.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  string C1, C2;\n  cin >> C1 >> C2;\n  if ( C1[0] == C2[2]\n    && C1[1] == C2[1]\n    && C1[2] == C2[0] )\n  {\n    cout << \"YES\" << endl;\n  } else {\n    cout << \"NO\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03547",
        "question": "Score : 100 points\n\nProblem StatementIn programming, hexadecimal notation is often used.\nIn hexadecimal notation, besides the ten digits 0, 1, ..., 9, the six letters A, B, C, D, E and F are used to represent the values 10, 11, 12, 13, 14 and 15, respectively.\nIn this problem, you are given two letters X and Y. Each X and Y is A, B, C, D, E or F.\nWhen X and Y are seen as hexadecimal numbers, which is larger?\n\nConstraints\nEach X and Y is A, B, C, D, E or F.\n\nInputInput is given from Standard Input in the following format:\nX Y\n\nOutputIf X is smaller, print &lt;; if Y is smaller, print &gt;; if they are equal, print =.\n\nSample Input 1A B\n\nSample Output 1&lt;\n\n10 &lt; 11.\n\nSample Input 2E C\n\nSample Output 2&gt;\n\n14 &gt; 12.\n\nSample Input 3F F\n\nSample Output 3=\n\n15 = 15.",
        "desc": "This C++ problem involves comparing two hexadecimal characters (A–F) by converting them to their corresponding numerical values and determining which is larger, smaller, or if they are equal. It tests knowledge of hexadecimal notation, character-to-integer conversion, and conditional logic, and is classified as an easy difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  char X, Y;\n  cin >> X >> Y;\n  if (X > Y) {\n    cout << \">\" << endl;\n  } else if (X < Y) {\n    cout << \"<\" << endl;\n  } else {\n    cout << \"=\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03469",
        "question": "Score : 100 points\n\nProblem StatementOn some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy/mm/dd format. For example, January 23, 2018 should be written as 2018/01/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.\n\nConstraints\nS is a string of length 10.\nThe first eight characters in S are 2017/01/.\nThe last two characters in S are digits and represent an integer between 1 and 31 (inclusive).\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputReplace the first four characters in S with 2018 and print it.\n\nSample Input 12017/01/07\n\nSample Output 12018/01/07\n\nSample Input 22017/01/31\n\nSample Output 22018/01/31",
        "desc": "This C++ problem requires manipulating a fixed-format string by replacing specific characters, testing knowledge of string indexing and modification. It is categorized as an easy-level challenge, suitable for beginners practicing basic string operations.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  string S;\n  cin >> S;\n  S[3] = '8';\n  cout << S << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03423",
        "question": "Score : 100 points\n\nProblem StatementThere are N students in a school.\nWe will divide these students into some groups, and in each group they will discuss some themes.\nYou think that groups consisting of two or less students cannot have an effective discussion, so you want to have as many groups consisting of three or more students as possible.\nDivide the students so that the number of groups consisting of three or more students is maximized.\n\nConstraints\n1 \\leq N \\leq 1000\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputIf you can form at most x groups consisting of three or more students, print x.\n\nSample Input 18\n\nSample Output 12\n\nFor example, you can form a group of three students and another of five students.\n\nSample Input 22\n\nSample Output 20\n\nSometimes you cannot form any group consisting of three or more students, regardless of how you divide the students.\n\nSample Input 39\n\nSample Output 33",
        "desc": "This C++ problem assesses the ability to apply greedy algorithms and integer partitioning to maximize the number of student groups with three or more members. It is categorized as an intermediate difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int N;\n  cin >> N;\n  cout << N / 3 << endl;\n}",
        "error_desc": "No error."
    }
]