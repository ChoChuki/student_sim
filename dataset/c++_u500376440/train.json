[
    {
        "problem_id": "p03473",
        "question": "Score : 100 points\n\nProblem StatementHow many hours do we have until New Year at M o'clock (24-hour notation) on 30th, December?\n\nConstraints\n1≤M≤23\nM is an integer.\n\nInputInput is given from Standard Input in the following format:\nM\n\nOutputIf we have x hours until New Year at M o'clock on 30th, December, print x.\n\nSample Input 121\n\nSample Output 127\n\nWe have 27 hours until New Year at 21 o'clock on 30th, December.\n\nSample Input 212\n\nSample Output 236",
        "desc": "This C++ problem involves calculating the number of hours remaining until New Year from a specified hour on December 30th, testing the programmer’s ability to perform basic arithmetic operations and handle input/output. It is classified as an **easy** difficulty level problem.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int M;\n  int x;\n  cin >> M;\n  x = 24 + ( 24 - M );\n  cout << x << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03563",
        "question": "Score : 100 points\n\nProblem StatementTakahashi is a user of a site that hosts programming contests.\nWhen a user competes in a contest, the rating of the user (not necessarily an integer) changes according to the performance of the user, as follows:  \n\nLet the current rating of the user be a.\nSuppose that the performance of the user in the contest is b.\nThen, the new rating of the user will be the avarage of a and b.\n\nFor example, if a user with rating 1 competes in a contest and gives performance 1000, his/her new rating will be 500.5, the average of 1 and 1000.\nTakahashi's current rating is R, and he wants his rating to be exactly G after the next contest.\nFind the performance required to achieve it.  \n\nConstraints\n0 \\leq R, G \\leq 4500\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nR\nG\n\nOutputPrint the performance required to achieve the objective.\n\nSample Input 12002\n2017\n\nSample Output 12032\n\nTakahashi's current rating is 2002.\nIf his performance in the contest is 2032, his rating will be the average of 2002 and 2032, which is equal to the desired rating, 2017.\n\nSample Input 24500\n0\n\nSample Output 2-4500\n\nAlthough the current and desired ratings are between 0 and 4500, the performance of a user can be below 0.",
        "desc": "The problem asks for computing the necessary contest performance value so that the average of the current rating \\( R \\) and the performance \\( b \\) equals a desired rating \\( G \\). It assesses understanding of basic algebra and input/output operations in C++, and is classified as an easy-level programming challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int R;\n  int G;\n  int x;\n  cin >> R >> G;\n  x = G * 2 - R;\n  cout << x << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03597",
        "question": "Score : 100 points\n\nProblem StatementWe have an N \\times N square grid.\nWe will paint each square in the grid either black or white.\nIf we paint exactly A squares white, how many squares will be painted black?\n\nConstraints\n1 \\leq N \\leq 100\n0 \\leq A \\leq N^2\n\nInputsInput is given from Standard Input in the following format:\nN\nA\n\nOutputsPrint the number of squares that will be painted black.\n\nSample Input 13\n4\n\nSample Output 15\n\nThere are nine squares in a 3 \\times 3 square grid.\nFour of them will be painted white, so the remaining five squares will be painted black.\n\nSample Input 219\n100\n\nSample Output 2261\n\nSample Input 310\n0\n\nSample Output 3100\n\nAs zero squares will be painted white, all the squares will be painted black.",
        "desc": "This C++ problem requires calculating the number of black squares in an N×N grid by subtracting a given number of white squares (A) from the total squares. It tests fundamental arithmetic operations and basic input/output handling, making it an easy-level question.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N;\n  int A;\n  cin >> N >> A;\n  cout << pow(N, 2) - A << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03485",
        "question": "Score : 100 points\n\nProblem StatementYou are given two positive integers a and b.\nLet x be the average of a and b.\nPrint x rounded up to the nearest integer.\n\nConstraints\na and b are integers.\n1 \\leq a, b \\leq 100\n\nInputInput is given from Standard Input in the following format:\na b\n\nOutputPrint x rounded up to the nearest integer.\n\nSample Input 11 3\n\nSample Output 12\n\nThe average of 1 and 3 is 2.0, and it will be rounded up to the nearest integer, 2.\n\nSample Input 27 4\n\nSample Output 26\n\nThe average of 7 and 4 is 5.5, and it will be rounded up to the nearest integer, 6.\n\nSample Input 35 5\n\nSample Output 35",
        "desc": "This C++ problem assesses the ability to perform basic arithmetic operations, handle input/output, and apply rounding techniques using functions like `ceil`. It is categorized as an easy-level question, suitable for beginners practicing fundamental programming concepts.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int a;\n  int b;\n  cin >> a >> b;\n  cout << ( a + b + 1 ) / 2 << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03493",
        "question": "Score : 100 points\n\nProblem StatementSnuke has a grid consisting of three squares numbered 1, 2 and 3.\nIn each square, either 0 or 1 is written. The number written in Square i is s_i.\nSnuke will place a marble on each square that says 1.\nFind the number of squares on which Snuke will place a marble.\n\nConstraints\nEach of s_1, s_2 and s_3 is either 1 or 0.\n\nInputInput is given from Standard Input in the following format:\ns_{1}s_{2}s_{3}\n\nOutputPrint the answer.\n\nSample Input 1101\n\nSample Output 12\n\nA marble will be placed on Square 1 and 3.\n\nSample Input 2000\n\nSample Output 20\n\nNo marble will be placed on any square.",
        "desc": "This C++ problem requires handling input strings and applying conditional logic to count specific elements—in this case, determining how many of three squares contain a `1`. It tests fundamental skills in input processing and basic conditional statements, making it suitable for beginners and classified as an easy-level challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  string s;\n  int x;\n  cin >> s;\n  if (s[0]=='1') {\n    x++;\n  }\n  if (s[1]=='1') {\n    x++;\n  }\n  if (s[2]=='1') {\n    x++;\n  }\n  cout << x << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03433",
        "question": "Score: 100 points\n\nProblem Statement\nE869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.\n\nConstraints\n\nN is an integer between 1 and 10000 (inclusive).\nA is an integer between 0 and 1000 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:\nN\nA\n\nOutput\nIf E869120 can pay exactly N yen using only his 1-yen and 500-yen coins, print Yes; otherwise, print No.\n\nSample Input 12018\n218\n\nSample Output 1Yes\n\nWe can pay 2018 yen with four 500-yen coins and 18 1-yen coins, so the answer is Yes.\n\nSample Input 22763\n0\n\nSample Output 2No\n\nWhen we have no 1-yen coins, we can only pay a multiple of 500 yen using only 500-yen coins. Since 2763 is not a multiple of 500, we cannot pay this amount.\n\nSample Input 337\n514\n\nSample Output 3Yes",
        "desc": "This C++ problem assesses understanding of greedy algorithms and modular arithmetic by requiring determination of whether a specific amount can be formed using a limited number of 1-yen coins and unlimited 500-yen coins. It is categorized as a medium difficulty level problem.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N; \n  int A; \n  cin >> N >> A;\n  if ( N % 500 <= A) {\n    cout << \"Yes\" << endl;\n  } else {\n    cout << \"No\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03455",
        "question": "Score : 100 points\n\nProblem StatementAtCoDeer the deer found two positive integers, a and b.\nDetermine whether the product of a and b is even or odd.\n\nConstraints\n1 ≤ a,b ≤ 10000\na and b are integers.\n\nInputInput is given from Standard Input in the following format:\na b\n\nOutputIf the product is odd, print Odd; if it is even, print Even.\n\nSample Input 13 4\n\nSample Output 1Even\n\nAs 3 × 4 = 12 is even, print Even.\n\nSample Input 21 21\n\nSample Output 2Odd\n\nAs 1 × 21 = 21 is odd, print Odd.",
        "desc": "This C++ problem assesses understanding of basic arithmetic operations and the use of conditional statements to determine the parity (even or odd) of a product of two integers. It is classified as an easy-level question, making it suitable for beginners learning fundamental programming concepts.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int a, b;\n  cin >> a >> b;\n  if ( ( a * b ) % 2 ) {\n    cout << \"Odd\" << endl;\n  } else {\n    cout << \"Even\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03477",
        "question": "Score : 100 points\n\nProblem StatementA balance scale tips to the left if L&gt;R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L&lt;R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\nConstraints\n1\\leq A,B,C,D \\leq 10\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nA B C D\n\nOutputPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\nSample Input 13 8 7 1\n\nSample Output 1Left\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11&gt;8, we should print Left.\n\nSample Input 23 4 5 2\n\nSample Output 2Balanced\n\nThe total weight of the masses on the left pan is 7, and the total weight of the masses on the right pan is 7. Since 7=7, we should print Balanced.\n\nSample Input 31 7 6 4\n\nSample Output 3Right\n\nThe total weight of the masses on the left pan is 8, and the total weight of the masses on the right pan is 10. Since 8&lt;10, we should print Right.",
        "desc": "The problem requires reading four integer weights, calculating the sums on each side of a balance scale, and determining its state by comparing these sums. It tests basic input/output operations, arithmetic calculations, and conditional logic, and is classified as an easy-level C++ programming challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int A, B, C, D;\n  cin >> A >> B >> C >> D;\n  if ( ( A + B ) > ( C + D ) ) {\n    cout << \"Left\" << endl;\n  } else if ( ( A + B ) < ( C + D ) ) {\n    cout << \"Right\" << endl;\n  } else\n    cout << \"Balanced\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03501",
        "question": "Score : 100 points\n\nProblem StatementYou are parking at a parking lot. You can choose from the following two fee plans:\n\nPlan 1: The fee will be A×T yen (the currency of Japan) when you park for T hours.\nPlan 2: The fee will be B yen, regardless of the duration.\n\nFind the minimum fee when you park for N hours.\n\nConstraints\n1≤N≤20\n1≤A≤100\n1≤B≤2000\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN A B\n\nOutputWhen the minimum fee is x yen, print the value of x.\n\nSample Input 17 17 120\n\nSample Output 1119\n\nIf you choose Plan 1, the fee will be 7×17=119 yen.\nIf you choose Plan 2, the fee will be 120 yen.\n\nThus, the minimum fee is 119 yen.\n\nSample Input 25 20 100\n\nSample Output 2100\n\nThe fee might be the same in the two plans.\n\nSample Input 36 18 100\n\nSample Output 3100",
        "desc": "The problem tests basic arithmetic operations and conditional logic to compare two pricing plans and determine the minimum cost. It is classified as an easy-level C++ programming question suitable for beginners.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, A, B;\n  cin >> N >> A >> B;\n  if ( B >= N * A ) {\n    cout << N * A << endl;\n  } else\n    cout << B << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03543",
        "question": "Score : 100 points\n\nProblem StatementWe call a 4-digit integer with three or more consecutive same digits, such as 1118, good.\nYou are given a 4-digit integer N. Answer the question: Is N good?\n\nConstraints\n1000 ≤ N ≤ 9999\nN is an integer.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputIf N is good, print Yes; otherwise, print No.\n\nSample Input 11118\n\nSample Output 1Yes\n\nN is good, since it contains three consecutive 1.\n\nSample Input 27777\n\nSample Output 2Yes\n\nAn integer is also good when all the digits are the same.\n\nSample Input 31234\n\nSample Output 3No",
        "desc": "This C++ problem asks whether a given 4-digit integer contains three or more consecutive identical digits, testing concepts such as digit manipulation and conditional logic. It is considered to be of easy to moderate difficulty.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  string N;\n  cin >> N;\n  if ((N[0] == N[1] && N[1] == N[2])\n   || (N[1] == N[2] && N[2] == N[3])) {\n    cout << \"Yes\" << endl;\n  } else\n    cout << \"No\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03424",
        "question": "Score : 200 points\n\nProblem StatementIn Japan, people make offerings called hina arare, colorful crackers, on March 3.\nWe have a bag that contains N hina arare. (From here, we call them arare.)\nIt is known that the bag either contains arare in three colors: pink, white and green, or contains arare in four colors: pink, white, green and yellow.\nWe have taken out the arare in the bag one by one, and the color of the i-th arare was S_i, where colors are represented as follows - pink: P, white: W, green: G, yellow: Y.\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n\nConstraints\n1 \\leq N \\leq 100\nS_i is P, W, G or Y.\nThere always exist i, j and k such that S_i=P, S_j=W and S_k=G.\n\nInputInput is given from Standard Input in the following format:\nN\nS_1 S_2 ... S_N\n\nOutputIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n\nSample Input 16\nG W Y P Y W\n\nSample Output 1Four\n\nThe bag contained arare in four colors, so you should print Four.\n\nSample Input 29\nG W W G P W P G G\n\nSample Output 2Three\n\nThe bag contained arare in three colors, so you should print Three.\n\nSample Input 38\nP Y W G Y W Y Y\n\nSample Output 3Four",
        "desc": "This C++ problem requires identifying whether a sequence of given color codes contains three or four distinct colors, utilizing concepts such as array manipulation and set operations for unique element counting. It is classified as an easy to medium difficulty level problem.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N;\n  char S;\n  bool flag = false;\n  cin >> N;\n  for (int i=0; i < N; i++) {\n    cin >> S;\n    if (S == 'Y') {\n      flag = true;\n    }\n  }\n  if (flag) {\n    cout << \"Four\" << endl;\n  } else {\n    cout << \"Three\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03606",
        "question": "Score : 200 points\n\nProblem StatementJoisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?\n\nConstraints\n1≤N≤1000\n1≤l_i≤r_i≤100000\nNo seat is occupied by more than one person.\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nl_1 r_1\n:\nl_N r_N\n\nOutputPrint the number of people sitting at the theater.\n\nSample Input 11\n24 30\n\nSample Output 17\n\nThere are 7 people, sitting at Seat 24,25,26,27,28,29 and 30.\n\nSample Input 22\n6 8\n3 3\n\nSample Output 24",
        "desc": "This C++ problem asks for calculating the total number of unique seats occupied in a theater based on multiple groups' consecutive seat ranges, testing concepts such as interval handling and efficient data management. It is considered a medium-difficulty challenge suitable for intermediate programmers.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, a, b, count = 0;\n  bool seki[100000] = {false};\n  cin >> N;\n  for (int i = 0; i < N; i++) {\n    cin >> a >> b;\n    for (int j = a - 1; j < b; j++) {\n      seki[j] = true;\n    }\n  }\n  for (int k = 0; k < 100000; k++) {\n    if (seki[k] == true) {\n      count++;\n    }\n  }\n  cout << count << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03502",
        "question": "Score : 200 points\n\nProblem StatementAn integer X is called a Harshad number if X is divisible by f(X), where f(X) is the sum of the digits in X when written in base 10.\nGiven an integer N, determine whether it is a Harshad number.\n\nConstraints\n1?N?10^8\nN is an integer.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint Yes if N is a Harshad number; print No otherwise.\n\nSample Input 112\n\nSample Output 1Yes\n\nf(12)=1+2=3. Since 12 is divisible by 3, 12 is a Harshad number.\n\nSample Input 257\n\nSample Output 2No\n\nf(57)=5+7=12. Since 57 is not divisible by 12, 12 is not a Harshad number.\n\nSample Input 3148\n\nSample Output 3No",
        "desc": "This C++ problem requires determining whether a given integer is a Harshad number by calculating the sum of its digits and checking divisibility. It tests knowledge of basic arithmetic operations, digit manipulation, and control structures, and is considered to have a medium difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, temp, kakuwa = 0;\n  cin >> N;\n  temp = N;\n  while (temp > 0) {\n    kakuwa += temp % 10;\n    temp /= 10;\n  }\n  if (N % kakuwa) {\n    cout << \"No\" << endl;\n  } else {\n    cout << \"Yes\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03564",
        "question": "Score : 200 points\n\nProblem StatementSquare1001 has seen an electric bulletin board displaying the integer 1.\nHe can perform the following operations A and B to change this value:\n\nOperation A: The displayed value is doubled.\nOperation B: The displayed value increases by K.\n\nSquare1001 needs to perform these operations N times in total.\nFind the minimum possible value displayed in the board after N operations.\n\nConstraints\n1 \\leq N, K \\leq 10\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nK\n\nOutputPrint the minimum possible value displayed in the board after N operations.\n\nSample Input 14\n3\n\nSample Output 110\n\nThe value will be minimized when the operations are performed in the following order: A, A, B, B.\nIn this case, the value will change as follows: 1 → 2 → 4 → 7 → 10.  \n\nSample Input 210\n10\n\nSample Output 276\n\nThe value will be minimized when the operations are performed in the following order: A, A, A, A, B, B, B, B, B, B.\nIn this case, the value will change as follows: 1 → 2 → 4 → 8 → 16 → 26 → 36 → 46 → 56 → 66 → 76.  \nBy the way, this contest is AtCoder Beginner Contest 076.",
        "desc": "This C++ problem evaluates the ability to optimize sequences using dynamic programming or exhaustive search techniques to achieve the minimal possible value after a series of operations. It is categorized as a beginner to intermediate difficulty level, suitable for those familiar with basic algorithmic strategies and problem-solving.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, K, kazu = 1;\n  cin >> N >> K;\n  for (int i = 0; i < N ; i++) {\n    if (kazu * 2 < kazu + K) {\n      kazu *= 2;\n    } else {\n      kazu += K;\n    }\n  }\n  cout << kazu << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03852",
        "question": "Score : 100 points\n\nProblem StatementGiven a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: a, e, i, o and u.\n\nConstraints\nc is a lowercase English letter.\n\nInputThe input is given from Standard Input in the following format:\nc\n\nOutputIf c is a vowel, print vowel. Otherwise, print consonant.\n\nSample Input 1a\n\nSample Output 1vowel\n\nSince a is a vowel, print vowel.\n\nSample Input 2z\n\nSample Output 2consonant\n\nSample Input 3s\n\nSample Output 3consonant",
        "desc": "This C++ problem requires determining whether a given lowercase English letter is a vowel by checking against a predefined set of vowels using conditional statements. It tests basic understanding of control structures and character manipulation, and is classified as an easy-level challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  char c;\n  char aiueo[] = {'a', 'i', 'u', 'e', 'o'};\n  bool flag = false;\n  cin >> c;\n  for (int i = 0; i < 5 ; i++) {\n    if (aiueo[i] == c) {\n      flag = true;\n    }\n  }\n  if (flag) {\n    cout << \"vowel\" << endl;\n  } else {\n    cout << \"consonant\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03860",
        "question": "Score : 100 points\n\nProblem StatementSnuke is going to open a contest named \"AtCoder s Contest\".\nHere, s is a string of length 1 or greater, where the first character is an uppercase English letter, and the second and subsequent characters are lowercase English letters.\nSnuke has decided to abbreviate the name of the contest as \"AxC\".\nHere, x is the uppercase English letter at the beginning of s.\nGiven the name of the contest, print the abbreviation of the name.\n\nConstraints\nThe length of s is between 1 and 100, inclusive.\nThe first character in s is an uppercase English letter.\nThe second and subsequent characters in s are lowercase English letters.\n\nInputThe input is given from Standard Input in the following format:\nAtCoder s Contest\n\nOutputPrint the abbreviation of the name of the contest.\n\nSample Input 1AtCoder Beginner Contest\n\nSample Output 1ABC\n\nThe contest in which you are participating now.\n\nSample Input 2AtCoder Snuke Contest\n\nSample Output 2ASC\n\nThis contest does not actually exist.\n\nSample Input 3AtCoder X Contest\n\nSample Output 3AXC",
        "desc": "This C++ problem tasks learners with parsing a contest name string to extract and concatenate specific uppercase letters, testing their understanding of string manipulation and character handling. It is classified as an easy-level challenge, suitable for beginners practicing basic string operations.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  string a, b, c;\n  cin >> a >> b >> c;\n  cout << a.at(0) << b.at(0) << c.at(0) << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03844",
        "question": "Score : 100 points\n\nProblem StatementJoisino wants to evaluate the formula \"A op B\".\nHere, A and B are integers, and the binary operator op is either + or -.\nYour task is to evaluate the formula instead of her.\n\nConstraints\n1≦A,B≦10^9\nop is either + or -.\n\nInputThe input is given from Standard Input in the following format:\nA op B\n\nOutputEvaluate the formula and print the result.\n\nSample Input 11 + 2\n\nSample Output 13\n\nSince 1 + 2 = 3, the output should be 3.\n\nSample Input 25 - 7\n\nSample Output 2-2",
        "desc": "This C++ problem requires reading two large integers and a binary operator (`+` or `-`), then performing the specified arithmetic operation. It tests fundamental concepts such as input parsing, conditional logic, and handling integer operations, and is considered to be of easy difficulty.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int A, B;\n  char op;\n  cin >> A >> op >> B;\n  if (op == '+') {\n    cout << A + B << endl;\n  } else if (op == '-') {\n    cout << A - B << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03712",
        "question": "Score : 200 points\n\nProblem StatementYou are given a image with a height of H pixels and a width of W pixels.\nEach pixel is represented by a lowercase English letter.\nThe pixel at the i-th row from the top and j-th column from the left is a_{ij}.\nPut a box around this image and output the result. The box should consist of # and have a thickness of 1.\n\nConstraints\n1 ≤ H, W ≤ 100\na_{ij} is a lowercase English letter.\n\nInputInput is given from Standard Input in the following format:\nH W\na_{11} ... a_{1W}\n:\na_{H1} ... a_{HW}\n\nOutputPrint the image surrounded by a box that consists of # and has a thickness of 1.\n\nSample Input 12 3\nabc\narc\n\nSample Output 1#####\n#abc#\n#arc#\n#####\n\nSample Input 21 1\nz\n\nSample Output 2###\n#z#\n###",
        "desc": "This C++ problem involves manipulating a 2D grid of characters to add a boundary, testing the programmer's understanding of arrays or string handling and input/output operations. It is categorized as an easy to intermediate difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int H, W;\n  cin >> H >> W;\n  string str[H];\n  vector<vector<char>> output(H+2, vector<char>(W+2, '#'));\n  for (int i=0; i<H; i++) {\n    cin >> str[i];\n  }\n  for (int j=0; j<H; j++) {\n    for (int k=0; k<W; k++) {\n      output.at(j+1).at(k+1) = str[j][k];\n    }\n  }\n  for (int l=0; l<H+2; l++) {\n    for (int m=0; m<W+2; m++) {\n      cout << output.at(l).at(m);\n    }\n    cout << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p04043",
        "question": "Score : 100 points\n\nProblem StatementIroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.\n\nConstraints\n1≦A,B,C≦10\n\nInputThe input is given from Standard Input in the following format:\nA B C\n\nOutputIf it is possible to construct a Haiku by using each of the phrases once, print YES (case-sensitive). Otherwise, print NO.\n\nSample Input 15 5 7\n\nSample Output 1YES\n\nUsing three phrases of length 5, 5 and 7, it is possible to construct a Haiku.\n\nSample Input 27 7 5\n\nSample Output 2NO",
        "desc": "The problem requires determining if three given integers can be arranged in the specific order of 5, 7, and 5 to form a Haiku, testing understanding of permutations and conditional logic in C++. It is classified as an easy-level challenge suitable for beginners.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int A, B, C;\n  cin >> A >> B >> C;\n  int count_5=0, count_7=0;\n  if (A==5) {\n    count_5++;\n  } else if (A==7) {\n    count_7++;\n  }\n  if (B==5) {\n    count_5++;\n  } else if (B==7) {\n    count_7++;\n  }\n  if (C==5) {\n    count_5++;\n  } else if (C==7) {\n    count_7++;\n  }\n  if (count_5==2 && count_7==1) {\n    cout << \"YES\" << endl;\n  } else {\n    cout << \"NO\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p04029",
        "question": "Score : 100 points\n\nProblem StatementThere are N children in AtCoder Kindergarten. Mr. Evi will arrange the children in a line, then give 1 candy to the first child in the line, 2 candies to the second child, ..., N candies to the N-th child. How many candies will be necessary in total?\n\nConstraints\n1≦N≦100\n\nInputThe input is given from Standard Input in the following format:\nN\n\nOutputPrint the necessary number of candies in total.\n\nSample Input 13\n\nSample Output 16\n\nThe answer is 1+2+3=6.\n\nSample Input 210\n\nSample Output 255\n\nThe sum of the integers from 1 to 10 is 55.\n\nSample Input 31\n\nSample Output 31\n\nOnly one child. The answer is 1 in this case.",
        "desc": "This problem assesses basic arithmetic operations and the ability to implement simple loops or utilize the arithmetic series formula in C++. It is considered an easy-level challenge suitable for beginners.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int N, count;\n  cin >> N;\n  for (int i=0; i<N; i++) {\n    count += i+1;\n  }\n  cout << count << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p04011",
        "question": "Score : 100 points\n\nProblem StatementThere is a hotel with the following accommodation fee:\n\nX yen (the currency of Japan) per night, for the first K nights\nY yen per night, for the (K+1)-th and subsequent nights\n\nTak is staying at this hotel for N consecutive nights.\nFind his total accommodation fee.\n\nConstraints\n1 \\leq N, K \\leq 10000\n1 \\leq Y &lt; X \\leq 10000\nN,\\,K,\\,X,\\,Y are integers.\n\nInputThe input is given from Standard Input in the following format:\nN\nK\nX\nY\n\nOutputPrint Tak's total accommodation fee.\n\nSample Input 15\n3\n10000\n9000\n\nSample Output 148000\n\nThe accommodation fee is as follows:\n\n10000 yen for the 1-st night\n10000 yen for the 2-nd night\n10000 yen for the 3-rd night\n9000 yen for the 4-th night\n9000 yen for the 5-th night\n\nThus, the total is 48000 yen.\n\nSample Input 22\n3\n10000\n9000\n\nSample Output 220000",
        "desc": "This C++ problem involves computing the total accommodation cost by applying different rates for the first K nights and the remaining nights, requiring basic input handling and conditional arithmetic. It tests fundamental programming concepts and is considered to be of easy to moderate difficulty.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int N, K, X, Y, total;\n  cin >> N >> K >> X >> Y;\n  for (int i=0; i<N && i<K; i++) {\n    total += X;\n  }\n  for (int i=0; i<N-K; i++) {\n    total += Y;\n  }\n  cout << total << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03997",
        "question": "Score : 100 points\n\nProblem StatementYou are given a trapezoid. The lengths of its upper base, lower base, and height are a, b, and h, respectively.\n\nAn example of a trapezoid\n\nFind the area of this trapezoid.\n\nConstraints\n1≦a≦100\n1≦b≦100\n1≦h≦100\nAll input values are integers.\nh is even.\n\nInputThe input is given from Standard Input in the following format:\na\nb\nh\n\nOutputPrint the area of the given trapezoid. It is guaranteed that the area is an integer.\n\nSample Input 13\n4\n2\n\nSample Output 17\n\nWhen the lengths of the upper base, lower base, and height are 3, 4, and 2, respectively, the area of the trapezoid is (3+4)×2/2 = 7.\n\nSample Input 24\n4\n4\n\nSample Output 216\n\nIn this case, a parallelogram is given, which is also a trapezoid.",
        "desc": "This problem requires applying the trapezoid area formula using basic arithmetic operations and handling standard input/output in C++. It tests knowledge of geometric calculations and fundamental programming skills, and is considered to be of easy difficulty.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int a, b, h;\n  cin >> a >> b >> h;\n  cout << (a+b)*h/2 << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03962",
        "question": "Score : 100 points\n\nProblem StatementAtCoDeer the deer recently bought three paint cans.\nThe color of the one he bought two days ago is a, the color of the one he bought yesterday is b, and the color of the one he bought today is c.\nHere, the color of each paint can is represented by an integer between 1 and 100, inclusive.\nSince he is forgetful, he might have bought more than one paint can in the same color.\nCount the number of different kinds of colors of these paint cans and tell him.\n\nConstraints\n1≦a,b,c≦100\n\nInputThe input is given from Standard Input in the following format:\na b c\n\nOutputPrint the number of different kinds of colors of the paint cans.\n\nSample Input 13 1 4\n\nSample Output 13\n\nThree different colors: 1, 3, and 4.\n\nSample Input 23 3 33\n\nSample Output 22\n\nTwo different colors: 3 and 33.",
        "desc": "This C++ problem asks the programmer to read three integers representing paint can colors and determine how many unique colors there are. It tests basic input/output operations, conditional logic or use of data structures like sets, and is classified as an easy-level problem.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint a, b, c, count;\n\tbool flag[100] = {};\n\tcin >> a >> b >> c;\n\tflag[a - 1] = true;\n\tflag[b - 1] = true;\n\tflag[c - 1] = true;\n\tfor (int i = 0; i < 100; i++) {\n\t\tif (flag[i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tcout << count << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03943",
        "question": "Score : 100 points\n\nProblem StatementTwo students of AtCoder Kindergarten are fighting over candy packs.\nThere are three candy packs, each of which contains a, b, and c candies, respectively.\nTeacher Evi is trying to distribute the packs between the two students so that each student gets the same number of candies. Determine whether it is possible.\nNote that Evi cannot take candies out of the packs, and the whole contents of each pack must be given to one of the students.\n\nConstraints\n1 ≦ a, b, c ≦ 100\n\nInputThe input is given from Standard Input in the following format:\na b c\n\nOutputIf it is possible to distribute the packs so that each student gets the same number of candies, print Yes. Otherwise, print No.\n\nSample Input 110 30 20\n\nSample Output 1Yes\n\nGive the pack with 30 candies to one student, and give the two packs with 10 and 20 candies to the other. Then, each gets 30 candies.\n\nSample Input 230 30 100\n\nSample Output 2No\n\nIn this case, the student who gets the pack with 100 candies always has more candies than the other.\nNote that every pack must be given to one of them.\n\nSample Input 356 25 31\n\nSample Output 3Yes",
        "desc": "This C++ problem assesses understanding of combinatorial logic and subset enumeration by requiring determination of whether three given integers can be partitioned into two groups with equal sums. It is rated as an intermediate difficulty level, suitable for testing basic problem-solving and implementation skills in handling small input constraints.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int a, b, c;\n  cin >> a >> b >> c;\n  if ( (a == b + c)\n    || (b == a + c)\n    || (c == a + b) )\n  {\n    cout << \"Yes\" << endl;\n  }\n  else\n  {\n    cout << \"No\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03834",
        "question": "Score : 100 points\n\nProblem StatementAs a New Year's gift, Dolphin received a string s of length 19.\nThe string s has the following format: [five lowercase English letters],[seven lowercase English letters],[five lowercase English letters].\nDolphin wants to convert the comma-separated string s into a space-separated string.\nWrite a program to perform the conversion for him.  \n\nConstraints\nThe length of s is 19.\nThe sixth and fourteenth characters in s are ,.\nThe other characters in s are lowercase English letters.\n\nInputThe input is given from Standard Input in the following format:\ns\n\nOutputPrint the string after the conversion.\n\nSample Input 1happy,newyear,enjoy\n\nSample Output 1happy newyear enjoy\n\nReplace all the commas in happy,newyear,enjoy with spaces to obtain happy newyear enjoy.\n\nSample Input 2haiku,atcoder,tasks\n\nSample Output 2haiku atcoder tasks\n\nSample Input 3abcde,fghihgf,edcba\n\nSample Output 3abcde fghihgf edcba",
        "desc": "This C++ problem involves basic string manipulation, specifically replacing designated comma characters with spaces in a fixed-format string. It tests understanding of string indexing and modification techniques and is considered to be of easy difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  string s;\n  getline(cin, s);\n  s[5] = ' ';\n  s[13] = ' ';\n  cout << s << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03826",
        "question": "Score : 100 points\n\nProblem StatementThere are two rectangles.\nThe lengths of the vertical sides of the first rectangle are A, and the lengths of the horizontal sides of the first rectangle are B.\nThe lengths of the vertical sides of the second rectangle are C, and the lengths of the horizontal sides of the second rectangle are D.\nPrint the area of the rectangle with the larger area.\nIf the two rectangles have equal areas, print that area.\n\nConstraints\nAll input values are integers.\n1≤A≤10^4\n1≤B≤10^4\n1≤C≤10^4\n1≤D≤10^4\n\nInputThe input is given from Standard Input in the following format:\nA B C D\n\nOutputPrint the area of the rectangle with the larger area.\nIf the two rectangles have equal areas, print that area.\n\nSample Input 13 5 2 7\n\nSample Output 115\n\nThe first rectangle has an area of 3×5=15, and the second rectangle has an area of 2×7=14.\nThus, the output should be 15, the larger area.\n\nSample Input 2100 600 200 300\n\nSample Output 260000",
        "desc": "This C++ problem requires calculating and comparing the areas of two rectangles based on provided side lengths, testing fundamental concepts like input/output operations, arithmetic computations, and conditional statements. It is categorized as an easy-level programming challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int A, B, C, D, seki_a, seki_b;\n  cin >> A >> B >> C >> D;\n  seki_a = A * B;\n  seki_b = C * D;\n  if (seki_a > seki_b) {\n    cout << seki_a << endl;\n  } else {\n    cout << seki_a << endl;\n  }\n}",
        "error_desc": "1. The `else` block incorrectly outputs `seki_a` instead of `seki_b`."
    },
    {
        "problem_id": "p03813",
        "question": "Score : 100 points\n\nProblem StatementSmeke has decided to participate in AtCoder Beginner Contest (ABC) if his current rating is less than 1200, and participate in AtCoder Regular Contest (ARC) otherwise.\nYou are given Smeke's current rating, x. Print ABC if Smeke will participate in ABC, and print ARC otherwise.\n\nConstraints\n1 ≦ x ≦ 3{,}000\nx is an integer.\n\nInputThe input is given from Standard Input in the following format:\nx\n\nOutputPrint the answer.\n\nSample Input 11000\n\nSample Output 1ABC\n\nSmeke's current rating is less than 1200, thus the output should be ABC.\n\nSample Input 22000\n\nSample Output 2ARC\n\nSmeke's current rating is not less than 1200, thus the output should be ARC.",
        "desc": "This C++ problem assesses the ability to handle basic input/output operations and implement conditional statements to determine output based on a given integer value. It is classified as an easy-level question, suitable for beginners.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int x;\n  cin >> x;\n  if (1200 > x) {\n    cout << \"ABC\" << endl;\n  } else {\n    cout << \"ARC\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03803",
        "question": "Score : 100 points\n\nProblem StatementAlice and Bob are playing One Card Poker.\nOne Card Poker is a two-player game using playing cards.  \nEach card in this game shows an integer between 1 and 13, inclusive.\nThe strength of a card is determined by the number written on it, as follows:  \nWeak 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10 &lt; 11 &lt; 12 &lt; 13 &lt; 1 Strong  \nOne Card Poker is played as follows:  \n\nEach player picks one card from the deck. The chosen card becomes the player's hand.\nThe players reveal their hands to each other. The player with the stronger card wins the game.\nIf their cards are equally strong, the game is drawn.  \n\nYou are watching Alice and Bob playing the game, and can see their hands.\nThe number written on Alice's card is A, and the number written on Bob's card is B.\nWrite a program to determine the outcome of the game.  \n\nConstraints\n1≦A≦13 \n1≦B≦13 \nA and B are integers.\n\nInputThe input is given from Standard Input in the following format:\nA B\n\nOutputPrint Alice if Alice will win. Print Bob if Bob will win. Print Draw if the game will be drawn.\n\nSample Input 18 6\n\nSample Output 1Alice\n\n8 is written on Alice's card, and 6 is written on Bob's card.\nAlice has the stronger card, and thus the output should be Alice.\n\nSample Input 21 1\n\nSample Output 2Draw\n\nSince their cards have the same number, the game will be drawn.\n\nSample Input 313 1\n\nSample Output 3Bob",
        "desc": "This C++ problem involves reading two integers representing card values with a custom strength hierarchy and determining the game outcome using conditional logic. It tests fundamental concepts such as input/output handling and conditional statements, and is considered to have an easy difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int A, B;\n  cin >> A >> B;\n  if (A == 1) {\n    A = 14;\n  }\n  if (B == 1) {\n    B = 14;\n  }\n  if (A > B) {\n    cout << \"Alice\" << endl;\n  } else if (A < B) {\n    cout << \"Bob\" << endl;\n  } else {\n    cout << \"Draw\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03795",
        "question": "Score : 100 points\n\nProblem StatementSnuke has a favorite restaurant.\nThe price of any meal served at the restaurant is 800 yen (the currency of Japan), and each time a customer orders 15 meals, the restaurant pays 200 yen back to the customer.\nSo far, Snuke has ordered N meals at the restaurant.\nLet the amount of money Snuke has paid to the restaurant be x yen, and let the amount of money the restaurant has paid back to Snuke be y yen.\nFind x-y.\n\nConstraints\n1 ≤ N ≤ 100\n\nInputThe input is given from Standard Input in the following format:\nN\n\nOutputPrint the answer.\n\nSample Input 120\n\nSample Output 115800\n\nSo far, Snuke has paid 16000 yen, and the restaurant has paid back 200 yen. Thus, the answer is 15800.\n\nSample Input 260\n\nSample Output 247200\n\nSnuke has paid 48000 yen for 60 meals, and the restaurant has paid back 800 yen.",
        "desc": "This C++ problem involves calculating the net cost by applying fixed pricing and tiered discounts, utilizing basic arithmetic operations and integer division. It assesses fundamental programming skills and is considered to be of easy difficulty.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int N, x, y;\n  cin >> N;\n  x = N * 800;\n  y = N / 15 * 200;\n  cout << x - y << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03777",
        "question": "Score : 100 points\n\nProblem StatementTwo deer, AtCoDeer and TopCoDeer, are playing a game called Honest or Dishonest.\nIn this game, an honest player always tells the truth, and an dishonest player always tell lies.\nYou are given two characters a and b as the input. Each of them is either H or D, and carries the following information:\nIf a=H, AtCoDeer is honest; if a=D, AtCoDeer is dishonest.\nIf b=H, AtCoDeer is saying that TopCoDeer is honest; if b=D, AtCoDeer is saying that TopCoDeer is dishonest.\nGiven this information, determine whether TopCoDeer is honest.\n\nConstraints\na=H or a=D.\nb=H or b=D.\n\nInputThe input is given from Standard Input in the following format:\na b\n\nOutputIf TopCoDeer is honest, print H. If he is dishonest, print D.\n\nSample Input 1H H\n\nSample Output 1H\n\nIn this input, AtCoDeer is honest. Hence, as he says, TopCoDeer is honest.\n\nSample Input 2D H\n\nSample Output 2D\n\nIn this input, AtCoDeer is dishonest. Hence, contrary to what he says, TopCoDeer is dishonest.\n\nSample Input 3D D\n\nSample Output 3H",
        "desc": "The problem evaluates a programmer’s ability to implement conditional logic and handle truth-based scenarios using input parsing in C++. It tests understanding of boolean reasoning and conditional statements, and is considered to be of easy to intermediate difficulty.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  char a, b;\n  cin >> a >> b;\n  if ( (a=='H' && b=='H') \n    || (a=='D' && b=='D') )\n  {\n    cout << 'H' << endl;\n  } else {\n    cout << 'D' << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03773",
        "question": "Score : 100 points\n\nProblem StatementDolphin loves programming contests. Today, he will take part in a contest in AtCoder.\nIn this country, 24-hour clock is used. For example, 9:00 p.m. is referred to as \"21 o'clock\".\nThe current time is A o'clock, and a contest will begin in exactly B hours.\nWhen will the contest begin? Answer in 24-hour time.\n\nConstraints\n0 \\leq A,B \\leq 23\nA and B are integers.\n\nInputThe input is given from Standard Input in the following format:\nA B\n\nOutputPrint the hour of the starting time of the contest in 24-hour time.\n\nSample Input 19 12\n\nSample Output 121\n\nIn this input, the current time is 9 o'clock, and 12 hours later it will be 21 o'clock in 24-hour time.\n\nSample Input 219 0\n\nSample Output 219\n\nThe contest has just started.\n\nSample Input 323 2\n\nSample Output 31\n\nThe contest will begin at 1 o'clock the next day.",
        "desc": "This C++ problem requires calculating the future time in a 24-hour format by adding a given number of hours, testing understanding of arithmetic operations and modular arithmetic. It is classified as an easy-level question, suitable for beginners practicing basic time manipulation and input-output handling.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int A, B;\n  cin >> A >> B;\n  if (A + B < 24) {\n    cout << A + B << endl;\n  } else {\n    cout << A + B - 24 << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03759",
        "question": "Score : 100 points\n\nProblem StatementThree poles stand evenly spaced along a line. Their heights are a, b and c meters, from left to right.\nWe will call the arrangement of the poles beautiful if the tops of the poles lie on the same line, that is, b-a = c-b.\nDetermine whether the arrangement of the poles is beautiful.\n\nConstraints\n1 \\leq a,b,c \\leq 100\na, b and c are integers.\n\nInputInput is given from Standard Input in the following format:\na b c\n\nOutputPrint YES if the arrangement of the poles is beautiful; print NO otherwise.\n\nSample Input 12 4 6\n\nSample Output 1YES\n\nSince 4-2 = 6-4, this arrangement of poles is beautiful.\n\nSample Input 22 5 6\n\nSample Output 2NO\n\nSince 5-2 \\neq 6-5, this arrangement of poles is not beautiful.\n\nSample Input 33 2 1\n\nSample Output 3YES\n\nSince 1-2 = 2-3, this arrangement of poles is beautiful.",
        "desc": "This C++ problem evaluates the ability to handle basic arithmetic operations, conditional statements, and input/output processing to determine if three integers form an arithmetic sequence. It is considered an easy-level challenge suitable for beginners practicing fundamental programming concepts.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int a, b, c;\n  cin >> a >> b >> c;\n  if ((b - a) == (c - b)) {\n    cout << \"YES\" << endl;\n  } else {\n    cout << \"NO\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03737",
        "question": "Score : 100 points\n\nProblem StatementYou are given three words s_1, s_2 and s_3, each composed of lowercase English letters, with spaces in between.\nPrint the acronym formed from the uppercased initial letters of the words.\n\nConstraints\ns_1, s_2 and s_3 are composed of lowercase English letters.\n1 ≤ |s_i| ≤ 10 (1≤i≤3)\n\nInputInput is given from Standard Input in the following format:\ns_1 s_2 s_3\n\nOutputPrint the answer.\n\nSample Input 1atcoder beginner contest\n\nSample Output 1ABC\n\nThe initial letters of atcoder, beginner and contest are a, b and c. Uppercase and concatenate them to obtain ABC.\n\nSample Input 2resident register number\n\nSample Output 2RRN\n\nSample Input 3k nearest neighbor\n\nSample Output 3KNN\n\nSample Input 4async layered coding\n\nSample Output 4ALC",
        "desc": "This problem evaluates fundamental string manipulation and character handling skills in C++, including extracting characters and converting their case. It is classified as an easy difficulty level.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  string s1, s2, s3;\n  cin >> s1 >> s2 >> s3;\n  cout << (char)(s1[0] - 0x20) << (char)(s2[0] - 0x20) << (char)(s3[0] - 0x20) << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03729",
        "question": "Score : 100 points\n\nProblem StatementYou are given three strings A, B and C. Check whether they form a word chain.\nMore formally, determine whether both of the following are true:\n\nThe last character in A and the initial character in B are the same.\nThe last character in B and the initial character in C are the same.\n\nIf both are true, print YES. Otherwise, print NO.\n\nConstraints\nA, B and C are all composed of lowercase English letters (a - z).\n1 ≤ |A|, |B|, |C| ≤ 10, where |A|, |B| and |C| are the lengths of A, B and C, respectively.\n\nInputInput is given from Standard Input in the following format:\nA B C\n\nOutputPrint YES or NO.\n\nSample Input 1rng gorilla apple\n\nSample Output 1YES\n\nThey form a word chain.\n\nSample Input 2yakiniku unagi sushi\n\nSample Output 2NO\n\nA and B form a word chain, but B and C do not.\n\nSample Input 3a a a\n\nSample Output 3YES\n\nSample Input 4aaaaaaaaab aaaaaaaaaa aaaaaaaaab\n\nSample Output 4NO",
        "desc": "The problem requires manipulating and accessing specific characters within strings to verify a sequential relationship, testing knowledge of string indexing and conditional statements in C++. It is categorized as an **Easy** level challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  string A, B, C;\n  cin >> A >> B >> C;\n  if ( A.at(A.size() - 1) == B.at(0)\n    && B.at(B.size() - 1) == C.at(0) )\n  {\n    cout << \"YES\" << endl;\n  }\n  else\n  {\n    cout << \"NO\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03719",
        "question": "Score : 100 points\n\nProblem StatementYou are given three integers A, B and C.\nDetermine whether C is not less than A and not greater than B.\n\nConstraints\n-100≤A,B,C≤100 \nA, B and C are all integers.\n\nInputInput is given from Standard Input in the following format:  \nA B C\n\nOutputIf the condition is satisfied, print Yes; otherwise, print No.\n\nSample Input 11 3 2\n\nSample Output 1Yes\n\nC=2 is not less than A=1 and not greater than B=3, and thus the output should be Yes.\n\nSample Input 26 5 4\n\nSample Output 2No\n\nC=4 is less than A=6, and thus the output should be No.\n\nSample Input 32 2 2\n\nSample Output 3Yes",
        "desc": "This problem assesses fundamental C++ skills, including reading input, using comparison operators, and implementing conditional statements to determine if a value lies within a specified range. It is classified as an easy-level programming challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int A, B, C;\n  cin >> A >> B >> C;\n  if (A<=C && C<=B) {\n    cout << \"Yes\" << endl;\n  } else {\n    cout << \"No\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03711",
        "question": "Score : 100 points\n\nProblem StatementBased on some criterion, Snuke divided the integers from 1 through 12 into three groups as shown in the figure below.\nGiven two integers x and y (1 ≤ x &lt; y ≤ 12), determine whether they belong to the same group.\n\nConstraints\nx and y are integers.\n1 ≤ x &lt; y ≤ 12\n\nInputInput is given from Standard Input in the following format:\nx y\n\nOutputIf x and y belong to the same group, print Yes; otherwise, print No.\n\nSample Input 11 3\n\nSample Output 1Yes\n\nSample Input 22 4\n\nSample Output 2No",
        "desc": "This C++ problem assesses the ability to implement conditional logic and group classification, requiring the programmer to determine group membership for given integers based on predefined criteria. It is considered to be of easy difficulty, suitable for testing fundamental programming and decision-making skills.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int x, y;\n  cin >> x >> y;\n  int group[] = {0, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1};\n  if (group[x] == group[y]) {\n    cout << \"Yes\" << endl;\n  } else {\n    cout << \"No\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03697",
        "question": "Score : 100 points\n\nProblem StatementYou are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.\n\nConstraints\nA and B are integers.\n1 ≤ A, B ≤ 9\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputIf A + B is 10 or greater, print the string error (case-sensitive); otherwise, print the value of A + B.\n\nSample Input 16 3\n\nSample Output 19\n\nSample Input 26 4\n\nSample Output 2error",
        "desc": "This C++ problem evaluates fundamental programming skills such as reading input, performing arithmetic operations, and using conditional statements to handle specific output cases. It is considered an easy-level question, suitable for beginners practicing basic syntax and control flow.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int A, B;\n  cin >> A >> B;\n  if (10 <= A + B) {\n    cout << \"error\" << endl;\n  } else {\n    cout << A + B << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03693",
        "question": "Score : 100 points\n\nProblem StatementAtCoDeer has three cards, one red, one green and one blue.\nAn integer between 1 and 9 (inclusive) is written on each card: r on the red card, g on the green card and b on the blue card.\nWe will arrange the cards in the order red, green and blue from left to right, and read them as a three-digit integer.\nIs this integer a multiple of 4?  \n\nConstraints\n1 ≤ r, g, b ≤ 9\n\nInputInput is given from Standard Input in the following format:\nr g b\n\nOutputIf the three-digit integer is a multiple of 4, print YES (case-sensitive); otherwise, print NO.\n\nSample Input 14 3 2\n\nSample Output 1YES\n\n432 is a multiple of 4, and thus YES should be printed.\n\nSample Input 22 3 4\n\nSample Output 2NO\n\n234 is not a multiple of 4, and thus NO should be printed.",
        "desc": "This C++ problem involves creating a three-digit number from three single-digit inputs and determining whether it is divisible by 4, thereby testing skills in input handling, numerical manipulation, and implementing conditional logic. It is generally considered an **easy** difficulty level challenge.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int r, g, b;\n  cin >> r >> g >> b;\n  if ((r * 100 + g * 10 + b) % 4) {\n    cout << \"NO\" << endl;\n  } else {\n    cout << \"YES\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03679",
        "question": "Score : 100 points\n\nProblem StatementTakahashi has a strong stomach. He never gets a stomachache from eating something whose \"best-by\" date is at most X days earlier.\nHe gets a stomachache if the \"best-by\" date of the food is X+1 or more days earlier, though.\nOther than that, he finds the food delicious if he eats it not later than the \"best-by\" date. Otherwise, he does not find it delicious.\nTakahashi bought some food A days before the \"best-by\" date, and ate it B days after he bought it.\nWrite a program that outputs delicious if he found it delicious, safe if he did not found it delicious but did not get a stomachache either, and dangerous if he got a stomachache.\n\nConstraints\n1 ≤ X,A,B ≤ 10^9\n\nInputInput is given from Standard Input in the following format:\nX A B\n\nOutputPrint delicious if Takahashi found the food delicious; print safe if he neither found it delicious nor got a stomachache; print dangerous if he got a stomachache.\n\nSample Input 14 3 6\n\nSample Output 1safe\n\nHe ate the food three days after the \"best-by\" date. It was not delicious or harmful for him.\n\nSample Input 26 5 1\n\nSample Output 2delicious\n\nHe ate the food by the \"best-by\" date. It was delicious for him.\n\nSample Input 33 7 12\n\nSample Output 3dangerous\n\nHe ate the food five days after the \"best-by\" date. It was harmful for him.",
        "desc": "This C++ problem assesses understanding of conditional statements and arithmetic operations by requiring determination of a food item's status based on comparison of dates and thresholds. It is categorized as an easy-level problem suitable for beginners.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int X, A, B;\n  cin >> X >> A >> B;\n  if (X < B - A) {\n    cout << \"dangerous\" << endl;\n  } else if (0 >= B - A) {\n    cout << \"delicious\" << endl;\n  } else {\n    cout << \"safe\" << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03671",
        "question": "Score : 100 points\n\nProblem StatementSnuke is buying a bicycle.\nThe bicycle of his choice does not come with a bell, so he has to buy one separately.\nHe has very high awareness of safety, and decides to buy two bells, one for each hand.\nThe store sells three kinds of bells for the price of a, b and c yen (the currency of Japan), respectively.\nFind the minimum total price of two different bells.\n\nConstraints\n1 \\leq a,b,c \\leq 10000\na, b and c are integers.\n\nInputInput is given from Standard Input in the following format:\na b c\n\nOutputPrint the minimum total price of two different bells.\n\nSample Input 1700 600 780\n\nSample Output 11300\n\nBuying a 700-yen bell and a 600-yen bell costs 1300 yen.\nBuying a 700-yen bell and a 780-yen bell costs 1480 yen.\nBuying a 600-yen bell and a 780-yen bell costs 1380 yen.\n\nThe minimum among these is 1300 yen.\n\nSample Input 210000 10000 10000\n\nSample Output 220000\n\nBuying any two bells costs 20000 yen.",
        "desc": "This C++ problem asks for the minimal total cost of purchasing two different bicycle bells from three given prices, requiring the programmer to handle input, compare combinations, and determine the minimum sum. It tests foundational programming skills such as input/output operations and basic algorithmic thinking, and is considered to be of easy difficulty.",
        "program": "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n  int a, b, c, total;\n  cin >> a >> b >> c;\n  total = a + b;\n  if (total >= b + c) {\n    total = b + c;\n  } else if (total >= a + c) {\n    total = a + c;\n  }\n  cout << total << endl;\n}",
        "error_desc": "1. The initial assignment of `total` to `a + b` may not be the minimum possible sum.\n2. The first `if` condition incorrectly compares `total >= b + c` instead of finding the smallest sum.\n3. The `else if` condition uses `total >= a + c`, which can prevent updating `total` to the actual minimum sum.\n4. The program does not consider all possible pairs when determining the minimum total price."
    }
]