[
    {
        "problem_id": "p03455",
        "question": "Score : 100 points\n\nProblem StatementAtCoDeer the deer found two positive integers, a and b.\nDetermine whether the product of a and b is even or odd.\n\nConstraints\n1 ≤ a,b ≤ 10000\na and b are integers.\n\nInputInput is given from Standard Input in the following format:\na b\n\nOutputIf the product is odd, print Odd; if it is even, print Even.\n\nSample Input 13 4\n\nSample Output 1Even\n\nAs 3 × 4 = 12 is even, print Even.\n\nSample Input 21 21\n\nSample Output 2Odd\n\nAs 1 × 21 = 21 is odd, print Odd.",
        "desc": "This Java problem assesses understanding of arithmetic operations and the use of conditional statements or modulus operator to determine the parity of a product. It is categorized as an easy-level question, suitable for beginners learning basic programming concepts.",
        "program": "import java.util.*;\nclass ABC086A\n{\n\t\tpublic static void main(String[] args) \n\t\t{\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tint c = a*b;\n\t\t\tif(c%2==0){\n\t\t\t\tSystem.out.println(\"Even\");\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"Odd\");\n\t\t\t}\n\t\t}\n}",
        "error_desc": "1. The class name is `ABC086A` instead of the required `Main`."
    },
    {
        "problem_id": "p03493",
        "question": "Score : 100 points\n\nProblem StatementSnuke has a grid consisting of three squares numbered 1, 2 and 3.\nIn each square, either 0 or 1 is written. The number written in Square i is s_i.\nSnuke will place a marble on each square that says 1.\nFind the number of squares on which Snuke will place a marble.\n\nConstraints\nEach of s_1, s_2 and s_3 is either 1 or 0.\n\nInputInput is given from Standard Input in the following format:\ns_{1}s_{2}s_{3}\n\nOutputPrint the answer.\n\nSample Input 1101\n\nSample Output 12\n\nA marble will be placed on Square 1 and 3.\n\nSample Input 2000\n\nSample Output 20\n\nNo marble will be placed on any square.",
        "desc": "This problem involves reading a three-digit binary input and counting the number of digits that are `1`, testing concepts like input handling, string manipulation, and conditional counting in Java. It is considered an easy-level programming challenge.",
        "program": "import java.util.*;\nclass Main\n{\n\t\tpublic static void main(String[] args) \n\t\t{\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint a = sc.nextInt();\n\t\t\tif( a==000 ){\n\t\t\t\tSystem.out.println(0);\n\t\t\t}else if(a==111){\n\t\t\t\tSystem.out.println(3);\n\t\t\t}else if( (a==110) || (a==011) || (a==101) ){\n\t\t\t\tSystem.out.println(2);\n\t\t\t}else{\n\t\t\t\tSystem.out.println(1);\n\t\t\t}\n\t\t}\n}",
        "error_desc": "1. The student uses octal literals such as `000`, `011`, and `101`, which leads to incorrect numerical comparisons.\n2. The program does not handle input lengths beyond three digits, as shown by the sample input `1101`.\n3. The conditional logic incorrectly checks for specific integer values instead of counting the number of `1`s in the input.\n4. The output does not match the required two-digit format, resulting in outputs like `3` instead of `03`.\n5. The program does not correctly interpret inputs containing digits other than `0` or `1`, such as `2000`."
    },
    {
        "problem_id": "p03494",
        "question": "Score : 200 points\n\nProblem StatementThere are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.\n\nConstraints\n1 \\leq N \\leq 200\n1 \\leq A_i \\leq 10^9\n\nInputInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\nOutputPrint the maximum possible number of operations that Snuke can perform.\n\nSample Input 13\n8 12 40\n\nSample Output 12\n\nInitially, [8, 12, 40] are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.\nAfter the operation is performed once, [4, 6, 20] are written on the blackboard.\nSince all those integers are again even, he can perform the operation.\nAfter the operation is performed twice, [2, 3, 10] are written on the blackboard.\nNow, there is an odd number 3 on the blackboard, so he cannot perform the operation any more.\nThus, Snuke can perform the operation at most twice.\n\nSample Input 24\n5 6 8 10\n\nSample Output 20\n\nSince there is an odd number 5 on the blackboard already in the beginning, Snuke cannot perform the operation at all.\n\nSample Input 36\n382253568 723152896 37802240 379425024 404894720 471526144\n\nSample Output 38",
        "desc": "The problem assesses understanding of bit manipulation and number theory by requiring the calculation of the maximum number of times all given integers can be evenly divided by two. It is classified as a **Medium** difficulty level question.",
        "program": "import java.util.*;\nclass Main\n{\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] param1 = new int[n];\n\t\t\tfor(int i=0 ; i<n ; i++){\n\t\t\t\tparam1[i] = sc.nextInt();\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\twhile(true){\n\t\t\tint sum = 0;\n\t\t\tfor(int i=0 ; i<n ; i++){\n\t\t\tif(param1[i]%2==0){\n\t\t\t\tsum++;\n\t\t\t}else{\n\t\t\t\tSystem.out.println(res);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t}\n\t\t\tif(sum==n){\n\t\t\t\tfor(int i=0 ; i<n ; i++){\n\t\t\t\t\tparam1[i]/=2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres++;\n\t\t\t}\n\t\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03448",
        "question": "Score : 200 points\n\nProblem StatementYou have A 500-yen coins, B 100-yen coins and C 50-yen coins (yen is the currency of Japan).\nIn how many ways can we select some of these coins so that they are X yen in total?\nCoins of the same kind cannot be distinguished. Two ways to select coins are distinguished when, for some kind of coin, the numbers of that coin are different.\n\nConstraints\n0 \\leq A, B, C \\leq 50\nA + B + C \\geq 1\n50 \\leq X \\leq 20 000\nA, B and C are integers.\nX is a multiple of 50.\n\nInputInput is given from Standard Input in the following format:\nA\nB\nC\nX\n\nOutputPrint the number of ways to select coins.\n\nSample Input 12\n2\n2\n100\n\nSample Output 12\n\nThere are two ways to satisfy the condition:\n\nSelect zero 500-yen coins, one 100-yen coin and zero 50-yen coins.\nSelect zero 500-yen coins, zero 100-yen coins and two 50-yen coins.\n\nSample Input 25\n1\n0\n150\n\nSample Output 20\n\nNote that the total must be exactly X yen.\n\nSample Input 330\n40\n50\n6000\n\nSample Output 3213",
        "desc": "This Java problem requires calculating the number of distinct combinations of 500, 100, and 50-yen coins that sum to a specified total, given limited quantities of each coin type. It tests understanding of combinatorial enumeration or dynamic programming with constraints and is classified as a medium-difficulty problem.",
        "program": "import java.util.*;\nclass Main\n{\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\tint x = sc.nextInt();\n\t\t\tint res = 0;\n\t\t\tfor(int i=0 ; i<=a ; i++){\n\t\t\t\tfor(int j=0 ; j<=b ; j++){\n\t\t\t\t\tfor(int k=0 ; k<=c ; k++){\n\t\t\t\t\t\tint total = 500*i + 100*j + 50*k;\n\t\t\t\t\t\tif( total==x ){\n\t\t\t\t\t\t\tres++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(res);\n\t\t\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03478",
        "question": "Score : 200 points\n\nProblem StatementFind the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\nConstraints\n1 \\leq N \\leq 10^4\n1 \\leq A \\leq B \\leq 36\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN A B\n\nOutputPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\nSample Input 120 2 5\n\nSample Output 184\n\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n\nSample Input 210 1 2\n\nSample Output 213\n\nSample Input 3100 4 16\n\nSample Output 34554",
        "desc": "This problem assesses the ability to iterate through a range of numbers and calculate the sum of their digits in base 10, applying conditional filters based on specified thresholds. It tests fundamental concepts in loops, digit manipulation, and conditional logic in Java, and is considered to be of medium difficulty.",
        "program": "import java.util.*;\nclass Main\n{\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint n = sc.nextInt();\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tint sum = 0;\n\t\t\tfor(int i=1 ; i<=n ; i++){\n\t\t\t\tint num = 0;\n\t\t\t\tif(i<10){\n\t\t\t\t\tnum = i;\n\t\t\t\t}else if(10<=i&&i<100){\n\t\t\t\t\tnum+=(i%10)+((i/10)%10);\n\t\t\t\t}else if(100<=i&&i<1000){\n\t\t\t\t\tnum+=(i%10)+((i/10)%10)+(((i/100)%10));\n\t\t\t\t}\n\t\t\t\tif ( (a<=num) && (num<=b) ){\n\t\t\t\t\tsum += i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}\n}",
        "error_desc": "1. The program does not calculate the sum of digits for numbers with four or more digits, leading to incorrect results for values of N ≥ 1000.\n2. The digit sum calculation is limited to three-digit numbers and fails to account for five-digit numbers when N is 10000."
    },
    {
        "problem_id": "p03644",
        "question": "Score : 200 points\n\nProblem StatementTakahashi loves numbers divisible by 2.\nYou are given a positive integer N. Among the integers between 1 and N (inclusive), find the one that can be divisible by 2 for the most number of times. The solution is always unique.\nHere, the number of times an integer can be divisible by 2, is how many times the integer can be divided by 2 without remainder.\nFor example,\n\n6 can be divided by 2 once: 6 -&gt; 3.\n8 can be divided by 2 three times: 8 -&gt; 4 -&gt; 2 -&gt; 1.\n3 can be divided by 2 zero times.\n\nConstraints\n1 ≤ N ≤ 100\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the answer.\n\nSample Input 17\n\nSample Output 14\n\n4 can be divided by 2 twice, which is the most number of times among 1, 2, ..., 7.\n\nSample Input 232\n\nSample Output 232\n\nSample Input 31\n\nSample Output 31\n\nSample Input 4100\n\nSample Output 464",
        "desc": "The problem asks for the integer between 1 and N that can be repeatedly divided by 2 the most times without a remainder, effectively finding the number with the highest power of 2 in its factorization. It tests understanding of loops, factorization, and bit manipulation concepts in Java and is considered to have an easy to medium difficulty level.",
        "program": "import java.utli.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n      if(n<=2){\n        System.out.println(2);\n      }else if(2<n&&n<=4){\n        System.out.println(4);\n      }else if(2<n&&n<=8){\n        System.out.println(8);\n      }else if(2<n&&n<=16){\n        System.out.println(16);\n      }else if(2<n&&n<=32){\n        System.out.println(32);\n      }else{\n        System.out.println(64);\n      }\n  }\n}",
        "error_desc": "1. The import statement misspells `java.util` as `java.utli`.\n2. Due to the incorrect import, the `Scanner` class is not recognized."
    },
    {
        "problem_id": "p03285",
        "question": "Score : 200 points\n\nProblem StatementLa Confiserie d'ABC sells cakes at 4 dollars each and doughnuts at 7 dollars each.\nDetermine if there is a way to buy some of them for exactly N dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.\n\nConstraints\nN is an integer between 1 and 100, inclusive.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputIf there is a way to buy some cakes and some doughnuts for exactly N dollars, print Yes; otherwise, print No.\n\nSample Input 111\n\nSample Output 1Yes\n\nIf you buy one cake and one doughnut, the total will be 4 + 7 = 11 dollars.\n\nSample Input 240\n\nSample Output 2Yes\n\nIf you buy ten cakes, the total will be 4 \\times 10 = 40 dollars.\n\nSample Input 33\n\nSample Output 3No\n\nThe prices of cakes (4 dollars) and doughnuts (7 dollars) are both higher than 3 dollars, so there is no such way.",
        "desc": "This Java problem assesses the ability to implement loops or mathematical logic to determine if a target amount can be achieved using specific item prices, involving concepts like linear combinations and conditional checks. It is considered to have an easy to medium difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int cake = 4;\n    int donatu = 7;\n    while(true){\n      for(int i=0 ; ; i++){\n        int total = cake*i; \n        if(total==n){\n          System.out.println(\"Yes\");\n          return;\n        }\n        if(total>n){\n          System.out.println(\"No\");\n        }\n        for(int j=0 ; ; j++){\n          total +=  donatu*j;\n          if(total==n){\n          System.out.println(\"Yes\");\n          return;\n        }\n        if(total>n){\n          System.out.println(\"No\");\n        }\n        }\n      }\n    }\n  }\n}",
        "error_desc": "1. The outer `while(true)` loop creates an infinite loop without any termination condition, causing the program to run indefinitely.\n2. Both `for` loops inside the `while` loop lack exit conditions, resulting in endless iterations.\n3. The inner loop updates `total` by adding `donatu*j` without resetting `total`, leading to incorrect calculations.\n4. The program does not efficiently explore all possible combinations of cakes and doughnuts, leading to a Time Limit Exceeded error."
    },
    {
        "problem_id": "p03434",
        "question": "Score: 200 points\n\nProblem Statement\nWe have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.\n\nConstraints\n\nN is an integer between 1 and 100 (inclusive).\na_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:  \nN\na_1 a_2 a_3 ... a_N\n\nOutput\nPrint Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n\nSample Input 12\n3 1\n\nSample Output 12\n\nFirst, Alice will take the card with 3. Then, Bob will take the card with 1.\nThe difference of their scores will be 3 - 1 = 2.\n\nSample Input 23\n2 7 4\n\nSample Output 25\n\nFirst, Alice will take the card with 7. Then, Bob will take the card with 4. Lastly, Alice will take the card with 2. The difference of their scores will be 7 - 4 + 2 = 5. The difference of their scores will be 3 - 1 = 2.\n\nSample Input 34\n20 18 2 18\n\nSample Output 318",
        "desc": "This Java problem assesses the ability to implement dynamic programming or game theory strategies to determine the optimal score difference between two players alternately selecting cards. It tests concepts such as optimal strategy computation and state management, and is considered to be of medium to high difficulty.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int[] param = new int[n];\n    for(int i=0 ; i<n ; i++){\n      param[i] = sc.nextInt();\n    }\n    Arrays.sort(param);\n    int alice = 0;\n    int bob = 0;\n    if(n%2==0){\n      for(int i=0 ; i<n ; i++){\n        if(i%2==0){\n          bob += param[i];\n        }else{\n          alice += param[i];\n        }\n      }\n    }else{\n      for(int i=0 ; i<n ; i++){\n        if(i%2==0){\n          alice += param[i];\n        }else{\n          bob += param[i];\n        }\n      }\n    }\n    int total = alice - bob;\n    System.out.println(total);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03470",
        "question": "Score : 200 points\n\nProblem StatementAn X-layered kagami mochi (X ≥ 1) is a pile of X round mochi (rice cake) stacked vertically where each mochi (except the bottom one) has a smaller diameter than that of the mochi directly below it. For example, if you stack three mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, you have a 3-layered kagami mochi; if you put just one mochi, you have a 1-layered kagami mochi.\nLunlun the dachshund has N round mochi, and the diameter of the i-th mochi is d_i centimeters. When we make a kagami mochi using some or all of them, at most how many layers can our kagami mochi have?\n\nConstraints\n1 ≤ N ≤ 100\n1 ≤ d_i ≤ 100\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nd_1\n:\nd_N\n\nOutputPrint the maximum number of layers in a kagami mochi that can be made.\n\nSample Input 14\n10\n8\n8\n6\n\nSample Output 13\n\nIf we stack the mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, we have a 3-layered kagami mochi, which is the maximum number of layers.\n\nSample Input 23\n15\n15\n15\n\nSample Output 21\n\nWhen all the mochi have the same diameter, we can only have a 1-layered kagami mochi.\n\nSample Input 37\n50\n30\n50\n100\n50\n80\n30\n\nSample Output 34",
        "desc": "This Java problem requires determining the maximum number of layers in a kagami mochi by selecting and ordering mochi with strictly decreasing diameters, effectively testing understanding of dynamic programming and longest decreasing subsequence algorithms. It is classified as a medium-difficulty question suitable for intermediate programmers.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int[] param = new int[n];\n    for(int i=0 ; i<n ; i++){\n      param[i] = sc.nextInt();\n    }\n    Arrays.sort(param);\n    int count = 1;\n    for(int i=1 ; i<n ; i++){\n      if(param[i]>param[i-1]){\n        count++;\n      }\n    }\n    System.out.println(count);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03471",
        "question": "Score : 300 points\n\nProblem StatementThe commonly used bills in Japan are 10000-yen, 5000-yen and 1000-yen bills. Below, the word \"bill\" refers to only these.\nAccording to Aohashi, he received an otoshidama (New Year money gift) envelope from his grandfather that contained N bills for a total of Y yen, but he may be lying. Determine whether such a situation is possible, and if it is, find a possible set of bills contained in the envelope. Assume that his grandfather is rich enough, and the envelope was large enough.\n\nConstraints\n1 ≤ N ≤ 2000\n1000 ≤ Y ≤ 2 × 10^7\nN is an integer.\nY is a multiple of 1000.\n\nInputInput is given from Standard Input in the following format:\nN Y\n\nOutputIf the total value of N bills cannot be Y yen, print -1 -1 -1.\nIf the total value of N bills can be Y yen, let one such set of bills be \"x 10000-yen bills, y 5000-yen bills and z 1000-yen bills\", and print x, y, z with spaces in between. If there are multiple possibilities, any of them may be printed.\n\nSample Input 19 45000\n\nSample Output 14 0 5\n\nIf the envelope contained 4 10000-yen bills and 5 1000-yen bills, he had 9 bills and 45000 yen in total. It is also possible that the envelope contained 9 5000-yen bills, so the output 0 9 0 is also correct.\n\nSample Input 220 196000\n\nSample Output 2-1 -1 -1\n\nWhen the envelope contained 20 bills in total, the total value would be 200000 yen if all the bills were 10000-yen bills, and would be at most 195000 yen otherwise, so it would never be 196000 yen.\n\nSample Input 31000 1234000\n\nSample Output 314 27 959\n\nThere are also many other possibilities.\n\nSample Input 42000 20000000\n\nSample Output 42000 0 0",
        "desc": "This Java problem tests understanding of combinatorial logic and efficient algorithm implementation to solve integer linear equations involving specific bill denominations. It is classified as a medium to hard difficulty level due to the need for optimized searching within given constraints.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int y = sc.nextInt();\n    for(int i=0 ; i<2000 ; i++){\n      for(int j=0 ; j<4000 ; j++){\n        for(int k=0 ; k<20000 ; k++){\n          int total = 10000*i + 5000*j + 1000*k;\n          if(y==total){\n            System.out.print(i+\" \"+j+\" \"+k);\n            return;\n          }\n        }\n      }\n    }\n  }\n}",
        "error_desc": "1. The code does not verify that the total number of bills `i + j + k` equals `N`.\n2. The loop limits for `i`, `j`, and `k` exceed the maximum possible values based on `N`, leading to unnecessary iterations.\n3. The program fails to output `-1 -1 -1` when no valid combination of bills is found.\n4. There is no constraint to ensure that the total number of bills does not exceed `N`.\n5. The program does not handle cases where multiple valid solutions exist, though it allows any one to be printed."
    },
    {
        "problem_id": "p03854",
        "question": "Score : 300 points\n\nProblem StatementYou are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.\n\nConstraints\n1≦|S|≦10^5\nS consists of lowercase English letters.\n\nInputThe input is given from Standard Input in the following format:\nS\n\nOutputIf it is possible to obtain S = T, print YES. Otherwise, print NO.\n\nSample Input 1erasedream\n\nSample Output 1YES\n\nAppend erase and dream at the end of T in this order, to obtain S = T.\n\nSample Input 2dreameraser\n\nSample Output 2YES\n\nAppend dream and eraser at the end of T in this order, to obtain S = T.\n\nSample Input 3dreamerer\n\nSample Output 3NO",
        "desc": "This Java problem assesses understanding of string manipulation and dynamic programming by requiring the determination of whether a given string can be constructed by sequentially appending specific substrings (\"dream\", \"dreamer\", \"erase\", \"eraser\"). It is categorized as a challenging problem (300 points) due to the need for efficient handling of large input sizes and careful pattern matching.",
        "program": "import java.io.*;\nclass Main\n{\n  public static void main(String[] args) throws Exception\n  {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    StringBuilder buf = new StringBuilder();\n    String s = br.readLine();\n    String[] param = {\"\",\"dream\",\"dreamer\",\"erase\",\"eraser\"};\n    for(int i=1 ; i<5 ; i++){\n        for(int j=0 ; j<5 ; j++){\n          buf.setLength(0);\n          buf.append(param[ i ]);\n          buf.append(param[ j ]);\n          String t = buf.toString();\n          if(s.equals(t)){\n            System.out.println(\"YES\");\n            return;\n          }\n        }\n    }\n    System.out.println(\"NO\");\n  }\n}",
        "error_desc": "1. The inner loop starts with `j=0`, which corresponds to an empty string, causing unnecessary and incorrect concatenations.\n2. The code only attempts to concatenate two strings from `param`, ignoring the possibility of needing multiple append operations to form longer strings.\n3. There is no mechanism to iteratively build up the string `T` to match `S`, making it impossible to handle strings longer than the concatenation of two operations.\n4. The program does not account for overlapping substrings like \"dream\" and \"dreamer\", which are essential for correctly forming `S`."
    },
    {
        "problem_id": "p03469",
        "question": "Score : 100 points\n\nProblem StatementOn some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy/mm/dd format. For example, January 23, 2018 should be written as 2018/01/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.\n\nConstraints\nS is a string of length 10.\nThe first eight characters in S are 2017/01/.\nThe last two characters in S are digits and represent an integer between 1 and 31 (inclusive).\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputReplace the first four characters in S with 2018 and print it.\n\nSample Input 12017/01/07\n\nSample Output 12018/01/07\n\nSample Input 22017/01/31\n\nSample Output 22018/01/31",
        "desc": "This Java problem assesses basic string manipulation skills, specifically the ability to modify substrings using indexing and replacement techniques. It is considered an easy-level question, suitable for beginners to practice fundamental string handling concepts.",
        "program": "import java.io.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    String input = br.readLine();\n    String[] param = input.split(\"/\");\n    int n1 = Integer.parseInt(param[0]);\n    int n2 = Integer.parseInt(param[1]);\n    int n3 = Integer.parseInt(param[2]);\n    System.out.println(\"2018/01/\"+n3);\n  }\n}",
        "error_desc": "1. The `main` method does not declare `throws IOException`, causing an unhandled exception from `readLine()`.\n2. The program incorrectly splits the input string on `/`, which separates the prefix from the year unintentionally.\n3. The output statement omits the original prefix character, leading to an incorrect date format."
    },
    {
        "problem_id": "p03308",
        "question": "Score : 200 points\n\nProblem StatementYou are given an integer sequence A of length N.\nFind the maximum absolute difference of two elements (with different indices) in A.\n\nConstraints\n2 \\leq N \\leq 100\n1 \\leq A_i \\leq 10^9\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\nOutputPrint the maximum absolute difference of two elements (with different indices) in A.\n\nSample Input 14\n1 4 6 3\n\nSample Output 15\n\nThe maximum absolute difference of two elements is A_3-A_1=6-1=5.\n\nSample Input 22\n1000000000 1\n\nSample Output 2999999999\n\nSample Input 35\n1 1 1 1 1\n\nSample Output 30",
        "desc": "This problem requires iterating through an integer array to identify the maximum absolute difference between any two distinct elements, testing concepts such as array manipulation and efficient comparison techniques. It is classified as an intermediate-level Java programming challenge.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int[] param = new int[n];\n    for(int i=0 ; i<n ; i++){\n      param[i] = sc.nextInt();\n    }\n    int max = 0;\n    int min = 10*9;\n    for(int i=0 ; i<n ; i++){\n      if(param[i]>max){\n        max = param[i];\n      }\n    }\n    for(int i=0 ; i<n ; i++){\n      if(param[i]<min){\n        min = param[i];\n      }\n    }\n    int abs = max-min;\n    System.out.println(abs);\n  }\n}",
        "error_desc": "1. The variable `min` is incorrectly initialized as `10*9`, which equals `90` instead of `1000000000`.\n2. The variables `max`, `min`, and `abs` are declared as `int` but should be `long` to handle larger values.\n3. Using `int` for `abs` can cause integer overflow when the maximum difference exceeds the `int` limit."
    },
    {
        "problem_id": "p02711",
        "question": "Score : 100 points\n\nProblem StatementGiven is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.\n\nConstraints\n100 \\leq N \\leq 999\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputIf N contains the digit 7, print Yes; otherwise, print No.\n\nSample Input 1117\n\nSample Output 1Yes\n\n117 contains 7 as its last digit.\n\nSample Input 2123\n\nSample Output 2No\n\n123 does not contain the digit 7.\n\nSample Input 3777\n\nSample Output 3Yes",
        "desc": "This Java problem assesses the ability to manipulate and analyze individual digits of an integer using control structures. It is classified as an easy-level question, focusing on basic conditional statements and number handling.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    String n = sc.next();\n    String n1 = n.substring(0,1);\n    String n2 = n.substring(1,2);\n    String n3 = n.substring(2,3);\n    if( (n1.equals(\"7\")) ||(n2.equals(\"7\"))||(n3.equals(\"7\"))){\n      System.out.println(\"Yes\");\n      return;\n    }else{\n      System.out.println(\"No\");\n    }\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02712",
        "question": "Score : 200 points\n\nProblem StatementLet us define the FizzBuzz sequence a_1,a_2,... as follows:\n\nIf both 3 and 5 divides i, a_i=\\mbox{FizzBuzz}.\nIf the above does not hold but 3 divides i, a_i=\\mbox{Fizz}.\nIf none of the above holds but 5 divides i, a_i=\\mbox{Buzz}.\nIf none of the above holds, a_i=i.\n\nFind the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\nConstraints\n1 \\leq N \\leq 10^6\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\nSample Input 115\n\nSample Output 160\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\nSample Input 21000000\n\nSample Output 2266666333332\n\nWatch out for overflow.",
        "desc": "This Java problem evaluates the ability to implement control structures and conditional logic by requiring the creation of a FizzBuzz sequence and summing specific numerical terms within it. It tests understanding of loops, conditionals, and handling large integers, and is classified as intermediate in difficulty.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int sum = 0;\n    for(int i=0 ; i<=n ; i++){\n      if(i%15!=0) {\n      \tif(i%5!=0){\n      \t\tif(i%3!=0){\n      \tsum+=i;\n      \t}\n      \t}\n      }\n    }\n    System.out.println(sum);\n  }\n}",
        "error_desc": "1. The loop starts at `i=0` instead of `i=1`, incorrectly including 0 in the sum.\n2. The loop condition uses `i <= n`, causing it to process one term beyond the first N terms.\n3. The `sum` variable is declared as `int`, which can lead to overflow for large values of N."
    },
    {
        "problem_id": "p03814",
        "question": "Score : 200 points\n\nProblem StatementSnuke has decided to construct a string that starts with A and ends with Z, by taking out a substring of a string s (that is, a consecutive part of s).\nFind the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with A and ends with Z.\n\nConstraints\n1 ≦ |s| ≦ 200{,}000\ns consists of uppercase English letters.\nThere exists a substring of s that starts with A and ends with Z.\n\nInputThe input is given from Standard Input in the following format:\ns\n\nOutputPrint the answer.\n\nSample Input 1QWERTYASDFZXCV\n\nSample Output 15\n\nBy taking out the seventh through eleventh characters, it is possible to construct ASDFZ, which starts with A and ends with Z.\n\nSample Input 2ZABCZ\n\nSample Output 24\n\nSample Input 3HASFJGHOGAKZZFEGA\n\nSample Output 312",
        "desc": "This Java problem asks for the longest possible substring within a given string `s` that starts with the character 'A' and ends with 'Z'. It tests understanding of efficient string manipulation and traversal algorithms, particularly handling large input sizes up to 200,000 characters, and is classified as a medium to hard difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    String s = sc.next();\n    int a = s.indexOf(\"A\");\n    int z = s.lastIndexOf(\"Z\");\n    System.out.println(z-a+1);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03370",
        "question": "Score : 200 points\n\nProblem StatementAkaki, a patissier, can make N kinds of doughnut using only a certain powder called \"Okashi no Moto\" (literally \"material of pastry\", simply called Moto below) as ingredient. These doughnuts are called Doughnut 1, Doughnut 2, ..., Doughnut N. In order to make one Doughnut i (1 ≤ i ≤ N), she needs to consume m_i grams of Moto. She cannot make a non-integer number of doughnuts, such as 0.5 doughnuts.\nNow, she has X grams of Moto. She decides to make as many doughnuts as possible for a party tonight. However, since the tastes of the guests differ, she will obey the following condition:\n\nFor each of the N kinds of doughnuts, make at least one doughnut of that kind.\n\nAt most how many doughnuts can be made here? She does not necessarily need to consume all of her Moto. Also, under the constraints of this problem, it is always possible to obey the condition.\n\nConstraints\n2 ≤ N ≤ 100\n1 ≤ m_i ≤ 1000\nm_1 + m_2 + ... + m_N ≤ X ≤ 10^5\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN X\nm_1\nm_2\n:\nm_N\n\nOutputPrint the maximum number of doughnuts that can be made under the condition.\n\nSample Input 13 1000\n120\n100\n140\n\nSample Output 19\n\nShe has 1000 grams of Moto and can make three kinds of doughnuts. If she makes one doughnut for each of the three kinds, she consumes 120 + 100 + 140 = 360 grams of Moto. From the 640 grams of Moto that remains here, she can make additional six Doughnuts 2. This is how she can made a total of nine doughnuts, which is the maximum.\n\nSample Input 24 360\n90\n90\n90\n90\n\nSample Output 24\n\nMaking one doughnut for each of the four kinds consumes all of her Moto.\n\nSample Input 35 3000\n150\n130\n150\n130\n110\n\nSample Output 326",
        "desc": "This Java problem evaluates concepts related to greedy algorithms and resource optimization, requiring the maximization of doughnut production while meeting minimum type requirements. It is considered a medium to challenging difficulty level, appropriate for competitive programming with a score of 200 points.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt(); \n    int x = sc.nextInt(); \n    int[] param = new int[n];\n     int sum = 0; \n    for(int i=0 ; i<n ; i++){\n      param[i] = sc.nextInt();\n      sum += param[i];\n    }\n    int min = x;\n    for(int i=0 ; i<n ; i++){\n      if(param[i]<=min){\n        min = param[i];\n      }\n    }\n    int num = (x-sum)/min;\n    System.out.println(n+num);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03835",
        "question": "Score : 200 points\n\nProblem StatementYou are given two integers K and S.\nThree variable X, Y and Z takes integer values satisfying 0≤X,Y,Z≤K.\nHow many different assignments of values to X, Y and Z are there such that X + Y + Z = S?  \n\nConstraints\n2≤K≤2500 \n0≤S≤3K \nK and S are integers.  \n\nInputThe input is given from Standard Input in the following format:\nK S\n\nOutputPrint the number of the triples of X, Y and Z that satisfy the condition.\n\nSample Input 12 2\n\nSample Output 16\n\nThere are six triples of X, Y and Z that satisfy the condition:\n\nX = 0, Y = 0, Z = 2 \nX = 0, Y = 2, Z = 0 \nX = 2, Y = 0, Z = 0 \nX = 0, Y = 1, Z = 1 \nX = 1, Y = 0, Z = 1 \nX = 1, Y = 1, Z = 0\n\nSample Input 25 15\n\nSample Output 21\n\nThe maximum value of X + Y + Z is 15, achieved by one triple of X, Y and Z.",
        "desc": "This problem requires determining the number of non-negative integer triples (X, Y, Z) within a specified range that sum to a given value, testing combinatorial counting and efficient algorithm implementation skills. It is categorized as a medium-difficulty question suitable for competitive programming scenarios.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int k = sc.nextInt();\n    int s = sc.nextInt();\n\tint sum = 0;\n    for(int x=0 ; x<=s ; x++){\n      for(int y=0 ; y<=s ; y++){\n        for(int z=0 ; z<=k ; z++){\n          if( (x+y+z)==s ){\n            sum++;\n          }\n        }\n      }\n    }\n    System.out.println(sum);\n  }\n}",
        "error_desc": "1. The loops for `x` and `y` iterate up to `s` instead of up to `k`, allowing `X` and `Y` to exceed the maximum value `K`.\n2. The inner loop for `z` unnecessarily iterates up to `k` instead of calculating `z` as `s - x - y`, which can lead to incorrect counts.\n3. The program uses a brute-force approach with three nested loops, which is inefficient and may cause incorrect results for larger values of `K` and `S`."
    },
    {
        "problem_id": "p03416",
        "question": "Score : 200 points\n\nProblem StatementFind the number of palindromic numbers among the integers between A and B (inclusive).\nHere, a palindromic number is a positive integer whose string representation in base 10 (without leading zeros) reads the same forward and backward.\n\nConstraints\n10000 \\leq A \\leq B \\leq 99999\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputPrint the number of palindromic numbers among the integers between A and B (inclusive).\n\nSample Input 111009 11332\n\nSample Output 14\n\nThere are four integers that satisfy the conditions: 11011, 11111, 11211 and 11311.\n\nSample Input 231415 92653\n\nSample Output 2612",
        "desc": "This problem requires iterating through a range of five-digit integers to identify and count palindromic numbers by checking their string representations. It tests concepts such as loops, string manipulation, and palindrome logic in Java, and is considered a medium difficulty level challenge.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    int sum = 0;\n    for(int i=a ; i<=b ; i++){\n      int a1 = i/1000;\n      int b1 = (i%1000)%100;\n      if(a1==b1){\n        sum++;\n      }\n    }\n    System.out.println(sum);\n  }\n}",
        "error_desc": "1. The expression `i/1000` incorrectly extracts the first two digits instead of the first digit of a 5-digit number.\n2. The expression `(i%1000)%100` incorrectly extracts the last two digits instead of the last digit.\n3. The palindrome condition incorrectly compares the first two digits with the last two digits instead of corresponding individual digits."
    },
    {
        "problem_id": "p02717",
        "question": "Score : 100 points\n\nProblem Statement\nWe have three boxes A, B, and C, each of which contains an integer.\nCurrently, the boxes A, B, and C contain the integers X, Y, and Z, respectively.\nWe will now do the operations below in order. Find the content of each box afterward.  \n\nSwap the contents of the boxes A and B\nSwap the contents of the boxes A and C\n\nConstraints\n\n1 \\leq X,Y,Z \\leq 100\nAll values in input are integers.\n\nInput\nInput is given from Standard Input in the following format:\nX Y Z\n\nOutput\nPrint the integers contained in the boxes A, B, and C, in this order, with space in between.\n\nSample Input 11 2 3\n\nSample Output 13 1 2\n\nAfter the contents of the boxes A and B are swapped, A, B, and C contain 2, 1, and 3, respectively.\nThen, after the contents of A and C are swapped, A, B, and C contain 3, 1, and 2, respectively.  \n\nSample Input 2100 100 100\n\nSample Output 2100 100 100\n\nSample Input 341 59 31\n\nSample Output 331 41 59",
        "desc": "This Java problem evaluates the ability to manipulate variables and perform swap operations effectively. It tests fundamental concepts such as variable assignment and swapping values, and is classified as an easy difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    int c = sc.nextInt();\n    int a1 = a;\n     a = b;\n     b = a1;\n    int a2 = a;\n     a = c;\n     c = a2;\n    System.out.println(a+\" \"+b+\" \"+c);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02718",
        "question": "Score : 200 points\n\nProblem StatementWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\nConstraints\n1 \\leq M \\leq N \\leq 100\n1 \\leq A_i \\leq 1000\nA_i are distinct.\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN M\nA_1 ... A_N\n\nOutputIf M popular items can be selected, print Yes; otherwise, print No.\n\nSample Input 14 1\n5 4 2 1\n\nSample Output 1Yes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\nSample Input 23 2\n380 19 1\n\nSample Output 2No\n\nThere were 400 votes in total. The second and third most popular items received less than \\dfrac{1}{4\\times 2} of the total number of votes, so we cannot select them. Thus, we cannot select two popular items.\n\nSample Input 312 3\n4 56 78 901 2 345 67 890 123 45 6 789\n\nSample Output 3Yes",
        "desc": "This Java problem involves processing arrays to determine if a subset of items can be selected based on vote thresholds relative to the total votes. It tests understanding of array manipulation, sorting, and conditional logic, and is categorized as a medium-difficulty challenge worth 200 points.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int m = sc.nextInt();\n    int[] param = new int[n];\n    int sum1 = 0; \n    int sum2 = 0; \n    for(int i = 0 ; i<n ; i++){\n      param[i] = sc.nextInt();\n      sum1 += param[i];\n    }\n    for(int i=0 ; i<n ; i++){\n      if( param[i]>=sum1/(4*m) ){\n        sum2++;\n      }\n    }\n    if(sum2>=m){\n      System.out.println(\"Yes\");\n    }else{\n      System.out.println(\"No\");\n    }\n  }\n}",
        "error_desc": "1. The threshold `sum1/(4*m)` uses integer division, which can truncate the required value.\n2. The comparison does not account for the need to round up when `sum1` is not perfectly divisible by `4*m`."
    },
    {
        "problem_id": "p02719",
        "question": "Score : 300 points\n\nProblem StatementGiven any integer x, Aoki can do the operation below.\nOperation: Replace x with the absolute difference of x and K.\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.\n\nConstraints\n0 ≤ N ≤ 10^{18}\n1 ≤ K ≤ 10^{18}\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN K\n\nOutputPrint the minimum possible value taken by N after Aoki does the operation zero or more times.\n\nSample Input 17 4\n\nSample Output 11\n\nInitially, N=7.\nAfter one operation, N becomes |7-4| = 3.\nAfter two operations, N becomes |3-4| = 1, which is the minimum value taken by N.\n\nSample Input 22 6\n\nSample Output 22\n\nN=2 after zero operations is the minimum.\n\nSample Input 31000000000000000000 1\n\nSample Output 30",
        "desc": "This Java problem asks candidates to determine the minimal value of an integer `N` by repeatedly replacing it with the absolute difference between `N` and `K`. It tests understanding of mathematical operations, particularly modulo and iterative processes, and is classified as a high-difficulty (300-point) challenge.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    long n = sc.nextLong();\n    long k = sc.nextInt();\n    while(true){\n     long x = n-k;\n      if(x < 0){\n        x*=-1;\n      }if(x==0){\n          System.out.println(0);\n          return;\n        }\n      if(n>x){\n        n=x;\n      }else{\n        System.out.println(n);\n        return;\n      }\n    }\n  }\n}",
        "error_desc": "1. The student uses `sc.nextInt()` to read `k`, which should be `sc.nextLong()` since `K` can be up to 10¹⁸.\n2. The while loop has no termination condition other than specific cases, potentially causing an infinite loop.\n3. The code does not account for scenarios where `k` is larger than `n`, which can lead to incorrect behavior."
    },
    {
        "problem_id": "p02723",
        "question": "Score : 100 points\n\nProblem StatementA string of length 6 consisting of lowercase English letters is said to be coffee-like if and only if its 3-rd and 4-th characters are equal and its 5-th and 6-th characters are also equal.\nGiven a string S, determine whether it is coffee-like.\n\nConstraints\nS is a string of length 6 consisting of lowercase English letters.\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputIf S is coffee-like, print Yes; otherwise, print No.\n\nSample Input 1sippuu\n\nSample Output 1Yes\n\nIn sippuu, the 3-rd and 4-th characters are equal, and the 5-th and 6-th characters are also equal.\n\nSample Input 2iphone\n\nSample Output 2No\n\nSample Input 3coffee\n\nSample Output 3Yes",
        "desc": "This Java problem assesses understanding of string manipulation and indexing by requiring verification of specific character positions within a fixed-length string. It is rated as an easy-level question, suitable for beginners practicing basic conditional logic and string operations.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    String s = sc.next();\n    String s1 = s.substring(2,3);\n    String s2 = s.substring(3,4);\n    String s3 = s.substring(4,5);\n    String s4 = s.substring(5,6);\n    if(s1.equals(s2)&&s3.equals(s4)){\n      System.out.println(\"Yes\");\n    }else{\n      System.out.println(\"No\");\n      }\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02724",
        "question": "Score : 200 points\n\nProblem StatementTakahashi loves gold coins. He gains 1000 happiness points for each 500-yen coin he has and gains 5 happiness points for each 5-yen coin he has. (Yen is the currency of Japan.)\nTakahashi has X yen. If he exchanges his money so that he will gain the most happiness points, how many happiness points will he earn?\n(We assume that there are six kinds of coins available: 500-yen, 100-yen, 50-yen, 10-yen, 5-yen, and 1-yen coins.)\n\nConstraints\n0 \\leq X \\leq 10^9\nX is an integer.\n\nInputInput is given from Standard Input in the following format:\nX\n\nOutputPrint the maximum number of happiness points that can be earned.\n\nSample Input 11024\n\nSample Output 12020\n\nBy exchanging his money so that he gets two 500-yen coins and four 5-yen coins, he gains 2020 happiness points, which is the maximum number of happiness points that can be earned.\n\nSample Input 20\n\nSample Output 20\n\nHe is penniless - or yenless.\n\nSample Input 31000000000\n\nSample Output 32000000000\n\nHe is a billionaire - in yen.",
        "desc": "This problem evaluates the ability to apply greedy algorithms and perform integer arithmetic (division and modulo operations) to optimize the allocation of resources for maximum benefit. It is categorized as a medium difficulty level Java programming challenge.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        long x = sc.nextInt();\n        long power1000 = 0;\n        long power5 = 0;\n        power1000 = x/500;\n        power5 = (x%500)/5;\n        System.out.println(1000*power1000+5*power5);\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02725",
        "question": "Score : 300 points\n\nProblem StatementThere is a circular pond with a perimeter of K meters, and N houses around them.\nThe i-th house is built at a distance of A_i meters from the northmost point of the pond, measured clockwise around the pond.\nWhen traveling between these houses, you can only go around the pond.\nFind the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n\nConstraints\n2 \\leq K \\leq 10^6\n2 \\leq N \\leq 2 \\times 10^5\n0 \\leq A_1 &lt; ... &lt; A_N &lt; K\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nK N\nA_1 A_2 ... A_N\n\nOutputPrint the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n\nSample Input 120 3\n5 10 15\n\nSample Output 110\n\nIf you start at the 1-st house and go to the 2-nd and 3-rd houses in this order, the total distance traveled will be 10.\n\nSample Input 220 3\n0 5 15\n\nSample Output 210\n\nIf you start at the 2-nd house and go to the 1-st and 3-rd houses in this order, the total distance traveled will be 10.",
        "desc": "This problem involves calculating the shortest path to visit all houses positioned around a circular perimeter, testing concepts such as circular distance calculations and efficient algorithm design for handling large inputs. It is classified as a medium to hard difficulty level, suitable for competitive programming and algorithmic challenges.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int k = sc.nextInt();\n        int n = sc.nextInt();\n        int[] param = new int[n];\n        int[] param1 = new int[n];\n        for(int i=0 ; i<n ; i++){\n            param[i] = sc.nextInt();\n        }\n        for(int i=0 ; i<n-1 ; i++){\n            param1[i] = param[i+1]-param[i]; \n        }\n        param1[n-1] = (k-param[n-1]) + (param[0]);\n       Arrays.sort(param1);\n       int dis = k-param1[n-1];\n       System.out.println(dis);\n      }\n    }",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02729",
        "question": "Score : 100 points\n\nProblem Statement\nWe have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.\n\nConstraints\n\n0 \\leq N,M \\leq 100\n2 \\leq N+M\nAll values in input are integers.\n\nInput\nInput is given from Standard Input in the following format:\nN M\n\nOutput\nPrint the answer.\n\nSample Input 12 1\n\nSample Output 11\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n\nIf we choose the two balls with 1 and 2, the sum is odd;\nIf we choose the two balls with 1 and 4, the sum is odd;\nIf we choose the two balls with 2 and 4, the sum is even.\n\nThus, the answer is 1.\n\nSample Input 24 3\n\nSample Output 29\n\nSample Input 31 1\n\nSample Output 30\n\nSample Input 413 3\n\nSample Output 481\n\nSample Input 50 3\n\nSample Output 53",
        "desc": "The problem asks for the number of unique pairs that can be formed from N even and M odd integers such that their sum is even. It tests understanding of combinatorial combinations and parity (even/odd) properties, and is considered to have an easy to medium difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int m = sc.nextInt();\n    int nn = (n*(n-1))/2;\n    int mn = (m*(m-1))/2;\n    System.out.println(nn+mn);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02730",
        "question": "Score : 200 points\n\nProblem StatementA string S of an odd length is said to be a strong palindrome if and only if all of the following conditions are satisfied:\n\nS is a palindrome.\nLet N be the length of S. The string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome.\nThe string consisting of the (N+3)/2-st through N-th characters of S is a palindrome.\n\nDetermine whether S is a strong palindrome.\n\nConstraints\nS consists of lowercase English letters.\nThe length of S is an odd number between 3 and 99 (inclusive).\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputIf S is a strong palindrome, print Yes;\notherwise, print No.\n\nSample Input 1akasaka\n\nSample Output 1Yes\n\nS is akasaka.\nThe string formed by the 1-st through the 3-rd characters is aka.\nThe string formed by the 5-th through the 7-th characters is aka.\nAll of these are palindromes, so S is a strong palindrome.\n\nSample Input 2level\n\nSample Output 2No\n\nSample Input 3atcoder\n\nSample Output 3No",
        "desc": "This problem requires determining if an odd-length string is a strong palindrome by verifying that the entire string and two specific substrings are palindromes, testing concepts like string manipulation and palindrome checking in Java. It is classified as a medium difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    String s1 = sc.next(); \n    int n = s1.length();\n    StringBuffer sb = new StringBuffer(s1);\n    String s2 = sb.reverse().toString(); \n    String str2 = s1.substring(0,(n-1)/2);\n    StringBuffer sb1 = new StringBuffer(str2);\n    String s3 = sb1.reverse().toString();\n    String str3 = s1.substring((n+3)/2-1,n);\n    StringBuffer sb2 = new StringBuffer(str3);\n    String s4 = sb2.reverse().toString();\n    if((s1.equals(s2))&&(str2.equals(s3))&&(str3.equals(s4))){\n      System.out.println(\"Yes\");\n    }else{\n      System.out.println(\"No\");\n    }\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02731",
        "question": "Score : 300 points\n\nProblem StatementGiven is a positive integer L.\nFind the maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L.\n\nConstraints\n1 ≤ L ≤ 1000\nL is an integer.\n\nInputInput is given from Standard Input in the following format:\nL\n\nOutputPrint the maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\nSample Input 13\n\nSample Output 11.000000000000\n\nFor example, a rectangular cuboid whose dimensions are 0.8, 1, and 1.2 has a volume of 0.96.\nOn the other hand, if the dimensions are 1, 1, and 1, the volume of the rectangular cuboid is 1, which is greater.\n\nSample Input 2999\n\nSample Output 236926037.000000000000",
        "desc": "This Java problem assesses understanding of optimization techniques and mathematical concepts such as the Arithmetic Mean-Geometric Mean (AM-GM) inequality to maximize the volume of a rectangular cuboid given a fixed sum of its dimensions. It is classified as a high-difficulty (300 points) problem due to the need for precise mathematical reasoning and efficient implementation to handle floating-point precision.",
        "program": "import java.util.*;\nclass Main\n{\n        public static void main(String[] args)\n        {\n            Scanner sc = new Scanner(System.in);\n            double l = sc.nextInt();\n            double sum = 0;\n            for(double x=0.1 ; x<l ; x+=0.1){\n                for(double y=0.1 ; y<l-x ; y+=0.1){\n                    double z = l-(x+y);\n                    double menseki = x*y*z;\n                    if(menseki>sum){\n                        sum=menseki;\n                    }\n                }\n            }\n            System.out.println(sum);\n        }\n}",
        "error_desc": "1. The input is read using `sc.nextInt()` and assigned to a `double`, which can cause type inconsistencies.\n2. The loops increment `x` and `y` by `0.1`, leading to precision errors and potentially missing the exact maximum volume.\n3. The algorithm uses a brute-force approach instead of calculating the maximum volume mathematically, resulting in inefficient and incorrect results.\n4. The output does not format the result to exactly twelve decimal places as required."
    },
    {
        "problem_id": "p02753",
        "question": "Score : 100 points\n\nProblem StatementIn AtCoder City, there are three stations numbered 1, 2, and 3.\nEach of these stations is operated by one of the two railway companies, A and B. A string S of length 3 represents which company operates each station. If S_i is A, Company A operates Station i; if S_i is B, Company B operates Station i.\nTo improve the transportation condition, for each pair of a station operated by Company A and one operated by Company B, there will be a bus service connecting them.\nDetermine if there is a pair of stations that will be connected by a bus service.\n\nConstraints\nEach character of S is A or B.\n|S| = 3\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputIf there is a pair of stations that will be connected by a bus service, print Yes; otherwise, print No.\n\nSample Input 1ABA\n\nSample Output 1Yes\n\nCompany A operates Station 1 and 3, while Company B operates Station 2.\nThere will be a bus service between Station 1 and 2, and between Station 2 and 3, so print Yes.\n\nSample Input 2BBA\n\nSample Output 2Yes\n\nCompany B operates Station 1 and 2, while Company A operates Station 3.\nThere will be a bus service between Station 1 and 3, and between Station 2 and 3, so print Yes.\n\nSample Input 3BBB\n\nSample Output 3No\n\nCompany B operates all the stations. Thus, there will be no bus service, so print No.",
        "desc": "This Java problem evaluates proficiency in string manipulation and conditional logic by requiring the identification of pairs of railway stations operated by different companies based on a three-character input string. It is considered an easy-level task, suitable for beginners aiming to demonstrate fundamental programming skills.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        String a = s.substring(0,1);\n        String b = s.substring(1,2);\n        String c = s.substring(2,3);\n        if((a.equals(b))&&(a.equals(c))){\n            System.out.println(\"No\");\n        }else{\n            System.out.println(\"Yes\");\n        }\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02754",
        "question": "Score : 200 points\n\nProblem StatementTakahashi has many red balls and blue balls. Now, he will place them in a row.\nInitially, there is no ball placed.\nTakahashi, who is very patient, will do the following operation 10^{100} times:\n\nPlace A blue balls at the end of the row of balls already placed. Then, place B red balls at the end of the row.\n\nHow many blue balls will be there among the first N balls in the row of balls made this way?\n\nConstraints\n1 \\leq N \\leq 10^{18}\nA, B \\geq 0\n0 &lt; A + B \\leq 10^{18}\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN A B\n\nOutputPrint the number of blue balls that will be there among the first N balls in the row of balls.\n\nSample Input 18 3 4\n\nSample Output 14\n\nLet b denote a blue ball, and r denote a red ball. The first eight balls in the row will be bbbrrrrb, among which there are four blue balls.\n\nSample Input 28 0 4\n\nSample Output 20\n\nHe placed only red balls from the beginning.\n\nSample Input 36 2 4\n\nSample Output 32\n\nAmong bbrrrr, there are two blue balls.",
        "desc": "This Java problem asks for calculating the number of blue balls among the first N positions in a sequence formed by repeatedly appending A blue balls followed by B red balls. It tests concepts such as arithmetic operations with large numbers, efficient loop calculations, and handling large input constraints, and is considered to be of medium to hard difficulty.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n       int n = sc.nextInt();\n       int a = sc.nextInt();\n       int b = sc.nextInt();\n       if(n<=a){\n           System.out.println(n);\n          }else if(a<n&&n<=a+b){\n              System.out.println(a);\n            }else{\n                int block = n/(a+b);\n                int amari = n/(a+b);\n                int total = a*block;\n                if(amari<=a){\n                    total+=amari;\n                }else if(a<amari){\n                    total+=a;\n                }\n                System.out.println(total);\n            }\n    }\n}",
        "error_desc": "1. Variables `n`, `a`, and `b` are declared as `int` but should be `long` to handle values up to 10¹⁸.\n2. The variable `amari` is incorrectly calculated using `n / (a + b)` instead of `n % (a + b)`.\n3. Both `block` and `amari` are declared as `int`, which can cause overflow for large input values."
    },
    {
        "problem_id": "p02759",
        "question": "Score : 100 points\n\nProblem StatementTakahashi wants to print a document with N pages double-sided, where two pages of data can be printed on one sheet of paper.\nAt least how many sheets of paper does he need?\n\nConstraints\nN is an integer.\n1 \\leq N \\leq 100\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the answer.\n\nSample Input 15\n\nSample Output 13\n\nBy printing the 1-st, 2-nd pages on the 1-st sheet, 3-rd and 4-th pages on the 2-nd sheet, and 5-th page on the 3-rd sheet, we can print all the data on 3 sheets of paper.\n\nSample Input 22\n\nSample Output 21\n\nSample Input 3100\n\nSample Output 350",
        "desc": "This Java problem requires determining the minimum number of double-sided sheets needed to print a document with N pages, testing concepts such as integer division and ceiling operations. It is classified as an easy-level programming challenge.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    if(n%2==0){\n      System.out.println(n/2);\n    }else{\n      System.out.println((n+1)/2);\n    }\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02771",
        "question": "Score: 100 points\n\nProblem Statement\nA triple of numbers is said to be poor when two of those numbers are equal but the other number is different from those two numbers.\nYou will be given three integers A, B, and C. If this triple is poor, print Yes; otherwise, print No.\n\nConstraints\n\nA, B, and C are all integers between 1 and 9 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:\nA B C\n\nOutput\nIf the given triple is poor, print Yes; otherwise, print No.\n\nSample Input 15 7 5\n\nSample Output 1Yes\n\nA and C are equal, but B is different from those two numbers, so this triple is poor.\n\nSample Input 24 4 4\n\nSample Output 2No\n\nA, B, and C are all equal, so this triple is not poor.\n\nSample Input 34 9 6\n\nSample Output 3No\n\nSample Input 43 3 4\n\nSample Output 4Yes",
        "desc": "This Java problem requires determining if exactly two out of three given integers are equal while the third is different, testing the programmer’s ability to use conditional statements and equality checks. It is classified as an easy-level exercise suitable for beginners.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    int c = sc.nextInt();\n    int(a==b&&a==c){\n      System.out.println(\"No\");\n    }else if(a!=b&&a!=c&&b!=c){\n      System.out.println(\"No\");\n    }else{\n      System.out.println(\"Yes\");\n    }\n  }\n}",
        "error_desc": "1. The keyword `int` is incorrectly used instead of `if` in the conditional statement.\n2. Parentheses are missing around the condition after the `int` keyword.\n3. The `else if` statement is improperly connected due to the preceding syntax error."
    },
    {
        "problem_id": "p02772",
        "question": "Score: 200 points\n\nProblem Statement\nYou are an immigration officer in the Kingdom of AtCoder. The document carried by an immigrant has some number of integers written on it, and you need to check whether they meet certain criteria.\nAccording to the regulation, the immigrant should be allowed entry to the kingdom if and only if the following condition is satisfied:\n\nAll even numbers written on the document are divisible by 3 or 5.\n\nIf the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, print DENIED.\n\nNotes\n\nThe condition in the statement can be rephrased as \"If x is an even number written on the document, x is divisible by 3 or 5\".\nHere \"if\" and \"or\" are logical terms.\n\nConstraints\n\nAll values in input are integers.\n1 \\leq N \\leq 100\n1 \\leq A_i \\leq 1000\n\nInput\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n\nOutput\nIf the immigrant should be allowed entry according to the regulation, print APPROVED; otherwise, print DENIED.\n\nSample Input 15\n6 7 9 10 31\n\nSample Output 1APPROVED\n\nThe even numbers written on the document are 6 and 10.\nAll of them are divisible by 3 or 5, so the immigrant should be allowed entry.\n\nSample Input 23\n28 27 24\n\nSample Output 2DENIED\n\n28 violates the condition, so the immigrant should not be allowed entry.",
        "desc": "The problem asks you to determine if all even numbers in a given list are divisible by either 3 or 5, requiring the use of array iteration, conditional statements, and logical operators in Java. It assesses understanding of basic input handling and logical logic, and is classified as a medium difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] array = new int[n];\n        for(int i=0 ; i<n ; i++){\n            array[i] = sc.nextInt();\n        }\n        for(int i=0 ; i<n ; i++){\n            if(array[i]%2==0){\n                if((array[i]%3!=0)&&(array[i]%5!=0)){\n                    System.out.println(\"DENIED\");\n                    return;\n                }\n            }\n        }\n        System.out.println(\"APPROVED\");\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02766",
        "question": "Score : 200 points\n\nProblem StatementGiven is an integer N. Find the number of digits that N has in base K.\n\nNotesFor information on base-K representation, see Positional notation - Wikipedia.\n\nConstraints\nAll values in input are integers.\n1 \\leq N \\leq 10^9\n2 \\leq K \\leq 10\n\nInputInput is given from Standard Input in the following format:\nN K\n\nOutputPrint the number of digits that N has in base K.\n\nSample Input 111 2\n\nSample Output 14\n\nIn binary, 11 is represented as 1011.\n\nSample Input 21010101 10\n\nSample Output 27\n\nSample Input 3314159265 3\n\nSample Output 318",
        "desc": "This Java problem asks for calculating the number of digits an integer \\( N \\) has when represented in base \\( K \\). It tests understanding of number base conversions and mathematical calculations related to positional notation, and is categorized as an intermediate difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n        public static void main(String[] args)\n        {\n            Scanner sc = new Scanner(System.in);\n            int n = sc.nextInt();\n            int k = sc.nextInt();\n            int total = n;\n            int count = 0;\n            while(total!=0){\n                total/=k;\n                count++;\n            }\n            System.out.println(count);\n        }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02705",
        "question": "Score : 100 points\n\nProblem StatementPrint the circumference of a circle of radius R.\n\nConstraints\n1 \\leq R \\leq 100\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nR\n\nOutputPrint the circumference of the circle.\nYour output is considered correct if and only if its absolute or relative error from our answer is at most 10^{-2}.\n\nSample Input 11\n\nSample Output 16.28318530717958623200\n\nSince we accept an absolute or relative error of at most 10^{-2}, 6.28 is also an acceptable output, but 6 is not.\n\nSample Input 273\n\nSample Output 2458.67252742410977361942",
        "desc": "This Java problem requires calculating and printing the circumference of a circle given an integer radius, testing concepts such as mathematical computations, use of constants (like π), and handling floating-point precision. It is categorized as an easy-level programming question.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        double r = sc.nextInt();\n        double p = 2*r*3.1415;\n        System.out.println(p);\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02706",
        "question": "Score : 200 points\n\nProblem StatementTakahashi has N days of summer vacation.\nHis teacher gave him M summer assignments. It will take A_i days for him to do the i-th assignment.\nHe cannot do multiple assignments on the same day, or hang out on a day he does an assignment.\nWhat is the maximum number of days Takahashi can hang out during the vacation if he finishes all the assignments during this vacation?\nIf Takahashi cannot finish all the assignments during the vacation, print -1 instead.\n\nConstraints\n1 \\leq N \\leq 10^6\n1 \\leq M \\leq 10^4\n1 \\leq A_i \\leq 10^4\n\nInputInput is given from Standard Input in the following format:\nN M\nA_1 ... A_M\n\nOutputPrint the maximum number of days Takahashi can hang out during the vacation, or -1.\n\nSample Input 141 2\n5 6\n\nSample Output 130\n\nFor example, he can do the first assignment on the first 5 days, hang out on the next 30 days, and do the second assignment on the last 6 days of the vacation. In this way, he can safely spend 30 days hanging out.\n\nSample Input 210 2\n5 6\n\nSample Output 2-1\n\nHe cannot finish his assignments.\n\nSample Input 311 2\n5 6\n\nSample Output 30\n\nHe can finish his assignments, but he will have no time to hang out.\n\nSample Input 4314 15\n9 26 5 35 8 9 79 3 23 8 46 2 6 43 3\n\nSample Output 49",
        "desc": "This Java problem assesses the ability to process arrays, perform summations, and apply conditional logic to determine scheduling feasibility within given constraints. It is categorized as an easy to intermediate difficulty level, suitable for programmers familiar with basic algorithmic concepts and efficient handling of large input sizes.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[] array = new int[n];\n        int sum = 0;\n        for(int i=0 ; i<m ; i++){\n            array[i] = sc.nextInt();\n            sum +=array[i];\n        }\n        int total = n-sum;\n        if(total<=0){\n            System.out.println(-1);\n        }else{\n            System.out.println(total);\n        }\n    }\n}",
        "error_desc": "1. The array is initialized with size `n` instead of `m`, which can cause memory issues.\n2. The condition `if(total<=0)` incorrectly prints `-1` even when `total` is exactly `0`.\n3. The program does not handle cases where the sum of assignments equals the total vacation days correctly.\n4. Allocating an array of size `n` is unnecessary since only `m` assignment days are needed."
    },
    {
        "problem_id": "p02777",
        "question": "Score : 100 points\n\nProblem Statement\nWe have A balls with the string S written on each of them and B balls with the string T written on each of them.\nFrom these balls, Takahashi chooses one with the string U written on it and throws it away.\nFind the number of balls with the string S and balls with the string T that we have now.\n\nConstraints\n\nS, T, and U are strings consisting of lowercase English letters.\nThe lengths of S and T are each between 1 and 10 (inclusive).\nS \\not= T\nS=U or T=U.\n1 \\leq A,B \\leq 10\nA and B are integers.\n\nInput\nInput is given from Standard Input in the following format:\nS T\nA B\nU\n\nOutput\nPrint the answer, with space in between.\n\nSample Input 1red blue\n3 4\nred\n\nSample Output 12 4\n\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\n\nSample Input 2red blue\n5 5\nblue\n\nSample Output 25 4\n\nTakahashi chose a ball with blue written on it and threw it away.\nNow we have five balls with the string S and four balls with the string T.",
        "desc": "This Java problem assesses understanding of string handling, conditional logic, and basic arithmetic operations. It is categorized as an easy-level challenge, requiring students to manipulate counts based on string comparisons and output the updated values accordingly.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        String t = sc.next();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        String u = sc.next();\n        if(u.equals(s)){\n            a+=-1;\n        }else{\n            b+=-1;\n        }\n        System.out.println(a+\" \"+b);\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02783",
        "question": "Score : 100 points\n\nProblem StatementServal is fighting with a monster.\nThe health of the monster is H.\nIn one attack, Serval can decrease the monster's health by A.\nThere is no other way to decrease the monster's health.\nServal wins when the monster's health becomes 0 or below.\nFind the number of attacks Serval needs to make before winning.\n\nConstraints\n1 \\leq H \\leq 10^4\n1 \\leq A \\leq 10^4\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nH A\n\nOutputPrint the number of attacks Serval needs to make before winning.\n\nSample Input 110 4\n\nSample Output 13\n\nAfter one attack, the monster's health will be 6.\nAfter two attacks, the monster's health will be 2.\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make three attacks to win.\n\nSample Input 21 10000\n\nSample Output 21\n\nSample Input 310000 1\n\nSample Output 310000",
        "desc": "This Java problem assesses the ability to perform integer arithmetic and implement ceiling division to determine the minimum number of attacks needed to reduce a monster's health to zero or below. It is classified as an easy-level problem, suitable for beginners practicing basic control structures and mathematical operations.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int h = sc.nextInt();\n        int a = sc.nextInt();\n        int count = 0;\n        do{\n            count++;\n            h-=a;\n            if(h<=0){\n                System.out.println(count);\n            }\n        }while(h>0);\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02801",
        "question": "Score : 100 points\n\nProblem StatementGiven is a lowercase English letter C that is not z. Print the letter that follows C in alphabetical order.\n\nConstraints\nC is a lowercase English letter that is not z.\n\nInputInput is given from Standard Input in the following format:\nC\n\nOutputPrint the letter that follows C in alphabetical order.\n\nSample Input 1a\n\nSample Output 1b\n\na is followed by b.\n\nSample Input 2y\n\nSample Output 2z\n\ny is followed by z.",
        "desc": "This Java problem tests understanding of character manipulation and ASCII value operations by requiring the programmer to identify and print the next lowercase English letter following a given input character. It is classified as an easy-level question.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        char[] n = (sc.next()).toCharArray();\n        n[0]++;\n    System.out.println(n[0]);\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02829",
        "question": "Score: 100 points\n\nProblem Statement\nTakahashi is solving quizzes. He has easily solved all but the last one.\nThe last quiz has three choices: 1, 2, and 3.\nWith his supernatural power, Takahashi has found out that the choices A and B are both wrong.\nPrint the correct choice for this problem.\n\nConstraints\n\nEach of the numbers A and B is 1, 2, or 3.\nA and B are different.\n\nInput\nInput is given from Standard Input in the following format:\nA\nB\n\nOutput\nPrint the correct choice.\n\nSample Input 13\n1\n\nSample Output 12\n\nWhen we know 3 and 1 are both wrong, the correct choice is 2.\n\nSample Input 21\n2\n\nSample Output 23",
        "desc": "This problem requires identifying the remaining correct choice from three options after two incorrect ones are provided, testing basic input handling and conditional logic in Java. It is classified as an easy-level programming challenge.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int[] array = {1,2,3};\n        for(int i=0 ; i<3 ; i++){\n            if((array[i]==a)||(array[i]==b)){\n                array[i] = 0;\n            }\n        }\n        for(int i=0 ; i<3 ; i++){\n            if(array[i]!=0){\n                System.out.println(array[i]);\n                return;\n            }\n        }\n    }\n}",
        "error_desc": "No error."
    }
]