[
    {
        "problem_id": "p02835",
        "question": "Score : 100 points\n\nProblem StatementGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\nConstraints\n1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nA_1 A_2 A_3\n\nOutputIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\nSample Input 15 7 9\n\nSample Output 1win\n\n5+7+9=21, so print win.\n\nSample Input 213 7 2\n\nSample Output 2bust\n\n13+7+2=22, so print bust.",
        "desc": "This Java problem requires reading three integer inputs, calculating their sum, and using conditional statements to determine and print \"bust\" if the sum is at least 22 or \"win\" otherwise. It tests fundamental concepts such as input handling, arithmetic operations, and conditional logic, and is classified as an easy-level problem.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int c = sc.nextInt();\n        int total = a+b+c;\n        if(total>=22){\n            System.out.println(\"bust\");\n        }else{\n            System.out.println(\"win\");\n        }\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02921",
        "question": "Score : 100 points\n\nProblem StatementYou will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.\n\nConstraints\nS and T are strings of length 3 each.\nS and T consist of S, C, and R.\n\nInputInput is given from Standard Input in the following format:\nS\nT\n\nOutputPrint the number of days for which the forecast was correct.\n\nSample Input 1CSS\nCSR\n\nSample Output 12\n\nFor the first day, it was forecast to be cloudy, and it was indeed cloudy.\nFor the second day, it was forecast to be sunny, and it was indeed sunny.\nFor the third day, it was forecast to be sunny, but it was rainy.\n\nThus, the forecast was correct for two days in this case.\n\nSample Input 2SSR\nSSR\n\nSample Output 23\n\nSample Input 3RRR\nSSS\n\nSample Output 30",
        "desc": "This Java problem assesses the ability to manipulate and compare strings by iterating through characters and using conditional logic to count matching elements. It is categorized as an easy-level question, suitable for beginners practicing basic string operations and control structures.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    String a = sc.next();\n    String b = sc.next();\n    String a1 = a.substring(0,1):\n    String a2 = a.substring(1,2):\n    String a3 = a.substring(2,3):\n    String b1 = b.substring(0,1):\n    String b2 = b.substring(1,2):\n    String b3 = b.substring(2,3):\n    int count = 0;\n    if(a1.equals(b1)){\n      count++;\n    }else if(a2.equals(b2)){\n      count++;\n    }else if(a3.equals(b3)){\n      count++;\n    }\n    System.out.println(count);\n  }\n}",
        "error_desc": "1. Used colons (`:`) instead of semicolons (`;`) after the substring statements.\n2. Employed `else if` instead of separate `if` statements, preventing multiple correct forecasts from being counted.\n3. Misspelled the substring method separators with colons, causing syntax errors."
    },
    {
        "problem_id": "p02847",
        "question": "Score : 100 points\n\nProblem StatementGiven is a string S representing the day of the week today.\nS is SUN, MON, TUE, WED, THU, FRI, or SAT, for Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively.\nAfter how many days is the next Sunday (tomorrow or later)?\n\nConstraints\nS is SUN, MON, TUE, WED, THU, FRI, or SAT.\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputPrint the number of days before the next Sunday.\n\nSample Input 1SAT\n\nSample Output 11\n\nIt is Saturday today, and tomorrow will be Sunday.\n\nSample Input 2SUN\n\nSample Output 27\n\nIt is Sunday today, and seven days later, it will be Sunday again.",
        "desc": "This Java problem assesses understanding of string manipulation, mapping enumerated values (days of the week) to numerical representations, and applying modular arithmetic to calculate intervals. It is considered to have an easy to medium difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    String s = sc.next();\n    SUN,MON,TUE,WED,THU,FRI,SAT\n    if(s.equals(\"SUN\")){\n      System.out.println(7);\n      }else if(s.equals(\"MON\")){\n      System.out.println(6);\n      }else if(s.equals(\"TUE\")){\n      System.out.println(5);\n      }else if(s.equals(\"WED\")){\n      System.out.println(4);\n      }else if(s.equals(\"THU\")){\n      System.out.println(3);\n      }else if(s.equals(\"FRI\")){\n      System.out.println(2);\n      }else if(s.equals(\"SAT\")){\n      System.out.println(1);\n    }\n  }\n}",
        "error_desc": "1. The line `SUN,MON,TUE,WED,THU,FRI,SAT` is not a valid Java statement and causes a compile error."
    },
    {
        "problem_id": "p02879",
        "question": "Score : 100 points\n\nProblem StatementHaving learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together. He cannot do any other calculation.\nGiven are two integers A and B.\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print -1 instead.\n\nConstraints\n1 \\leq A \\leq 20\n1 \\leq B \\leq 20\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputIf Takahashi can calculate A \\times B, print the result; if he cannot, print -1.\n\nSample Input 12 5\n\nSample Output 110\n\n2 \\times 5 = 10.\n\nSample Input 25 10\n\nSample Output 2-1\n\n5\\times 10 = 50, but Takahashi cannot do this calculation, so print -1 instead.\n\nSample Input 39 9\n\nSample Output 381",
        "desc": "This Java problem tests the ability to implement conditional statements and perform basic arithmetic operations, specifically multiplication within given constraints (integers between 1 and 9). It is classified as an easy difficulty level.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    if(a<1&&9<a){\n      System.out.println(-1);\n      return;\n    }else if(b<1&&9<b){\n      System.out.println(-1);\n      return;\n    }\n    System.out.println(a*b);\n  }\n}",
        "error_desc": "1. Uses the logical AND operator (`&&`) instead of the logical OR operator (`||`) when checking if `a` is outside the range 1 to 9.\n2. Uses the logical AND operator (`&&`) instead of the logical OR operator (`||`) when checking if `b` is outside the range 1 to 9.\n3. The conditions `a<1 && 9<a` and `b<1 && 9<b` are always false, preventing the program from correctly determining when to print `-1`."
    },
    {
        "problem_id": "p02897",
        "question": "Score : 100 points\n\nProblem StatementGiven is an integer N.\nTakahashi chooses an integer a from the positive integers not greater than N with equal probability.\nFind the probability that a is odd.\n\nConstraints\n1 \\leq N \\leq 100\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the probability that a is odd.\nYour output will be considered correct when its absolute or relative error from the judge's output is at most 10^{-6}.\n\nSample Input 14\n\nSample Output 10.5000000000\n\nThere are four positive integers not greater than 4: 1, 2, 3, and 4. Among them, we have two odd numbers: 1 and 3. Thus, the answer is \\frac{2}{4} = 0.5.\n\nSample Input 25\n\nSample Output 20.6000000000\n\nSample Input 31\n\nSample Output 31.0000000000",
        "desc": "This Java problem assesses the ability to compute probabilities by determining the ratio of odd integers within a given range from 1 to N. It tests fundamental programming concepts such as control flow, arithmetic operations, and handling input/output, and is considered to be of easy difficulty.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    double a = sc.nextInt();\n    double odd1 = 0;\n    double odd2 = 0;\n    for(int i=1 ; i<=a ; i++){\n      if(i%2==0){\n        odd2++;\n      }else{\n        odd1++;\n      }\n    }\n    System.out.println(odd1/a);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02909",
        "question": "Score: 100 points\n\nProblem Statement\nThe weather in Takahashi's town changes day by day, in the following cycle: Sunny, Cloudy, Rainy, Sunny, Cloudy, Rainy, ...\nGiven is a string S representing the weather in the town today. Predict the weather tomorrow.\n\nConstraints\n\nS is Sunny, Cloudy, or Rainy.\n\nInput\nInput is given from Standard Input in the following format:\nS\n\nOutput\nPrint a string representing the expected weather tomorrow, in the same format in which input is given.\n\nSample Input 1Sunny\n\nSample Output 1Cloudy\n\nIn Takahashi's town, a sunny day is followed by a cloudy day.\n\nSample Input 2Rainy\n\nSample Output 2Sunny",
        "desc": "This Java problem asks students to determine the next day's weather based on a fixed three-day cycle (\"Sunny\" → \"Cloudy\" → \"Rainy\"). It tests understanding of string manipulation and basic control structures, and is classified as an easy-level challenge.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    String a = sc.next();\n    Sunny, Cloudy, Rainy\n    if(a.equals(\"Sunny\"){\n      System.out.println(\"Cloudy\")\n    }else if(a.equals(\"Cloudy\")){\n      System.out.println(\"Rainy\");\n    }else{\n      System.out.println(\"Sunny\");\n    }\n  }\n}",
        "error_desc": "1. The line `Sunny, Cloudy, Rainy` is invalid syntax and should be removed or properly defined.\n2. The `if` statement `if(a.equals(\"Sunny\"){` is missing a closing parenthesis.\n3. The `System.out.println(\"Cloudy\")` statement is missing a semicolon at the end.\n4. There are inconsistent use of semicolons in the `System.out.println` statements, with some lines missing them."
    },
    {
        "problem_id": "p02945",
        "question": "Score : 100 points\n\nProblem StatementWe have two integers: A and B.\nPrint the largest number among A + B, A - B, and A \\times B.\n\nConstraints\nAll values in input are integers.\n-100 \\leq A,\\ B \\leq 100\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputPrint the largest number among A + B, A - B, and A \\times B.\n\nSample Input 1-13 3\n\nSample Output 1-10\n\nThe largest number among A + B = -10, A - B = -16, and A \\times B = -39 is -10.\n\nSample Input 21 -33\n\nSample Output 234\n\nThe largest number among A + B = -32, A - B = 34, and A \\times B = -33 is 34.\n\nSample Input 313 3\n\nSample Output 339\n\nThe largest number among A + B = 16, A - B = 10, and A \\times B = 39 is 39.",
        "desc": "This Java problem evaluates the ability to perform basic arithmetic operations and implement conditional logic to compare and determine the maximum value among several computed results. It is categorized as an **Easy** difficulty level, making it suitable for beginners learning fundamental programming concepts.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    int max = -1000;\n    if (a + b >= max) {\n      max = a + b;\n    }\n    if (a - b >= max) {\n      max = a - b;\n    }\n    if(a * b >= max) {\n      max = a * b;\n    }\n    System.out.println(max); \n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02951",
        "question": "Score : 100 points\n\nProblem StatementWe have two bottles for holding water.\nBottle 1 can hold up to A milliliters of water, and now it contains B milliliters of water.\nBottle 2 contains C milliliters of water.\nWe will transfer water from Bottle 2 to Bottle 1 as much as possible.\nHow much amount of water will remain in Bottle 2?\n\nConstraints\nAll values in input are integers.\n1 \\leq B \\leq A \\leq 20\n1 \\leq C \\leq 20\n\nInputInput is given from Standard Input in the following format:\nA B C\n\nOutputPrint the integer representing the amount of water, in milliliters, that will remain in Bottle 2.\n\nSample Input 16 4 3\n\nSample Output 11\n\nWe will transfer two milliliters of water from Bottle 2 to Bottle 1, and one milliliter of water will remain in Bottle 2.\n\nSample Input 28 3 9\n\nSample Output 24\n\nSample Input 312 3 7\n\nSample Output 30",
        "desc": "This Java problem assesses understanding of basic input handling, arithmetic operations, and conditional logic by requiring the calculation of remaining water after transferring between two bottles. It is categorized as an easy-level programming challenge.",
        "program": "import java.util.*;\nclass Main\n{\n  public static void main(String[] args)\n  {\n    Scanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    int c = sc.nextInt();\n    total = c - (a - b);\n    if (total <= 0) {\n      System.out.println(total);\n    } else {\n      System.out.println(0);\n    }\n  }\n}",
        "error_desc": "1. The variable `total` is used without declaring its type.\n2. The condition in the `if` statement is incorrect; it should check if `total` is greater than or equal to zero.\n3. The calculation `c - (a - b)` does not correctly determine the remaining water in Bottle 2."
    },
    {
        "problem_id": "p02957",
        "question": "Score: 100 points\n\nProblem StatementWe have two distinct integers A and B.\nPrint the integer K such that |A - K| = |B - K|.\nIf such an integer does not exist, print IMPOSSIBLE instead.\n\nConstraints\nAll values in input are integers.\n0 \\leq A,\\ B \\leq 10^9\nA and B are distinct.\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputPrint the integer K satisfying the condition.\nIf such an integer does not exist, print IMPOSSIBLE instead.\n\nSample Input 12 16\n\nSample Output 19\n\n|2 - 9| = 7 and |16 - 9| = 7, so 9 satisfies the condition.\n\nSample Input 20 3\n\nSample Output 2IMPOSSIBLE\n\nNo integer satisfies the condition.\n\nSample Input 3998244353 99824435\n\nSample Output 3549034394",
        "desc": "This problem tests understanding of absolute value properties and arithmetic to determine an integer equidistant from two distinct numbers, including handling cases where no such integer exists. It is classified as an easy to intermediate difficulty level programming challenge.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int total = a + b;\n        if (total % 2 == 0) {\n            System.out.println(total / 2);\n        } else {\n            System.out.println(\"IMPOSSIBLE\");\n        }\n    }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02981",
        "question": "Score : 100 points\n\nProblem StatementN of us are going on a trip, by train or taxi.\nThe train will cost each of us A yen (the currency of Japan).\nThe taxi will cost us a total of B yen.\nHow much is our minimum total travel expense?\n\nConstraints\nAll values in input are integers.\n1 \\leq N \\leq 20\n1 \\leq A \\leq 50\n1 \\leq B \\leq 50\n\nInputInput is given from Standard Input in the following format:\nN A B\n\nOutputPrint an integer representing the minimum total travel expense.\n\nSample Input 14 2 9\n\nSample Output 18\n\nThe train will cost us 4 \\times 2 = 8 yen, and the taxi will cost us 9 yen, so the minimum total travel expense is 8 yen.\n\nSample Input 24 2 7\n\nSample Output 27\n\nSample Input 34 2 8\n\nSample Output 38",
        "desc": "This Java problem requires calculating the minimum total travel cost by comparing the cumulative train expenses (N × A) with the fixed taxi fare (B), testing basic arithmetic operations and conditional decision-making. It is classified as an easy-level problem appropriate for beginners.",
        "program": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        if (n * a <= b) {\n            System.out.println(n * a);\n        } else {\n            System.out.println(b);\n        }\n    }\n}",
        "error_desc": "No error."
    }
]