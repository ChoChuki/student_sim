[
    {
        "problem_id": "p02723",
        "question": "Score : 100 points\n\nProblem StatementA string of length 6 consisting of lowercase English letters is said to be coffee-like if and only if its 3-rd and 4-th characters are equal and its 5-th and 6-th characters are also equal.\nGiven a string S, determine whether it is coffee-like.\n\nConstraints\nS is a string of length 6 consisting of lowercase English letters.\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputIf S is coffee-like, print Yes; otherwise, print No.\n\nSample Input 1sippuu\n\nSample Output 1Yes\n\nIn sippuu, the 3-rd and 4-th characters are equal, and the 5-th and 6-th characters are also equal.\n\nSample Input 2iphone\n\nSample Output 2No\n\nSample Input 3coffee\n\nSample Output 3Yes",
        "desc": "This Java problem assesses understanding of string manipulation and indexing by requiring verification of specific character positions within a fixed-length string. It is rated as an easy-level question, suitable for beginners practicing basic conditional logic and string operations.",
        "program": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString S = sc.next();\n\t\tchar[] Sa = S.toCharArray();\n\t\tif (Sa[2] == Sa[3] && Sa[4] == Sa[5]) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t} else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02724",
        "question": "Score : 200 points\n\nProblem StatementTakahashi loves gold coins. He gains 1000 happiness points for each 500-yen coin he has and gains 5 happiness points for each 5-yen coin he has. (Yen is the currency of Japan.)\nTakahashi has X yen. If he exchanges his money so that he will gain the most happiness points, how many happiness points will he earn?\n(We assume that there are six kinds of coins available: 500-yen, 100-yen, 50-yen, 10-yen, 5-yen, and 1-yen coins.)\n\nConstraints\n0 \\leq X \\leq 10^9\nX is an integer.\n\nInputInput is given from Standard Input in the following format:\nX\n\nOutputPrint the maximum number of happiness points that can be earned.\n\nSample Input 11024\n\nSample Output 12020\n\nBy exchanging his money so that he gets two 500-yen coins and four 5-yen coins, he gains 2020 happiness points, which is the maximum number of happiness points that can be earned.\n\nSample Input 20\n\nSample Output 20\n\nHe is penniless - or yenless.\n\nSample Input 31000000000\n\nSample Output 32000000000\n\nHe is a billionaire - in yen.",
        "desc": "This problem evaluates the ability to apply greedy algorithms and perform integer arithmetic (division and modulo operations) to optimize the allocation of resources for maximum benefit. It is categorized as a medium difficulty level Java programming challenge.",
        "program": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint X = sc.nextInt();\n\t\tint Happy = X/500;\n\t\tint happy = (X%500)/5;\n\t\tSystem.out.println(1000 * Happy + 5 * happy);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02725",
        "question": "Score : 300 points\n\nProblem StatementThere is a circular pond with a perimeter of K meters, and N houses around them.\nThe i-th house is built at a distance of A_i meters from the northmost point of the pond, measured clockwise around the pond.\nWhen traveling between these houses, you can only go around the pond.\nFind the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n\nConstraints\n2 \\leq K \\leq 10^6\n2 \\leq N \\leq 2 \\times 10^5\n0 \\leq A_1 &lt; ... &lt; A_N &lt; K\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nK N\nA_1 A_2 ... A_N\n\nOutputPrint the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n\nSample Input 120 3\n5 10 15\n\nSample Output 110\n\nIf you start at the 1-st house and go to the 2-nd and 3-rd houses in this order, the total distance traveled will be 10.\n\nSample Input 220 3\n0 5 15\n\nSample Output 210\n\nIf you start at the 2-nd house and go to the 1-st and 3-rd houses in this order, the total distance traveled will be 10.",
        "desc": "This problem involves calculating the shortest path to visit all houses positioned around a circular perimeter, testing concepts such as circular distance calculations and efficient algorithm design for handling large inputs. It is classified as a medium to hard difficulty level, suitable for competitive programming and algorithmic challenges.",
        "program": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint K = sc.nextInt();\n\t\tint N = sc.nextInt();\n\t\tint[] A = new int[N];\n\t\tfor (int i = 0; i < N ; i++) A[i] = sc.nextInt();\n\t\tint max = (K - A[N-1]) + A[0];\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tif (i == 0) continue;\n\t\t\telse {\n\t\t\t\tint m = A[i] - A[i-1];\n\t\t\t\tif (max < m) max = m;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(K - max);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02717",
        "question": "Score : 100 points\n\nProblem Statement\nWe have three boxes A, B, and C, each of which contains an integer.\nCurrently, the boxes A, B, and C contain the integers X, Y, and Z, respectively.\nWe will now do the operations below in order. Find the content of each box afterward.  \n\nSwap the contents of the boxes A and B\nSwap the contents of the boxes A and C\n\nConstraints\n\n1 \\leq X,Y,Z \\leq 100\nAll values in input are integers.\n\nInput\nInput is given from Standard Input in the following format:\nX Y Z\n\nOutput\nPrint the integers contained in the boxes A, B, and C, in this order, with space in between.\n\nSample Input 11 2 3\n\nSample Output 13 1 2\n\nAfter the contents of the boxes A and B are swapped, A, B, and C contain 2, 1, and 3, respectively.\nThen, after the contents of A and C are swapped, A, B, and C contain 3, 1, and 2, respectively.  \n\nSample Input 2100 100 100\n\nSample Output 2100 100 100\n\nSample Input 341 59 31\n\nSample Output 331 41 59",
        "desc": "This Java problem evaluates the ability to manipulate variables and perform swap operations effectively. It tests fundamental concepts such as variable assignment and swapping values, and is classified as an easy difficulty level.",
        "program": "import java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int X = sc.nextInt();\n    int Y = sc.nextInt();\n    int Z = sc.nextInt();\n    System.out.println(Z + \" \" + X + \" \" + Y);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02718",
        "question": "Score : 200 points\n\nProblem StatementWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\nConstraints\n1 \\leq M \\leq N \\leq 100\n1 \\leq A_i \\leq 1000\nA_i are distinct.\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN M\nA_1 ... A_N\n\nOutputIf M popular items can be selected, print Yes; otherwise, print No.\n\nSample Input 14 1\n5 4 2 1\n\nSample Output 1Yes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\nSample Input 23 2\n380 19 1\n\nSample Output 2No\n\nThere were 400 votes in total. The second and third most popular items received less than \\dfrac{1}{4\\times 2} of the total number of votes, so we cannot select them. Thus, we cannot select two popular items.\n\nSample Input 312 3\n4 56 78 901 2 345 67 890 123 45 6 789\n\nSample Output 3Yes",
        "desc": "This Java problem involves processing arrays to determine if a subset of items can be selected based on vote thresholds relative to the total votes. It tests understanding of array manipulation, sorting, and conditional logic, and is categorized as a medium-difficulty challenge worth 200 points.",
        "program": "import java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int N = sc.nextInt();\n    int M = sc.nextInt();\n    int[] As = new int[N];\n    int total = 0;\n    int count = 0;\n    for (int i = 0; i < As.length; i++) {\n    \tAs[i] = sc.nextInt();\n    \ttotal += As[i];\n    }\n    for (int i : As) {\n    \tif((total/(4 * M)) < i) {\n    \t\tcount++;\n    \t}\n    }\n    if (M <= count) System.out.println(\"Yes\");\n    else System.out.println(\"No\");\n  }\n}",
        "error_desc": "1. The threshold is calculated using integer division `total / (4 * M)` instead of floating-point division.\n2. The comparison uses a strict greater than `>` instead of greater than or equal to, excluding items exactly equal to the threshold."
    },
    {
        "problem_id": "p02729",
        "question": "Score : 100 points\n\nProblem Statement\nWe have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.\n\nConstraints\n\n0 \\leq N,M \\leq 100\n2 \\leq N+M\nAll values in input are integers.\n\nInput\nInput is given from Standard Input in the following format:\nN M\n\nOutput\nPrint the answer.\n\nSample Input 12 1\n\nSample Output 11\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n\nIf we choose the two balls with 1 and 2, the sum is odd;\nIf we choose the two balls with 1 and 4, the sum is odd;\nIf we choose the two balls with 2 and 4, the sum is even.\n\nThus, the answer is 1.\n\nSample Input 24 3\n\nSample Output 29\n\nSample Input 31 1\n\nSample Output 30\n\nSample Input 413 3\n\nSample Output 481\n\nSample Input 50 3\n\nSample Output 53",
        "desc": "The problem asks for the number of unique pairs that can be formed from N even and M odd integers such that their sum is even. It tests understanding of combinatorial combinations and parity (even/odd) properties, and is considered to have an easy to medium difficulty level.",
        "program": "import java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int N = sc.nextInt();\n    int M = sc.nextInt();\n    System.out.println((N * (N - 1))/2 + (M * (M - 1))/2);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02719",
        "question": "Score : 300 points\n\nProblem StatementGiven any integer x, Aoki can do the operation below.\nOperation: Replace x with the absolute difference of x and K.\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.\n\nConstraints\n0 ≤ N ≤ 10^{18}\n1 ≤ K ≤ 10^{18}\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN K\n\nOutputPrint the minimum possible value taken by N after Aoki does the operation zero or more times.\n\nSample Input 17 4\n\nSample Output 11\n\nInitially, N=7.\nAfter one operation, N becomes |7-4| = 3.\nAfter two operations, N becomes |3-4| = 1, which is the minimum value taken by N.\n\nSample Input 22 6\n\nSample Output 22\n\nN=2 after zero operations is the minimum.\n\nSample Input 31000000000000000000 1\n\nSample Output 30",
        "desc": "This Java problem asks candidates to determine the minimal value of an integer `N` by repeatedly replacing it with the absolute difference between `N` and `K`. It tests understanding of mathematical operations, particularly modulo and iterative processes, and is classified as a high-difficulty (300-point) challenge.",
        "program": "import java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    long N = sc.nextLong();\n    long K = sc.nextLong();\n    long ans;\n    if (K <= N) {\n    \tans = (N%K) < (K - N%K) ? N%K : (K - N%K);\n    } else {\n    \tans = N < (K - N) ? N : (K - N);\n    }\n    System.out.println(ans);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02730",
        "question": "Score : 200 points\n\nProblem StatementA string S of an odd length is said to be a strong palindrome if and only if all of the following conditions are satisfied:\n\nS is a palindrome.\nLet N be the length of S. The string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome.\nThe string consisting of the (N+3)/2-st through N-th characters of S is a palindrome.\n\nDetermine whether S is a strong palindrome.\n\nConstraints\nS consists of lowercase English letters.\nThe length of S is an odd number between 3 and 99 (inclusive).\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputIf S is a strong palindrome, print Yes;\notherwise, print No.\n\nSample Input 1akasaka\n\nSample Output 1Yes\n\nS is akasaka.\nThe string formed by the 1-st through the 3-rd characters is aka.\nThe string formed by the 5-th through the 7-th characters is aka.\nAll of these are palindromes, so S is a strong palindrome.\n\nSample Input 2level\n\nSample Output 2No\n\nSample Input 3atcoder\n\nSample Output 3No",
        "desc": "This problem requires determining if an odd-length string is a strong palindrome by verifying that the entire string and two specific substrings are palindromes, testing concepts like string manipulation and palindrome checking in Java. It is classified as a medium difficulty level.",
        "program": "import java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    String S = sc.next();\n    boolean anskey = false;\n    anskey = check(S);\n    anskey = check(S.substring(0,(S.length()-1)/2));\n    anskey = check(S.substring(((S.length()+3)/2) - 1));\n    System.out.println(anskey ? \"Yes\" : \"No\");\n  }\n  public static boolean check(String s) {\n\t  boolean key = true;\n\t  int N = s.length();\n\t  int L = N - 1;\n\t  for (int i = 0; i < N/2; i++) {\n\t\t  if (s.charAt(i) != s.charAt(L)) {\n\t\t\t  key = false;\n\t\t\t  break;\n\t\t  }\n\t\t  L--;\n\t  }\n\t  return key;\n  }\n}",
        "error_desc": "1. The `anskey` variable is overwritten with each `check` call instead of using logical AND to combine the results.\n2. The substring for the first half uses incorrect indices with `S.substring(0, (S.length()-1)/2)`.\n3. The substring for the second half calculates the starting index incorrectly using `S.substring(((S.length()+3)/2) - 1)`."
    },
    {
        "problem_id": "p02731",
        "question": "Score : 300 points\n\nProblem StatementGiven is a positive integer L.\nFind the maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L.\n\nConstraints\n1 ≤ L ≤ 1000\nL is an integer.\n\nInputInput is given from Standard Input in the following format:\nL\n\nOutputPrint the maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\nSample Input 13\n\nSample Output 11.000000000000\n\nFor example, a rectangular cuboid whose dimensions are 0.8, 1, and 1.2 has a volume of 0.96.\nOn the other hand, if the dimensions are 1, 1, and 1, the volume of the rectangular cuboid is 1, which is greater.\n\nSample Input 2999\n\nSample Output 236926037.000000000000",
        "desc": "This Java problem assesses understanding of optimization techniques and mathematical concepts such as the Arithmetic Mean-Geometric Mean (AM-GM) inequality to maximize the volume of a rectangular cuboid given a fixed sum of its dimensions. It is classified as a high-difficulty (300 points) problem due to the need for precise mathematical reasoning and efficient implementation to handle floating-point precision.",
        "program": "import java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    double L = sc.nextDouble();\n    System.out.println(L * L * L/27);\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02753",
        "question": "Score : 100 points\n\nProblem StatementIn AtCoder City, there are three stations numbered 1, 2, and 3.\nEach of these stations is operated by one of the two railway companies, A and B. A string S of length 3 represents which company operates each station. If S_i is A, Company A operates Station i; if S_i is B, Company B operates Station i.\nTo improve the transportation condition, for each pair of a station operated by Company A and one operated by Company B, there will be a bus service connecting them.\nDetermine if there is a pair of stations that will be connected by a bus service.\n\nConstraints\nEach character of S is A or B.\n|S| = 3\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputIf there is a pair of stations that will be connected by a bus service, print Yes; otherwise, print No.\n\nSample Input 1ABA\n\nSample Output 1Yes\n\nCompany A operates Station 1 and 3, while Company B operates Station 2.\nThere will be a bus service between Station 1 and 2, and between Station 2 and 3, so print Yes.\n\nSample Input 2BBA\n\nSample Output 2Yes\n\nCompany B operates Station 1 and 2, while Company A operates Station 3.\nThere will be a bus service between Station 1 and 3, and between Station 2 and 3, so print Yes.\n\nSample Input 3BBB\n\nSample Output 3No\n\nCompany B operates all the stations. Thus, there will be no bus service, so print No.",
        "desc": "This Java problem evaluates proficiency in string manipulation and conditional logic by requiring the identification of pairs of railway stations operated by different companies based on a three-character input string. It is considered an easy-level task, suitable for beginners aiming to demonstrate fundamental programming skills.",
        "program": "import java.util.*;\npublic class Main {\n  public static void main() {\n    Scanner sc = new Scanner(System.in); \n    String S = sc.next();\n    boolean key = false;\n    if (S.equals(\"AAA\") || S.equals(\"BBB\")) key = true;\n    else ;\n    System.out.println(key ? \"No\" : \"Yes\");\n  }\n}",
        "error_desc": "1. The `main` method is declared without the required `String[] args` parameter, causing a runtime error."
    },
    {
        "problem_id": "p02711",
        "question": "Score : 100 points\n\nProblem StatementGiven is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.\n\nConstraints\n100 \\leq N \\leq 999\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputIf N contains the digit 7, print Yes; otherwise, print No.\n\nSample Input 1117\n\nSample Output 1Yes\n\n117 contains 7 as its last digit.\n\nSample Input 2123\n\nSample Output 2No\n\n123 does not contain the digit 7.\n\nSample Input 3777\n\nSample Output 3Yes",
        "desc": "This Java problem assesses the ability to manipulate and analyze individual digits of an integer using control structures. It is classified as an easy-level question, focusing on basic conditional statements and number handling.",
        "program": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString N = sc.next();\n\t\tSystem.out.println(-1<N.indexOf(\"7\")?\"Yes\":\"No\");\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02712",
        "question": "Score : 200 points\n\nProblem StatementLet us define the FizzBuzz sequence a_1,a_2,... as follows:\n\nIf both 3 and 5 divides i, a_i=\\mbox{FizzBuzz}.\nIf the above does not hold but 3 divides i, a_i=\\mbox{Fizz}.\nIf none of the above holds but 5 divides i, a_i=\\mbox{Buzz}.\nIf none of the above holds, a_i=i.\n\nFind the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\nConstraints\n1 \\leq N \\leq 10^6\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\nSample Input 115\n\nSample Output 160\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n\nSample Input 21000000\n\nSample Output 2266666333332\n\nWatch out for overflow.",
        "desc": "This Java problem evaluates the ability to implement control structures and conditional logic by requiring the creation of a FizzBuzz sequence and summing specific numerical terms within it. It tests understanding of loops, conditionals, and handling large integers, and is classified as intermediate in difficulty.",
        "program": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tlong count = 0;\n\t\tfor (int i = 1; i < N + 1; i++) {\n\t\t\tif (i%3 != 0 && i%5 != 0) count += i;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02754",
        "question": "Score : 200 points\n\nProblem StatementTakahashi has many red balls and blue balls. Now, he will place them in a row.\nInitially, there is no ball placed.\nTakahashi, who is very patient, will do the following operation 10^{100} times:\n\nPlace A blue balls at the end of the row of balls already placed. Then, place B red balls at the end of the row.\n\nHow many blue balls will be there among the first N balls in the row of balls made this way?\n\nConstraints\n1 \\leq N \\leq 10^{18}\nA, B \\geq 0\n0 &lt; A + B \\leq 10^{18}\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN A B\n\nOutputPrint the number of blue balls that will be there among the first N balls in the row of balls.\n\nSample Input 18 3 4\n\nSample Output 14\n\nLet b denote a blue ball, and r denote a red ball. The first eight balls in the row will be bbbrrrrb, among which there are four blue balls.\n\nSample Input 28 0 4\n\nSample Output 20\n\nHe placed only red balls from the beginning.\n\nSample Input 36 2 4\n\nSample Output 32\n\nAmong bbrrrr, there are two blue balls.",
        "desc": "This Java problem asks for calculating the number of blue balls among the first N positions in a sequence formed by repeatedly appending A blue balls followed by B red balls. It tests concepts such as arithmetic operations with large numbers, efficient loop calculations, and handling large input constraints, and is considered to be of medium to hard difficulty.",
        "program": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong N = sc.nextLong();\n\t\tlong A = sc.nextLong();\n\t\tlong B = sc.nextLong();\n\t\tlong ans = 0;\n\t\tif (N%(A+B) == 0) {\n\t\t\tans = A*(N/(A+B));\n\t\t} else if (A <= N%(A+B)) {\n\t\t\tans = A*(N/(A+B)) + A;\n\t\t} else {\n\t\t\tans = A*(N/(A+B)) + N%(A+B);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02759",
        "question": "Score : 100 points\n\nProblem StatementTakahashi wants to print a document with N pages double-sided, where two pages of data can be printed on one sheet of paper.\nAt least how many sheets of paper does he need?\n\nConstraints\nN is an integer.\n1 \\leq N \\leq 100\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the answer.\n\nSample Input 15\n\nSample Output 13\n\nBy printing the 1-st, 2-nd pages on the 1-st sheet, 3-rd and 4-th pages on the 2-nd sheet, and 5-th page on the 3-rd sheet, we can print all the data on 3 sheets of paper.\n\nSample Input 22\n\nSample Output 21\n\nSample Input 3100\n\nSample Output 350",
        "desc": "This Java problem requires determining the minimum number of double-sided sheets needed to print a document with N pages, testing concepts such as integer division and ceiling operations. It is classified as an easy-level programming challenge.",
        "program": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tSystem.out.println(N%2 == 0 ? N/2 : N/2+1);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02705",
        "question": "Score : 100 points\n\nProblem StatementPrint the circumference of a circle of radius R.\n\nConstraints\n1 \\leq R \\leq 100\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nR\n\nOutputPrint the circumference of the circle.\nYour output is considered correct if and only if its absolute or relative error from our answer is at most 10^{-2}.\n\nSample Input 11\n\nSample Output 16.28318530717958623200\n\nSince we accept an absolute or relative error of at most 10^{-2}, 6.28 is also an acceptable output, but 6 is not.\n\nSample Input 273\n\nSample Output 2458.67252742410977361942",
        "desc": "This Java problem requires calculating and printing the circumference of a circle given an integer radius, testing concepts such as mathematical computations, use of constants (like π), and handling floating-point precision. It is categorized as an easy-level programming question.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tint R = sc.nextInt();\n\t\tdouble ans = 2*R*3.14159265358979;\n\t\tSystem.out.println(ans);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02706",
        "question": "Score : 200 points\n\nProblem StatementTakahashi has N days of summer vacation.\nHis teacher gave him M summer assignments. It will take A_i days for him to do the i-th assignment.\nHe cannot do multiple assignments on the same day, or hang out on a day he does an assignment.\nWhat is the maximum number of days Takahashi can hang out during the vacation if he finishes all the assignments during this vacation?\nIf Takahashi cannot finish all the assignments during the vacation, print -1 instead.\n\nConstraints\n1 \\leq N \\leq 10^6\n1 \\leq M \\leq 10^4\n1 \\leq A_i \\leq 10^4\n\nInputInput is given from Standard Input in the following format:\nN M\nA_1 ... A_M\n\nOutputPrint the maximum number of days Takahashi can hang out during the vacation, or -1.\n\nSample Input 141 2\n5 6\n\nSample Output 130\n\nFor example, he can do the first assignment on the first 5 days, hang out on the next 30 days, and do the second assignment on the last 6 days of the vacation. In this way, he can safely spend 30 days hanging out.\n\nSample Input 210 2\n5 6\n\nSample Output 2-1\n\nHe cannot finish his assignments.\n\nSample Input 311 2\n5 6\n\nSample Output 30\n\nHe can finish his assignments, but he will have no time to hang out.\n\nSample Input 4314 15\n9 26 5 35 8 9 79 3 23 8 46 2 6 43 3\n\nSample Output 49",
        "desc": "This Java problem assesses the ability to process arrays, perform summations, and apply conditional logic to determine scheduling feasibility within given constraints. It is categorized as an easy to intermediate difficulty level, suitable for programmers familiar with basic algorithmic concepts and efficient handling of large input sizes.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint M = sc.nextInt();\n\t\tint count = 0;\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < M; i++) {\n\t\t\tcount += sc.nextInt();\n\t\t}\n\t\tif (count <= N) {\n\t\t\tans = N - count;\n\t\t} else {\n\t\t\tans = -1;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02707",
        "question": "Score : 300 points\n\nProblem StatementA company has N members, who are assigned ID numbers 1, ..., N.\nEvery member, except the member numbered 1, has exactly one immediate boss with a smaller ID number.\nWhen a person X is the immediate boss of a person Y, the person Y is said to be an immediate subordinate of the person X.\nYou are given the information that the immediate boss of the member numbered i is the member numbered A_i. For each member, find how many immediate subordinates it has.\n\nConstraints\n2 \\leq N \\leq 2 \\times 10^5\n1 \\leq A_i &lt; i\n\nInputInput is given from Standard Input in the following format:\nN\nA_2 ... A_N\n\nOutputFor each of the members numbered 1, 2, ..., N, print the number of immediate subordinates it has, in its own line.\n\nSample Input 15\n1 1 2 2\n\nSample Output 12\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\nSample Input 210\n1 1 1 1 1 1 1 1 1\n\nSample Output 29\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\nSample Input 37\n1 2 3 4 5 6\n\nSample Output 31\n1\n1\n1\n1\n1\n0",
        "desc": "The problem assesses the ability to efficiently process and count hierarchical relationships using array manipulation and frequency counting techniques, especially under large input constraints. It is categorized as a medium-difficulty Java programming challenge.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint[] count = new int[N];\n\t\tfor (int i = 0; i < N-1; i++) {\n\t\t\tcount[sc.nextInt()-1]++;\n\t\t}\n\t\tfor (int i : count) {\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03455",
        "question": "Score : 100 points\n\nProblem StatementAtCoDeer the deer found two positive integers, a and b.\nDetermine whether the product of a and b is even or odd.\n\nConstraints\n1 ≤ a,b ≤ 10000\na and b are integers.\n\nInputInput is given from Standard Input in the following format:\na b\n\nOutputIf the product is odd, print Odd; if it is even, print Even.\n\nSample Input 13 4\n\nSample Output 1Even\n\nAs 3 × 4 = 12 is even, print Even.\n\nSample Input 21 21\n\nSample Output 2Odd\n\nAs 1 × 21 = 21 is odd, print Odd.",
        "desc": "This Java problem assesses understanding of arithmetic operations and the use of conditional statements or modulus operator to determine the parity of a product. It is categorized as an easy-level question, suitable for beginners learning basic programming concepts.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a = sc.nextInt();\n\t\tint b = sc.nextInt();\n\t\tSystem.out.println((a*b)%2 == 0? \"Even\":\"Odd\");\n\t}\t\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03493",
        "question": "Score : 100 points\n\nProblem StatementSnuke has a grid consisting of three squares numbered 1, 2 and 3.\nIn each square, either 0 or 1 is written. The number written in Square i is s_i.\nSnuke will place a marble on each square that says 1.\nFind the number of squares on which Snuke will place a marble.\n\nConstraints\nEach of s_1, s_2 and s_3 is either 1 or 0.\n\nInputInput is given from Standard Input in the following format:\ns_{1}s_{2}s_{3}\n\nOutputPrint the answer.\n\nSample Input 1101\n\nSample Output 12\n\nA marble will be placed on Square 1 and 3.\n\nSample Input 2000\n\nSample Output 20\n\nNo marble will be placed on any square.",
        "desc": "This problem involves reading a three-digit binary input and counting the number of digits that are `1`, testing concepts like input handling, string manipulation, and conditional counting in Java. It is considered an easy-level programming challenge.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a = sc.nextInt();\n\t\tint b = sc.nextInt();\n\t\tint c = sc.nextInt();\n\t\tint count = 0;\n\t\tif (a == 1) count++;\n\t\tif (b == 1) count++;\n\t\tif (c == 1) count++;\n\t\tSystem.out.println(count);\n\t}\t\n}",
        "error_desc": "1. The program attempts to read three separate integers with `nextInt()`, but the input is provided as a single string of digits.\n2. The student does not correctly parse the individual digits from the input string, causing input mismatch errors.\n3. The program expects four digits based on the sample input \"1101\", while the problem specifies only three squares."
    },
    {
        "problem_id": "p03494",
        "question": "Score : 200 points\n\nProblem StatementThere are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.\n\nConstraints\n1 \\leq N \\leq 200\n1 \\leq A_i \\leq 10^9\n\nInputInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\nOutputPrint the maximum possible number of operations that Snuke can perform.\n\nSample Input 13\n8 12 40\n\nSample Output 12\n\nInitially, [8, 12, 40] are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.\nAfter the operation is performed once, [4, 6, 20] are written on the blackboard.\nSince all those integers are again even, he can perform the operation.\nAfter the operation is performed twice, [2, 3, 10] are written on the blackboard.\nNow, there is an odd number 3 on the blackboard, so he cannot perform the operation any more.\nThus, Snuke can perform the operation at most twice.\n\nSample Input 24\n5 6 8 10\n\nSample Output 20\n\nSince there is an odd number 5 on the blackboard already in the beginning, Snuke cannot perform the operation at all.\n\nSample Input 36\n382253568 723152896 37802240 379425024 404894720 471526144\n\nSample Output 38",
        "desc": "The problem assesses understanding of bit manipulation and number theory by requiring the calculation of the maximum number of times all given integers can be evenly divided by two. It is classified as a **Medium** difficulty level question.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tboolean key = true;\n\t\tint count = 0;\n\t\tint[] list = new int[N];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tint add = sc.nextInt();\n\t\t\tlist[i] = add;\n\t\t}\n\t\tout : while (key) {\n\t\t\tfor (int i = 0; i < list.length; i++) {\n\t\t\t\tif (list[i]%2 == 0) {\n\t\t\t\t\tlist[i] /= 2;\n\t\t\t\t} else {\n\t\t\t\t\tkey = false;\n\t\t\t\t\tbreak out;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\t\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03448",
        "question": "Score : 200 points\n\nProblem StatementYou have A 500-yen coins, B 100-yen coins and C 50-yen coins (yen is the currency of Japan).\nIn how many ways can we select some of these coins so that they are X yen in total?\nCoins of the same kind cannot be distinguished. Two ways to select coins are distinguished when, for some kind of coin, the numbers of that coin are different.\n\nConstraints\n0 \\leq A, B, C \\leq 50\nA + B + C \\geq 1\n50 \\leq X \\leq 20 000\nA, B and C are integers.\nX is a multiple of 50.\n\nInputInput is given from Standard Input in the following format:\nA\nB\nC\nX\n\nOutputPrint the number of ways to select coins.\n\nSample Input 12\n2\n2\n100\n\nSample Output 12\n\nThere are two ways to satisfy the condition:\n\nSelect zero 500-yen coins, one 100-yen coin and zero 50-yen coins.\nSelect zero 500-yen coins, zero 100-yen coins and two 50-yen coins.\n\nSample Input 25\n1\n0\n150\n\nSample Output 20\n\nNote that the total must be exactly X yen.\n\nSample Input 330\n40\n50\n6000\n\nSample Output 3213",
        "desc": "This Java problem requires calculating the number of distinct combinations of 500, 100, and 50-yen coins that sum to a specified total, given limited quantities of each coin type. It tests understanding of combinatorial enumeration or dynamic programming with constraints and is classified as a medium-difficulty problem.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint A = sc.nextInt();\n\t\tint B = sc.nextInt();\n\t\tint C = sc.nextInt();\n\t\tint X = sc.nextInt();\n\t\tint count = 0;\n\t\tfor (int i = 0; i <= A; i++) {\n\t\t\tfor (int j = 0; j <= B; j++) {\n\t\t\t\tfor (int k = 0; k <= C; k++) {\n\t\t\t\t\tif (((500 * i) + (100 * j) + (50 * k)) == X) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\t\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03285",
        "question": "Score : 200 points\n\nProblem StatementLa Confiserie d'ABC sells cakes at 4 dollars each and doughnuts at 7 dollars each.\nDetermine if there is a way to buy some of them for exactly N dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.\n\nConstraints\nN is an integer between 1 and 100, inclusive.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputIf there is a way to buy some cakes and some doughnuts for exactly N dollars, print Yes; otherwise, print No.\n\nSample Input 111\n\nSample Output 1Yes\n\nIf you buy one cake and one doughnut, the total will be 4 + 7 = 11 dollars.\n\nSample Input 240\n\nSample Output 2Yes\n\nIf you buy ten cakes, the total will be 4 \\times 10 = 40 dollars.\n\nSample Input 33\n\nSample Output 3No\n\nThe prices of cakes (4 dollars) and doughnuts (7 dollars) are both higher than 3 dollars, so there is no such way.",
        "desc": "This Java problem assesses the ability to implement loops or mathematical logic to determine if a target amount can be achieved using specific item prices, involving concepts like linear combinations and conditional checks. It is considered to have an easy to medium difficulty level.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tboolean key = false;\n\t\ta : while(true) {\n\t\t\tfor (int i = 0;; i++) {\n\t\t\t\tfor (int j = 0;; j++) {\n\t\t\t\t\tif ((4 * i + 7 * j) == N) {\n\t\t\t\t\t\tkey = true;\n\t\t\t\t\t\tbreak a;\n\t\t\t\t\t} else if (N < j) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(key?\"Yes\":\"No\");\n\t}\t\n}",
        "error_desc": "1. The outer `while(true)` loop creates an infinite loop.\n2. The `for` loops have no termination conditions, causing them to run indefinitely.\n3. The condition `N < j` is incorrect for breaking the inner loop and does not properly limit the iterations."
    },
    {
        "problem_id": "p03478",
        "question": "Score : 200 points\n\nProblem StatementFind the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\nConstraints\n1 \\leq N \\leq 10^4\n1 \\leq A \\leq B \\leq 36\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN A B\n\nOutputPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\nSample Input 120 2 5\n\nSample Output 184\n\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n\nSample Input 210 1 2\n\nSample Output 213\n\nSample Input 3100 4 16\n\nSample Output 34554",
        "desc": "This problem assesses the ability to iterate through a range of numbers and calculate the sum of their digits in base 10, applying conditional filters based on specified thresholds. It tests fundamental concepts in loops, digit manipulation, and conditional logic in Java, and is considered to be of medium difficulty.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint A = sc.nextInt();\n\t\tint B = sc.nextInt();\n\t\tint total = 0;\n\t\tfor (int i = 1; i <= N ; i++) {\n\t\t\tint count = 0;\n\t\t\tfor (String c :Integer.toString(i).split(\"\")) {\n\t\t\t\tcount += Integer.parseInt(c);\n\t\t\t}\n\t\t\tif (A <= count && count <= B) {\n\t\t\t\ttotal += i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(total);\n\t}\t\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02771",
        "question": "Score: 100 points\n\nProblem Statement\nA triple of numbers is said to be poor when two of those numbers are equal but the other number is different from those two numbers.\nYou will be given three integers A, B, and C. If this triple is poor, print Yes; otherwise, print No.\n\nConstraints\n\nA, B, and C are all integers between 1 and 9 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:\nA B C\n\nOutput\nIf the given triple is poor, print Yes; otherwise, print No.\n\nSample Input 15 7 5\n\nSample Output 1Yes\n\nA and C are equal, but B is different from those two numbers, so this triple is poor.\n\nSample Input 24 4 4\n\nSample Output 2No\n\nA, B, and C are all equal, so this triple is not poor.\n\nSample Input 34 9 6\n\nSample Output 3No\n\nSample Input 43 3 4\n\nSample Output 4Yes",
        "desc": "This Java problem requires determining if exactly two out of three given integers are equal while the third is different, testing the programmer’s ability to use conditional statements and equality checks. It is classified as an easy-level exercise suitable for beginners.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint A = sc.nextInt();\n\t\tint B = sc.nextInt();\n\t\tint C = sc.nextInt();\n\t\tif ((A == B && A == C) || (A != B && B != C && C != A)) {\n\t\t\tSystem.out.println(\"No\");\n\t\t} else {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02772",
        "question": "Score: 200 points\n\nProblem Statement\nYou are an immigration officer in the Kingdom of AtCoder. The document carried by an immigrant has some number of integers written on it, and you need to check whether they meet certain criteria.\nAccording to the regulation, the immigrant should be allowed entry to the kingdom if and only if the following condition is satisfied:\n\nAll even numbers written on the document are divisible by 3 or 5.\n\nIf the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, print DENIED.\n\nNotes\n\nThe condition in the statement can be rephrased as \"If x is an even number written on the document, x is divisible by 3 or 5\".\nHere \"if\" and \"or\" are logical terms.\n\nConstraints\n\nAll values in input are integers.\n1 \\leq N \\leq 100\n1 \\leq A_i \\leq 1000\n\nInput\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n\nOutput\nIf the immigrant should be allowed entry according to the regulation, print APPROVED; otherwise, print DENIED.\n\nSample Input 15\n6 7 9 10 31\n\nSample Output 1APPROVED\n\nThe even numbers written on the document are 6 and 10.\nAll of them are divisible by 3 or 5, so the immigrant should be allowed entry.\n\nSample Input 23\n28 27 24\n\nSample Output 2DENIED\n\n28 violates the condition, so the immigrant should not be allowed entry.",
        "desc": "The problem asks you to determine if all even numbers in a given list are divisible by either 3 or 5, requiring the use of array iteration, conditional statements, and logical operators in Java. It assesses understanding of basic input handling and logical logic, and is classified as a medium difficulty level.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tboolean key = true;\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tint num = sc.nextInt();\n\t\t\tif (num%2 == 0 && num%3 != 0 && num%5 != 0) key = false;\n\t\t}\n\t\tSystem.out.println(key?\"APPROVED\":\"DENIED\");\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03434",
        "question": "Score: 200 points\n\nProblem Statement\nWe have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.\n\nConstraints\n\nN is an integer between 1 and 100 (inclusive).\na_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:  \nN\na_1 a_2 a_3 ... a_N\n\nOutput\nPrint Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n\nSample Input 12\n3 1\n\nSample Output 12\n\nFirst, Alice will take the card with 3. Then, Bob will take the card with 1.\nThe difference of their scores will be 3 - 1 = 2.\n\nSample Input 23\n2 7 4\n\nSample Output 25\n\nFirst, Alice will take the card with 7. Then, Bob will take the card with 4. Lastly, Alice will take the card with 2. The difference of their scores will be 7 - 4 + 2 = 5. The difference of their scores will be 3 - 1 = 2.\n\nSample Input 34\n20 18 2 18\n\nSample Output 318",
        "desc": "This Java problem assesses the ability to implement dynamic programming or game theory strategies to determine the optimal score difference between two players alternately selecting cards. It tests concepts such as optimal strategy computation and state management, and is considered to be of medium to high difficulty.",
        "program": "import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint A = 0;\n\t\tint B = 0;\n\t\tInteger[] card = new Integer[N];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tcard[i] = sc.nextInt();\n\t\t}\n\t\tArrays.sort(card, Collections.reverseOrder());\n\t\tfor (int i = 0; i < card.length; i++) {\n\t\t\tif (i%2 == 0) A += card[i];\n\t\t\telse B += card[i];\n\t\t}\n\t\tSystem.out.println(A-B);\n\t}\t\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03470",
        "question": "Score : 200 points\n\nProblem StatementAn X-layered kagami mochi (X ≥ 1) is a pile of X round mochi (rice cake) stacked vertically where each mochi (except the bottom one) has a smaller diameter than that of the mochi directly below it. For example, if you stack three mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, you have a 3-layered kagami mochi; if you put just one mochi, you have a 1-layered kagami mochi.\nLunlun the dachshund has N round mochi, and the diameter of the i-th mochi is d_i centimeters. When we make a kagami mochi using some or all of them, at most how many layers can our kagami mochi have?\n\nConstraints\n1 ≤ N ≤ 100\n1 ≤ d_i ≤ 100\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nd_1\n:\nd_N\n\nOutputPrint the maximum number of layers in a kagami mochi that can be made.\n\nSample Input 14\n10\n8\n8\n6\n\nSample Output 13\n\nIf we stack the mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, we have a 3-layered kagami mochi, which is the maximum number of layers.\n\nSample Input 23\n15\n15\n15\n\nSample Output 21\n\nWhen all the mochi have the same diameter, we can only have a 1-layered kagami mochi.\n\nSample Input 37\n50\n30\n50\n100\n50\n80\n30\n\nSample Output 34",
        "desc": "This Java problem requires determining the maximum number of layers in a kagami mochi by selecting and ordering mochi with strictly decreasing diameters, effectively testing understanding of dynamic programming and longest decreasing subsequence algorithms. It is classified as a medium-difficulty question suitable for intermediate programmers.",
        "program": "import java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tSet<Integer> d = new HashSet<>();\n\t\tfor (int i = 0; i < N; i++) d.add(sc.nextInt());\n\t\tSystem.out.println(d.size());\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03471",
        "question": "Score : 300 points\n\nProblem StatementThe commonly used bills in Japan are 10000-yen, 5000-yen and 1000-yen bills. Below, the word \"bill\" refers to only these.\nAccording to Aohashi, he received an otoshidama (New Year money gift) envelope from his grandfather that contained N bills for a total of Y yen, but he may be lying. Determine whether such a situation is possible, and if it is, find a possible set of bills contained in the envelope. Assume that his grandfather is rich enough, and the envelope was large enough.\n\nConstraints\n1 ≤ N ≤ 2000\n1000 ≤ Y ≤ 2 × 10^7\nN is an integer.\nY is a multiple of 1000.\n\nInputInput is given from Standard Input in the following format:\nN Y\n\nOutputIf the total value of N bills cannot be Y yen, print -1 -1 -1.\nIf the total value of N bills can be Y yen, let one such set of bills be \"x 10000-yen bills, y 5000-yen bills and z 1000-yen bills\", and print x, y, z with spaces in between. If there are multiple possibilities, any of them may be printed.\n\nSample Input 19 45000\n\nSample Output 14 0 5\n\nIf the envelope contained 4 10000-yen bills and 5 1000-yen bills, he had 9 bills and 45000 yen in total. It is also possible that the envelope contained 9 5000-yen bills, so the output 0 9 0 is also correct.\n\nSample Input 220 196000\n\nSample Output 2-1 -1 -1\n\nWhen the envelope contained 20 bills in total, the total value would be 200000 yen if all the bills were 10000-yen bills, and would be at most 195000 yen otherwise, so it would never be 196000 yen.\n\nSample Input 31000 1234000\n\nSample Output 314 27 959\n\nThere are also many other possibilities.\n\nSample Input 42000 20000000\n\nSample Output 42000 0 0",
        "desc": "This Java problem tests understanding of combinatorial logic and efficient algorithm implementation to solve integer linear equations involving specific bill denominations. It is classified as a medium to hard difficulty level due to the need for optimized searching within given constraints.",
        "program": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint Y = sc.nextInt();\n\t\tList<int[]> ansList = new ArrayList<>();\n\t\tint[] ans = new int[3];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\tfor (int k = 0; k < N; k++) {\n\t\t\t\t\tif (10000 * i + 5000 * j + 1000 * k == Y) {\n\t\t\t\t\t\tans[0] = i;\n\t\t\t\t\t\tans[1] = j;\n\t\t\t\t\t\tans[2] = k;\n\t\t\t\t\t\tansList.add(ans);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ansList.isEmpty()) System.out.println(\"-1 \" +  \"-1 \" + \"-1\");\n\t\telse {\n\t\t\tans = ansList.get(0);\n\t\t\tSystem.out.println(ans[0] + \" \" + ans[1] + \" \" + ans[2]);\n\t\t}\n\t}\n}",
        "error_desc": "1. The code does not verify that the sum of the bills `i + j + k` equals `N`.\n2. It reuses the same `ans` array for all valid combinations, causing all entries in `ansList` to reference the same array.\n3. The nested loops iterate from `0` to `N-1` for each bill type without considering the remaining number of bills, leading to unnecessary computations."
    },
    {
        "problem_id": "p03435",
        "question": "Score: 300 points\n\nProblem Statement\nWe have a 3 \\times 3 grid. A number c_{i, j} is written in the square (i, j), where (i, j) denotes the square at the i-th row from the top and the j-th column from the left.\nAccording to Takahashi, there are six integers a_1, a_2, a_3, b_1, b_2, b_3 whose values are fixed, and the number written in the square (i, j) is equal to a_i + b_j.\nDetermine if he is correct.  \n\nConstraints\n\nc_{i, j} \\ (1 \\leq i \\leq 3, 1 \\leq j \\leq 3) is an integer between 0 and 100 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:\nc_{1,1} c_{1,2} c_{1,3}\nc_{2,1} c_{2,2} c_{2,3}\nc_{3,1} c_{3,2} c_{3,3}\n\nOutput\nIf Takahashi's statement is correct, print Yes; otherwise, print No.\n\nSample Input 11 0 1\n2 1 2\n1 0 1\n\nSample Output 1Yes\n\nTakahashi is correct, since there are possible sets of integers such as: a_1=0,a_2=1,a_3=0,b_1=1,b_2=0,b_3=1.\n\nSample Input 22 2 2\n2 1 2\n2 2 2\n\nSample Output 2No\n\nTakahashi is incorrect in this case.\n\nSample Input 30 8 8\n0 8 8\n0 8 8\n\nSample Output 3Yes\n\nSample Input 41 8 6\n2 9 7\n0 7 7\n\nSample Output 4No",
        "desc": "This Java problem asks whether a given 3×3 grid of integers can be expressed as the sum of two fixed sets of integers, one for each row and one for each column, effectively testing knowledge of matrix manipulation and system of equations. It is categorized as a high-difficulty challenge, typically suited for advanced programming contests.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint Y = sc.nextInt();\n\t\tfor (int i = 0; i <= N; i++) {\n\t\t\tfor (int j = 0; j <= N-i; j++) {\t\n\t\t\t\tint k = N - i - j;\n\t\t\t\tif (10000 * i + 5000 * j + 1000 * k == Y && i+j+k == N)\n\t\t\t\t\tSystem.out.println(i + \" \" + j + \" \" + k); \t\t\t\n\t\t\t}\t\n\t\t}\n\t\tSystem.out.println(\"-1 \" +  \"-1 \" + \"-1\");\n\t}\n}",
        "error_desc": "1. The code reads two integers `N` and `Y` instead of a 3×3 grid of integers as required by the problem.\n2. The logic implemented is for calculating combinations of bills, which does not relate to determining `a_i` and `b_j` values.\n3. The program outputs three integers or `-1 -1 -1` instead of printing \"Yes\" or \"No\" based on the grid validation.\n4. Variable names `N` and `Y` are irrelevant to the problem, which requires handling grid values `c_{i,j}`.\n5. The nested loops and conditionals do not attempt to verify if `c_{i,j} = a_i + b_j` for the given grid.\n6. The code does not account for the constraints of the 3×3 grid, leading to incorrect input handling and output."
    },
    {
        "problem_id": "p03854",
        "question": "Score : 300 points\n\nProblem StatementYou are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.\n\nConstraints\n1≦|S|≦10^5\nS consists of lowercase English letters.\n\nInputThe input is given from Standard Input in the following format:\nS\n\nOutputIf it is possible to obtain S = T, print YES. Otherwise, print NO.\n\nSample Input 1erasedream\n\nSample Output 1YES\n\nAppend erase and dream at the end of T in this order, to obtain S = T.\n\nSample Input 2dreameraser\n\nSample Output 2YES\n\nAppend dream and eraser at the end of T in this order, to obtain S = T.\n\nSample Input 3dreamerer\n\nSample Output 3NO",
        "desc": "This Java problem assesses understanding of string manipulation and dynamic programming by requiring the determination of whether a given string can be constructed by sequentially appending specific substrings (\"dream\", \"dreamer\", \"erase\", \"eraser\"). It is categorized as a challenging problem (300 points) due to the need for efficient handling of large input sizes and careful pattern matching.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString S = sc.next();\n\t\tString ans = S.replace(\"dreamer\", \"\");\n\t\tString ans2 = ans.replace(\"eraser\", \"\");\n\t\tString ans3 = ans2.replace(\"dream\", \"\");\n\t\tString ans4 = ans3.replace(\"erase\", \"\");\n\t\tSystem.out.println(ans4.equals(\"\") ? \"YES\" :\"NO\");\n\t}\n}",
        "error_desc": "1. The `replace` method removes all occurrences of \"dreamer\", \"eraser\", \"dream\", and \"erase\" without considering their order in the string.\n2. The code does not process the string sequentially from the end, which is necessary to accurately determine if S can be formed by appending the allowed substrings.\n3. Multiple replace operations can lead to partial removals that do not reflect valid append sequences, resulting in incorrect verification."
    },
    {
        "problem_id": "p02766",
        "question": "Score : 200 points\n\nProblem StatementGiven is an integer N. Find the number of digits that N has in base K.\n\nNotesFor information on base-K representation, see Positional notation - Wikipedia.\n\nConstraints\nAll values in input are integers.\n1 \\leq N \\leq 10^9\n2 \\leq K \\leq 10\n\nInputInput is given from Standard Input in the following format:\nN K\n\nOutputPrint the number of digits that N has in base K.\n\nSample Input 111 2\n\nSample Output 14\n\nIn binary, 11 is represented as 1011.\n\nSample Input 21010101 10\n\nSample Output 27\n\nSample Input 3314159265 3\n\nSample Output 318",
        "desc": "This Java problem asks for calculating the number of digits an integer \\( N \\) has when represented in base \\( K \\). It tests understanding of number base conversions and mathematical calculations related to positional notation, and is categorized as an intermediate difficulty level.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(Integer.toString(sc.nextInt(), sc.nextInt()).length());\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02887",
        "question": "Score : 300 points\n\nProblem StatementThere are N slimes lining up from left to right. The colors of these slimes will be given as a string S of length N consisting of lowercase English letters. The i-th slime from the left has the color that corresponds to the i-th character of S.\nAdjacent slimes with the same color will fuse into one larger slime without changing the color. If there were a slime adjacent to this group of slimes before fusion, that slime is now adjacent to the new larger slime.\nUltimately, how many slimes will be there?\n\nConstraints\n1 \\leq N \\leq 10^5\n|S| = N\nS consists of lowercase English letters.\n\nInputInput is given from Standard Input in the following format:\nN\nS\n\nOutputPrint the final number of slimes.\n\nSample Input 110\naabbbbaaca\n\nSample Output 15\n\nUltimately, these slimes will fuse into abaca.\n\nSample Input 25\naaaaa\n\nSample Output 21\n\nAll the slimes will fuse into one.\n\nSample Input 320\nxxzaffeeeeddfkkkkllq\n\nSample Output 310",
        "desc": "This Java problem requires processing a string to merge adjacent identical characters efficiently, testing concepts like string manipulation, stack usage, and linear algorithm design suitable for handling large inputs. It is classified as a challenging (hard) level problem.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tString C = sc.next();\n\t\tint count = 1;\n\t\tfor (int i = 1; i < C.length(); i++) {\n\t\t\tif (!C.substring(i - 1, i).equals(C.substring(i, i + 1))) count++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03457",
        "question": "Score : 300 points\n\nProblem StatementAtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.\n\nConstraints\n1 ≤ N ≤ 10^5\n0 ≤ x_i ≤ 10^5\n0 ≤ y_i ≤ 10^5\n1 ≤ t_i ≤ 10^5\nt_i &lt; t_{i+1} (1 ≤ i ≤ N-1)\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nt_1 x_1 y_1\nt_2 x_2 y_2\n:\nt_N x_N y_N\n\nOutputIf AtCoDeer can carry out his plan, print Yes; if he cannot, print No.\n\nSample Input 12\n3 1 2\n6 1 1\n\nSample Output 1Yes\n\nFor example, he can travel as follows: (0,0), (0,1), (1,1), (1,2), (1,1), (1,0), then (1,1).\n\nSample Input 21\n2 100 100\n\nSample Output 2No\n\nIt is impossible to be at (100,100) two seconds after being at (0,0).\n\nSample Input 32\n5 1 1\n100 1 1\n\nSample Output 3No",
        "desc": "The problem evaluates the ability to determine the feasibility of a sequence of moves on a 2D grid within specific time constraints, utilizing concepts like Manhattan distance and efficient iteration for large datasets. It is categorized as a challenging (hard) level Java programming question.",
        "program": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint t = 0, x = 0, y = 0;\n\t\tboolean flg = true;\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tint nowT = sc.nextInt();\n\t\t\tint nowX = sc.nextInt();\n\t\t\tint nowY = sc.nextInt();\n\t\t\tint time = nowT - t;\n\t\t\tint dist = Math.abs(nowX - x) + Math.abs(nowY - y);\n\t\t\tif (time < dist || time%2 != dist%2) flg = false;\n\t\t\tt = time;\n\t\t\tx = nowX;\n\t\t\ty = nowY;\n\t\t}\n\t\tSystem.out.println(flg ? \"Yes\" : \"No\");\n\t}\n}",
        "error_desc": "1. The variable `t` is incorrectly updated to `time` instead of `nowT`, leading to incorrect time difference calculations in subsequent iterations."
    },
    {
        "problem_id": "p02713",
        "question": "Score : 300 points\n\nProblem StatementFind \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\nHere \\gcd(a,b,c) denotes the greatest common divisor of a, b, and c.\n\nConstraints\n1 \\leq K \\leq 200\nK is an integer.\n\nInputInput is given from Standard Input in the following format:\nK\n\nOutputPrint the value of \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\n\nSample Input 12\n\nSample Output 19\n\n\\gcd(1,1,1)+\\gcd(1,1,2)+\\gcd(1,2,1)+\\gcd(1,2,2)\n+\\gcd(2,1,1)+\\gcd(2,1,2)+\\gcd(2,2,1)+\\gcd(2,2,2)\n=1+1+1+1+1+1+1+2=9\nThus, the answer is 9.\n\nSample Input 2200\n\nSample Output 210813692",
        "desc": "This Java problem requires calculating the sum of the greatest common divisors (GCD) for all triplets \\((a, b, c)\\) where each variable ranges from 1 to \\(K\\), testing knowledge of nested loops, efficient GCD computation, and optimization techniques to handle higher constraints. Rated as a challenging (300 points) problem, it assesses the ability to implement mathematical concepts effectively within programming constraints.",
        "program": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint K = sc.nextInt();\n\t\tint count = 0;\n\t\tfor (int a = 1; a <= K; a++) {\n\t\t\tint max = a;\n\t\t\tfor (int b = 1; b <= K; b++) {\n\t\t\t\tif (max < b) max = b;\n\t\t\t\t for (int c = 1; c <= K; c++) {\n\t\t\t\t\t if (max < c) max = c;\n\t\t\t\t\t int com = 0;\n\t\t\t\t\t for (int i = max; 1 <= i ; i--) {\n\t\t\t\t\t\t if (a%i == 0 && b%i == 0 && c%i == 0) {\n\t\t\t\t\t\t\t com = i;\n\t\t\t\t\t\t\t break;\n\t\t\t\t\t\t }\n\t\t\t\t\t }\n\t\t\t\t\t count += com;\n\t\t\t\t }\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}",
        "error_desc": "1. The algorithm uses four nested loops, resulting in a time complexity that exceeds the time limit.\n2. The GCD is calculated by iterating from the maximum value down to one instead of using a more efficient method like the Euclidean algorithm.\n3. The `count` variable is declared as an `int`, which can cause integer overflow for larger values of `K`."
    },
    {
        "problem_id": "p02777",
        "question": "Score : 100 points\n\nProblem Statement\nWe have A balls with the string S written on each of them and B balls with the string T written on each of them.\nFrom these balls, Takahashi chooses one with the string U written on it and throws it away.\nFind the number of balls with the string S and balls with the string T that we have now.\n\nConstraints\n\nS, T, and U are strings consisting of lowercase English letters.\nThe lengths of S and T are each between 1 and 10 (inclusive).\nS \\not= T\nS=U or T=U.\n1 \\leq A,B \\leq 10\nA and B are integers.\n\nInput\nInput is given from Standard Input in the following format:\nS T\nA B\nU\n\nOutput\nPrint the answer, with space in between.\n\nSample Input 1red blue\n3 4\nred\n\nSample Output 12 4\n\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\n\nSample Input 2red blue\n5 5\nblue\n\nSample Output 25 4\n\nTakahashi chose a ball with blue written on it and threw it away.\nNow we have five balls with the string S and four balls with the string T.",
        "desc": "This Java problem assesses understanding of string handling, conditional logic, and basic arithmetic operations. It is categorized as an easy-level challenge, requiring students to manipulate counts based on string comparisons and output the updated values accordingly.",
        "program": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString S = sc.next();\n\t\tString T = sc.next();\n\t\tint A = sc.nextInt();\n\t\tint B = sc.nextInt();\n\t\tString U = sc.next();\n\t\tif (S.equals(U)) A--;\n\t\telse B--;\n\t\tSystem.out.println(A + \" \" + B);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02778",
        "question": "Score : 200 points\n\nProblem Statement\nGiven is a string S. Replace every character in S with x and print the result.\n\nConstraints\n\nS is a string consisting of lowercase English letters.\nThe length of S is between 1 and 100 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:\nS\n\nOutput\nReplace every character in S with x and print the result.\n\nSample Input 1sardine\n\nSample Output 1xxxxxxx\n\nReplacing every character in S with x results in xxxxxxx.\n\nSample Input 2xxxx\n\nSample Output 2xxxx\n\nSample Input 3gone\n\nSample Output 3xxxx",
        "desc": "This Java problem assesses basic string manipulation skills, specifically replacing characters within a string. It is categorized as an easy-level task, suitable for beginners learning string handling and simple iteration or built-in string methods.",
        "program": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString S = sc.next();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < S.length(); i++) {\n\t\t\tsb.append(\"x\");\n\t\t}\n\t\tSystem.out.println(sb.toString());\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02773",
        "question": "Score: 300 points\n\nProblem Statement\nWe have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.\n\nConstraints\n\n1 \\leq N \\leq 2 \\times 10^5\nS_i (1 \\leq i \\leq N) are strings consisting of lowercase English letters.\nThe length of S_i (1 \\leq i \\leq N) is between 1 and 10 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\nOutput\nPrint all strings in question in lexicographical order.\n\nSample Input 17\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n\nSample Output 1beet\nvet\n\nbeet and vet are written on two sheets each, while beat, bed, and bet are written on one vote each. Thus, we should print the strings beet and vet.\n\nSample Input 28\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\n\nSample Output 2buffalo\n\nSample Input 37\nbass\nbass\nkick\nkick\nbass\nkick\nkick\n\nSample Output 3kick\n\nSample Input 44\nushi\ntapu\nnichia\nkun\n\nSample Output 4kun\nnichia\ntapu\nushi",
        "desc": "This Java problem evaluates the ability to efficiently handle large datasets using data structures like hash maps for counting string occurrences and applying sorting algorithms for lexicographical ordering. It is classified as a medium to hard difficulty level, testing skills in string manipulation, frequency counting, and optimized data processing.",
        "program": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tMap<String, Integer> map = new HashMap<>();\n\t\tint max = 0;\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tString s = sc.next();\n\t\t\tif (map.containsKey(s)) {\n\t\t\t\tmap.put(s,map.get(s) + 1);\n\t\t\t} else {\n\t\t\t\tmap.put(s,1);\n\t\t\t}\n\t\t\tmax = Math.max(max, map.get(s));\n\t\t}\n\t\tfor (String key : map.keySet()) {\n\t\t\tif (map.get(key) == max) {\n\t\t\t\tSystem.out.println(key);\n\t\t\t}\n\t\t}\n\t}\n}",
        "error_desc": "1. The program does not sort the output strings in lexicographical order as required.\n2. Iterating over `map.keySet()` with a `HashMap` results in unordered output, violating the output order constraint."
    },
    {
        "problem_id": "p02755",
        "question": "Score : 300 points\n\nProblem StatementFind the price of a product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax levied on it is A yen and B yen, respectively. (Yen is the currency of Japan.)\nHere, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.\nIf multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print -1.\n\nConstraints\n1 \\leq A \\leq B \\leq 100\nA and B are integers.\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputIf there is a price that satisfies the condition, print an integer representing the lowest such price; otherwise, print -1.\n\nSample Input 12 2\n\nSample Output 125\n\nIf the price of a product before tax is 25 yen, the amount of consumption tax levied on it is:\n\nWhen the consumption tax rate is 8 percent: \\lfloor 25 \\times 0.08 \\rfloor = \\lfloor 2 \\rfloor = 2 yen.\nWhen the consumption tax rate is 10 percent: \\lfloor 25 \\times 0.1 \\rfloor = \\lfloor 2.5 \\rfloor = 2 yen.\n\nThus, the price of 25 yen satisfies the condition. There are other possible prices, such as 26 yen, but print the minimum such price, 25.\n\nSample Input 28 10\n\nSample Output 2100\n\nIf the price of a product before tax is 100 yen, the amount of consumption tax levied on it is:\n\nWhen the consumption tax rate is 8 percent: \\lfloor 100 \\times 0.08 \\rfloor = 8 yen.\nWhen the consumption tax rate is 10 percent: \\lfloor 100 \\times 0.1 \\rfloor = 10 yen.\n\nSample Input 319 99\n\nSample Output 3-1\n\nThere is no price before tax satisfying this condition, so print -1.",
        "desc": "This Java problem assesses knowledge of integer arithmetic, the use of floor operations, and efficient search algorithms to determine a minimal valid price under given tax constraints. It is categorized as medium to hard difficulty due to the need for careful handling of rounding and iterating within specified bounds.",
        "program": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint A = sc.nextInt();\n\t\tint B = sc.nextInt();\n\t\tint ans = -1;\n\t\tfor (int i = 0; i <= 1250; i++) {\n\t\t\tif (8*i/100 ==  A && i/10 == B) {\n\t\t\t\tans = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02779",
        "question": "Score : 300 points\n\nProblem StatementGiven is a sequence of integers A_1, A_2, ..., A_N.\nIf its elements are pairwise distinct, print YES; otherwise, print NO.\n\nConstraints\n2 ≤ N ≤ 200000\n1 ≤ A_i ≤ 10^9\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nA_1 ... A_N\n\nOutputIf the elements of the sequence are pairwise distinct, print YES; otherwise, print NO.\n\nSample Input 15\n2 6 1 4 5\n\nSample Output 1YES\n\nThe elements are pairwise distinct.\n\nSample Input 26\n4 1 3 1 6 2\n\nSample Output 2NO\n\nThe second and fourth elements are identical.\n\nSample Input 32\n10000000 10000000\n\nSample Output 3NO",
        "desc": "This Java problem asks the programmer to determine whether all elements in a large integer sequence are unique, testing knowledge of efficient data structures such as HashSet or sorting techniques to handle up to 200,000 elements. It is classified as medium difficulty due to the need for optimal performance with large inputs.",
        "program": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tSet<Integer> set = new HashSet<>();\n\t\tfor (int i = 0; i < N; i++) set.add(sc.nextInt());\n\t\tSystem.out.println(N == set.size() ? \"YES\" : \"NO\");\n\t}\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02783",
        "question": "Score : 100 points\n\nProblem StatementServal is fighting with a monster.\nThe health of the monster is H.\nIn one attack, Serval can decrease the monster's health by A.\nThere is no other way to decrease the monster's health.\nServal wins when the monster's health becomes 0 or below.\nFind the number of attacks Serval needs to make before winning.\n\nConstraints\n1 \\leq H \\leq 10^4\n1 \\leq A \\leq 10^4\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nH A\n\nOutputPrint the number of attacks Serval needs to make before winning.\n\nSample Input 110 4\n\nSample Output 13\n\nAfter one attack, the monster's health will be 6.\nAfter two attacks, the monster's health will be 2.\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make three attacks to win.\n\nSample Input 21 10000\n\nSample Output 21\n\nSample Input 310000 1\n\nSample Output 310000",
        "desc": "This Java problem assesses the ability to perform integer arithmetic and implement ceiling division to determine the minimum number of attacks needed to reduce a monster's health to zero or below. It is classified as an easy-level problem, suitable for beginners practicing basic control structures and mathematical operations.",
        "program": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint H = sc.nextInt();\n\t\tint A = sc.nextInt();\n\t\tSystem.out.println(H%A == 0 ? H/A : H/A + 1);\n\t}\n}",
        "error_desc": "No error."
    }
]