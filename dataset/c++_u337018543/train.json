[
    {
        "problem_id": "p03478",
        "question": "Score : 200 points\n\nProblem StatementFind the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\nConstraints\n1 \\leq N \\leq 10^4\n1 \\leq A \\leq B \\leq 36\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN A B\n\nOutputPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\nSample Input 120 2 5\n\nSample Output 184\n\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n\nSample Input 210 1 2\n\nSample Output 213\n\nSample Input 3100 4 16\n\nSample Output 34554",
        "desc": "This C++ problem requires iterating through integers up to N, calculating each number’s digit sum in base 10, and summing those numbers whose digit sums fall within the range [A, B]. It tests fundamental concepts such as loops, digit manipulation, and conditional logic, and is categorized as a medium-difficulty problem.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() \n{\n  int n,a,b,ans = 0;\n  cin >> n >> a >> b;\n  for(int i = 1; i <= n; i++)\n  {\n    int sum = 0;\n    int x = i/10;\n    int y = x/10;\n    int z = y/10;\n    if(i%10 != 0) sum += i%10;\n    if(x%10 != 0) sum += x%10;\n    if(y%10 != 0) sum += y%10;\n    if(z%10 != 0) sum += z%10;\n    if(z/10 != 0) sum += z/10;\n    if(a <= sum && sum <= b) ans += i;\n  }\n  cout << ans << endl;\n}",
        "error_desc": "1. The program includes the non-standard header `<bits/stdc++.h>`, which may not be supported by the compiler.\n2. The program redundantly includes both `<string>` and `<string.h>`, which is unnecessary."
    },
    {
        "problem_id": "p03494",
        "question": "Score : 200 points\n\nProblem StatementThere are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.\n\nConstraints\n1 \\leq N \\leq 200\n1 \\leq A_i \\leq 10^9\n\nInputInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\nOutputPrint the maximum possible number of operations that Snuke can perform.\n\nSample Input 13\n8 12 40\n\nSample Output 12\n\nInitially, [8, 12, 40] are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.\nAfter the operation is performed once, [4, 6, 20] are written on the blackboard.\nSince all those integers are again even, he can perform the operation.\nAfter the operation is performed twice, [2, 3, 10] are written on the blackboard.\nNow, there is an odd number 3 on the blackboard, so he cannot perform the operation any more.\nThus, Snuke can perform the operation at most twice.\n\nSample Input 24\n5 6 8 10\n\nSample Output 20\n\nSince there is an odd number 5 on the blackboard already in the beginning, Snuke cannot perform the operation at all.\n\nSample Input 36\n382253568 723152896 37802240 379425024 404894720 471526144\n\nSample Output 38",
        "desc": "This C++ problem asks for the maximum number of times a list of positive integers can be simultaneously halved, requiring the implementation of bit manipulation or factor-counting techniques to determine the minimum number of divisible by two across all numbers. It tests understanding of integer operations and efficient looping, and is considered to have an easy to medium difficulty level.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() \n{\n  int n, min, A[200], ans[200] = {};\n  cin >> n;\n  for(int i = 0; i < n; i++)\n    cin >> A[i];\n  for(int i = 0; i < n; i++)\n  {\n    if(A[i]%2 == 0) \n    {\n      A[i] /= 2;\n      ans[i]++;\n      i--;\n    }\n  }\n  min = ans[0];\n  for(int i = 1; i < n; i++)\n    if(min > ans[i]) min = ans[i];\n  cout << min << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03448",
        "question": "Score : 200 points\n\nProblem StatementYou have A 500-yen coins, B 100-yen coins and C 50-yen coins (yen is the currency of Japan).\nIn how many ways can we select some of these coins so that they are X yen in total?\nCoins of the same kind cannot be distinguished. Two ways to select coins are distinguished when, for some kind of coin, the numbers of that coin are different.\n\nConstraints\n0 \\leq A, B, C \\leq 50\nA + B + C \\geq 1\n50 \\leq X \\leq 20 000\nA, B and C are integers.\nX is a multiple of 50.\n\nInputInput is given from Standard Input in the following format:\nA\nB\nC\nX\n\nOutputPrint the number of ways to select coins.\n\nSample Input 12\n2\n2\n100\n\nSample Output 12\n\nThere are two ways to satisfy the condition:\n\nSelect zero 500-yen coins, one 100-yen coin and zero 50-yen coins.\nSelect zero 500-yen coins, zero 100-yen coins and two 50-yen coins.\n\nSample Input 25\n1\n0\n150\n\nSample Output 20\n\nNote that the total must be exactly X yen.\n\nSample Input 330\n40\n50\n6000\n\nSample Output 3213",
        "desc": "This C++ problem assesses the ability to implement combinatorial enumeration and utilize nested loops or dynamic programming to count the number of distinct ways to reach a specific sum using limited quantities of different coin denominations. It is classified as a medium-difficulty problem, suitable for testing fundamental algorithmic and problem-solving skills.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() \n{\n  int a,b,c,x,ans = 0;\n  cin >> a >> b >> c >> x;\n  for(int i = 0; i <= a; i++)\n  {\n    for(int j = 0; j <= b; j++)\n    {\n      for(int k = 0; k <= c; k++)\n      {\n        if(500*i + 100*j + 50*k == x)\n        {\n          ans++;\n          break;\n        }\n      }\n    }\n  }\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03434",
        "question": "Score: 200 points\n\nProblem Statement\nWe have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.\n\nConstraints\n\nN is an integer between 1 and 100 (inclusive).\na_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n\nInput\nInput is given from Standard Input in the following format:  \nN\na_1 a_2 a_3 ... a_N\n\nOutput\nPrint Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n\nSample Input 12\n3 1\n\nSample Output 12\n\nFirst, Alice will take the card with 3. Then, Bob will take the card with 1.\nThe difference of their scores will be 3 - 1 = 2.\n\nSample Input 23\n2 7 4\n\nSample Output 25\n\nFirst, Alice will take the card with 7. Then, Bob will take the card with 4. Lastly, Alice will take the card with 2. The difference of their scores will be 7 - 4 + 2 = 5. The difference of their scores will be 3 - 1 = 2.\n\nSample Input 34\n20 18 2 18\n\nSample Output 318",
        "desc": "This C++ problem involves determining the optimal score difference in a two-player card game by implementing dynamic programming or game theory strategies. It tests concepts such as dynamic programming, optimal strategy formulation, and understanding of turn-based game mechanics, and is considered to be of intermediate difficulty.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() \n{\n  int n, a[100], sum = 0;\n  cin >> n;\n  for(int i = 0; i < n; i++) cin >> a[i];\n  for(int j = 0; j < n; j++)\n  {\n    int max = 0;\n    for(int i = 0; i < n; i++)\n      if(max < a[i]) max = a[i];\n    for(int i = 0; i < n; i++)\n    {\n      if(a[i] == max)\n      {\n        a[i] = 0;\n        break;\n      }\n    }\n    if(j%2 == 0) sum += max;\n    else sum -= max;\n  }\n  cout << sum << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03470",
        "question": "Score : 200 points\n\nProblem StatementAn X-layered kagami mochi (X ≥ 1) is a pile of X round mochi (rice cake) stacked vertically where each mochi (except the bottom one) has a smaller diameter than that of the mochi directly below it. For example, if you stack three mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, you have a 3-layered kagami mochi; if you put just one mochi, you have a 1-layered kagami mochi.\nLunlun the dachshund has N round mochi, and the diameter of the i-th mochi is d_i centimeters. When we make a kagami mochi using some or all of them, at most how many layers can our kagami mochi have?\n\nConstraints\n1 ≤ N ≤ 100\n1 ≤ d_i ≤ 100\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nd_1\n:\nd_N\n\nOutputPrint the maximum number of layers in a kagami mochi that can be made.\n\nSample Input 14\n10\n8\n8\n6\n\nSample Output 13\n\nIf we stack the mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, we have a 3-layered kagami mochi, which is the maximum number of layers.\n\nSample Input 23\n15\n15\n15\n\nSample Output 21\n\nWhen all the mochi have the same diameter, we can only have a 1-layered kagami mochi.\n\nSample Input 37\n50\n30\n50\n100\n50\n80\n30\n\nSample Output 34",
        "desc": "This C++ problem asks for the maximum number of layers in a kagami mochi by finding the longest strictly decreasing subsequence of mochi diameters, using dynamic programming or similar algorithms. It tests understanding of sequence handling and optimization techniques, and is rated as medium difficulty.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() \n{\n  int n, ans = 0, d[100];\n  cin >> n;\n  for(int i = 0; i < n; i++) cin >> d[i];\n  for(int i = 0; i < n; i++)\n  {\n    for(int j = i+1; j < n; j++)\n      if(d[i] == d[j]) d[j] = 0;\n  }\n  for(int i = 0; i < n; i++)\n    if(d[i] != 0) ans++;\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03471",
        "question": "Score : 300 points\n\nProblem StatementThe commonly used bills in Japan are 10000-yen, 5000-yen and 1000-yen bills. Below, the word \"bill\" refers to only these.\nAccording to Aohashi, he received an otoshidama (New Year money gift) envelope from his grandfather that contained N bills for a total of Y yen, but he may be lying. Determine whether such a situation is possible, and if it is, find a possible set of bills contained in the envelope. Assume that his grandfather is rich enough, and the envelope was large enough.\n\nConstraints\n1 ≤ N ≤ 2000\n1000 ≤ Y ≤ 2 × 10^7\nN is an integer.\nY is a multiple of 1000.\n\nInputInput is given from Standard Input in the following format:\nN Y\n\nOutputIf the total value of N bills cannot be Y yen, print -1 -1 -1.\nIf the total value of N bills can be Y yen, let one such set of bills be \"x 10000-yen bills, y 5000-yen bills and z 1000-yen bills\", and print x, y, z with spaces in between. If there are multiple possibilities, any of them may be printed.\n\nSample Input 19 45000\n\nSample Output 14 0 5\n\nIf the envelope contained 4 10000-yen bills and 5 1000-yen bills, he had 9 bills and 45000 yen in total. It is also possible that the envelope contained 9 5000-yen bills, so the output 0 9 0 is also correct.\n\nSample Input 220 196000\n\nSample Output 2-1 -1 -1\n\nWhen the envelope contained 20 bills in total, the total value would be 200000 yen if all the bills were 10000-yen bills, and would be at most 195000 yen otherwise, so it would never be 196000 yen.\n\nSample Input 31000 1234000\n\nSample Output 314 27 959\n\nThere are also many other possibilities.\n\nSample Input 42000 20000000\n\nSample Output 42000 0 0",
        "desc": "This C++ problem challenges the programmer to determine if a specific total amount can be achieved using a given number of Japanese yen bills of denominations 10,000, 5,000, and 1,000, requiring combinatorial logic and efficient iteration techniques. It tests concepts such as nested loops, conditional checks, and optimization for handling constraints, and is considered to be of medium to high difficulty level.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() \n{\n  int n, y; \n  cin >> n >> y;\n  for(int i = 0; i <= n; i++) \n  {\n    for(int j = 0; j <= n; j++)\n    {\n      for(int k = 0; k <= n; k++)\n      {\n        if(i+j+k == n)\n        {\n          if(10000*i + 5000*j + 1000*k == y)\n          {\n            cout << i << \" \" << j << \" \"\n            << k << endl;\n            goto Exit;\n          }\n        }\n      }\n    }\n  }\n  cout << \"-1\" << \" \" << \"-1\" << \" \"\n  << \"-1\" << endl;\n  Exit: ;\n  return 0;\n}",
        "error_desc": "1. The program uses three nested loops each running up to `n`, resulting in a time complexity of O(n³) which is too slow.\n2. It does not optimize the ranges of `i`, `j`, and `k` based on the total amount `y`, leading to unnecessary iterations.\n3. The use of `goto` for exiting the loops is inefficient and contributes to the time limit being exceeded."
    },
    {
        "problem_id": "p03469",
        "question": "Score : 100 points\n\nProblem StatementOn some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy/mm/dd format. For example, January 23, 2018 should be written as 2018/01/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.\n\nConstraints\nS is a string of length 10.\nThe first eight characters in S are 2017/01/.\nThe last two characters in S are digits and represent an integer between 1 and 31 (inclusive).\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputReplace the first four characters in S with 2018 and print it.\n\nSample Input 12017/01/07\n\nSample Output 12018/01/07\n\nSample Input 22017/01/31\n\nSample Output 22018/01/31",
        "desc": "This C++ problem requires manipulating a fixed-format string by replacing specific characters, testing knowledge of string indexing and modification. It is categorized as an easy-level challenge, suitable for beginners practicing basic string operations.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() \n{\n  int n, y; \n  cin >> n >> y;\n  for(int i = 0; i <= n; i++) \n  {\n    for(int j = 0; j <= n; j++)\n    {\n      int k = (y - (10000*i + 5000*j)) / 1000;\n      if(i+j+k == n && k > 0)\n      {\n        cout << i << \" \" << j << \" \"\n        << k << endl;\n        goto Exit;\n      }\n    }\n  }\n  cout << \"-1\" << \" \" << \"-1\" << \" \"\n  << \"-1\" << endl;\n  Exit: ;\n  return 0;\n}",
        "error_desc": "1. The program reads two integers `n` and `y` instead of a single string `S` as input.\n2. It uses nested loops and arithmetic operations that are unrelated to modifying the date string.\n3. The code does not perform any string manipulation to replace the first four characters with `2018`.\n4. It outputs three integers separated by spaces instead of the modified date string.\n5. The use of the `goto` statement is unnecessary and inappropriate for this problem."
    },
    {
        "problem_id": "p03457",
        "question": "Score : 300 points\n\nProblem StatementAtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.\n\nConstraints\n1 ≤ N ≤ 10^5\n0 ≤ x_i ≤ 10^5\n0 ≤ y_i ≤ 10^5\n1 ≤ t_i ≤ 10^5\nt_i &lt; t_{i+1} (1 ≤ i ≤ N-1)\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nt_1 x_1 y_1\nt_2 x_2 y_2\n:\nt_N x_N y_N\n\nOutputIf AtCoDeer can carry out his plan, print Yes; if he cannot, print No.\n\nSample Input 12\n3 1 2\n6 1 1\n\nSample Output 1Yes\n\nFor example, he can travel as follows: (0,0), (0,1), (1,1), (1,2), (1,1), (1,0), then (1,1).\n\nSample Input 21\n2 100 100\n\nSample Output 2No\n\nIt is impossible to be at (100,100) two seconds after being at (0,0).\n\nSample Input 32\n5 1 1\n100 1 1\n\nSample Output 3No",
        "desc": "This C++ problem tests understanding of grid traversal, Manhattan distance calculations, and feasibility checks based on time and movement constraints. It requires efficiently processing up to 10⁵ steps, making it a challenging problem typically classified as medium to hard difficulty.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() \n{\n  int n, t[100002],x[100002],y[100002];\n  cin >> n;\n  t[0] = 0; x[0] = 0; y[0] = 0;\n  for(int i = 1; i <= n; i++) \n    cin >> t[i] >> x[i] >> y[i];\n  string ans = \"Yes\";\n  for(int i = 1; i <= n; i++)\n  {\n    int T = t[i] - t[i-1];\n    int X = abs(x[i] - x[i-1]);\n    int Y = abs(y[i] - y[i-1]);\n    if(X+Y == T) continue;\n    else if((X+Y-T)%2 == 0 && X+Y < T) continue;\n    else ans = \"No\";\n  }\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03854",
        "question": "Score : 300 points\n\nProblem StatementYou are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.\n\nConstraints\n1≦|S|≦10^5\nS consists of lowercase English letters.\n\nInputThe input is given from Standard Input in the following format:\nS\n\nOutputIf it is possible to obtain S = T, print YES. Otherwise, print NO.\n\nSample Input 1erasedream\n\nSample Output 1YES\n\nAppend erase and dream at the end of T in this order, to obtain S = T.\n\nSample Input 2dreameraser\n\nSample Output 2YES\n\nAppend dream and eraser at the end of T in this order, to obtain S = T.\n\nSample Input 3dreamerer\n\nSample Output 3NO",
        "desc": "This C++ problem requires determining if a given string `S` can be constructed by sequentially appending any combination of the substrings \"dream\", \"dreamer\", \"erase\", or \"eraser\". It tests knowledge of string manipulation and algorithmic techniques such as greedy algorithms or dynamic programming, and is classified as a medium to hard difficulty level problem.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <set>\nusing namespace std;\nint main() \n{\n  string s,t;\n  cin >> s;\n  reverse(s.begin(),s.end());\n  string ans = \"YES\";\n  for(int i = 0; ; )\n  {\n    if(s.size() == 0) break;\n    if(s.substr(0,2) == \"re\")\n    {\n      if(s.substr(0,6) == \"resare\")\n        s.erase(0,6);\n      else if(s.substr(0,7) == \"remaerd\")\n        s.erase(0,7);\n      else\n      {\n        ans = \"NO\";\n        break;\n      }\n    }\n    else\n    {\n      if(s.substr(0,5) == \"esare\")\n        s.erase(0,5);\n      else if(s.substr(0,6) == \"maerd\")\n        s.erase(0,6);\n      else\n      {\n        ans = \"NO\";\n        break;\n      }\n    }\n  }  \n  cout << ans << endl;\n}",
        "error_desc": "1. Incorrect substring length when checking for `maerd`, it should use 5 characters instead of 6.\n2. The condition `s.substr(0,6) == \"maerd\"` does not match the reversed string correctly.\n3. Included unnecessary headers like `<bits/stdc++.h>`, `<string.h>`, and `<set>` which are not used in the code."
    },
    {
        "problem_id": "p03574",
        "question": "Score : 200 points\n\nProblem StatementYou are given an H × W grid.\nThe squares in the grid are described by H strings, S_1,...,S_H.\nThe j-th character in the string S_i corresponds to the square at the i-th row from the top and j-th column from the left (1 \\leq i \\leq H,1 \\leq j \\leq W).\n. stands for an empty square, and # stands for a square containing a bomb.  \nDolphin is interested in how many bomb squares are horizontally, vertically or diagonally adjacent to each empty square.\n(Below, we will simply say \"adjacent\" for this meaning. For each square, there are at most eight adjacent squares.)\nHe decides to replace each . in our H strings with a digit that represents the number of bomb squares adjacent to the corresponding empty square.  \nPrint the strings after the process.  \n\nConstraints\n1 \\leq H,W \\leq 50\nS_i is a string of length W consisting of # and ..\n\nInputInput is given from Standard Input in the following format:  \nH W\nS_1\n:\nS_H\n\nOutputPrint the H strings after the process.\nThe i-th line should contain a string T_i of length W, where the j-th character in T_i corresponds to the square at the i-th row from the top and j-th row from the left in the grid (1 \\leq i \\leq H, 1 \\leq j \\leq W).  \n\nSample Input 13 5\n.....\n.#.#.\n.....\n\nSample Output 111211\n1#2#1\n11211\n\nFor example, let us observe the empty square at the first row from the top and first column from the left.\nThere is one bomb square adjacent to this empty square: the square at the second row and second column.\nThus, the . corresponding to this empty square is replaced with 1.  \n\nSample Input 23 5\n#####\n#####\n#####\n\nSample Output 2#####\n#####\n#####\n\nIt is possible that there is no empty square.  \n\nSample Input 36 6\n#####.\n#.#.##\n####.#\n.#..#.\n#.##..\n#.#...\n\nSample Output 3#####3\n#8#7##\n####5#\n4#65#2\n#5##21\n#4#310",
        "desc": "This C++ problem requires processing a 2D grid to replace each empty cell with the number of adjacent bomb cells, testing knowledge of array manipulation and neighbor traversal techniques. It is classified as a medium difficulty level problem.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int h, w, ans[50][50];\n  string s[50];\n  cin >> h >> w;\n  for(int i = 0; i < h; i++) cin >> s[i];\n  for(int i = 0; i < h; i++) {\n    for(int j = 0; j < w; j++) {\n      int num = -1;\n      ans[i][j] = num;\n      if(s[i].substr(j,1)==\"#\") continue;\n      if(i-1  >= 0 ) {\n        if(j-1 >= 0) \n          if(s[i-1].substr(j-1,1)==\"#\") num++;\n        if(s[i-1].substr(j,1)==\"#\") num++;\n        if(j+1 < w)  \n          if(s[i-1].substr(j+1,1)==\"#\") num++;\n      }\n        if(j-1 >= 0) \n          if(s[i].substr(j-1,1)==\"#\") num++;\n        if(j+1 < w)  \n          if(s[i].substr(j+1,1)==\"#\") num++;\n      if(i+1 < h) {\n        if(j-1 >= 0) \n          if(s[i+1].substr(j-1,1)==\"#\") num++;\n        if(s[i+1].substr(j,1)==\"#\") num++;\n        if(j+1 < w)  \n        if(s[i+1].substr(j+1,1)==\"#\") num++;\n      }\n      ans[i][j] = num+1;\n    }\n  }\n  for(int i = 0; i < h; i++) {\n    for(int j = 0; j < w; j++) {\n      if(ans[i][j] == -1) cout << \"#\";\n      else cout << ans[i][j];\n    }\n    cout << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03632",
        "question": "Score : 200 points\n\nProblem StatementAlice and Bob are controlling a robot. They each have one switch that controls the robot.\nAlice started holding down her button A second after the start-up of the robot, and released her button B second after the start-up.\nBob started holding down his button C second after the start-up, and released his button D second after the start-up.\nFor how many seconds both Alice and Bob were holding down their buttons?\n\nConstraints\n0≤A&lt;B≤100\n0≤C&lt;D≤100\nAll input values are integers.\n\nInputInput is given from Standard Input in the following format:  \nA B C D\n\nOutputPrint the length of the duration (in seconds) in which both Alice and Bob were holding down their buttons.\n\nSample Input 10 75 25 100\n\nSample Output 150\n\nAlice started holding down her button 0 second after the start-up of the robot, and released her button 75 second after the start-up.\nBob started holding down his button 25 second after the start-up, and released his button 100 second after the start-up.\nTherefore, the time when both of them were holding down their buttons, is the 50 seconds from 25 seconds after the start-up to 75 seconds after the start-up.\n\nSample Input 20 33 66 99\n\nSample Output 20\n\nAlice and Bob were not holding their buttons at the same time, so the answer is zero seconds.\n\nSample Input 310 90 20 80\n\nSample Output 360",
        "desc": "This C++ problem requires calculating the overlapping duration between two time intervals, testing understanding of interval arithmetic and conditional logic. It is classified as an easy to medium difficulty level.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int a,b,c,d,ans;\n  cin >> a >> b >> c >> d;\n  if(a < c) {\n    if(b < c) ans = 0;\n    else {\n      if(b < d) ans = b-c;\n      else ans = d-c;\n    }\n  } else {\n    if(d < a) ans = 0;\n    else {\n      if(d < b) ans = d-a;\n      else ans = b-a;\n    }\n  }\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03963",
        "question": "Score : 200 points\n\nProblem StatementThere are N balls placed in a row.\nAtCoDeer the deer is painting each of these in one of the K colors of his paint cans.\nFor aesthetic reasons, any two adjacent balls must be painted in different colors.\nFind the number of the possible ways to paint the balls.\n\nConstraints\n1≦N≦1000\n2≦K≦1000\nThe correct answer is at most 2^{31}-1.\n\nInputThe input is given from Standard Input in the following format:\nN K\n\nOutputPrint the number of the possible ways to paint the balls.\n\nSample Input 12 2\n\nSample Output 12\n\nWe will denote the colors by 0 and 1. There are two possible ways: we can either paint the left ball in color 0 and the right ball in color 1, or paint the left in color 1 and the right in color 0.\n\nSample Input 21 10\n\nSample Output 210\n\nSince there is only one ball, we can use any of the ten colors to paint it. Thus, the answer is ten.",
        "desc": "This C++ problem asks for the number of ways to paint N balls with K colors such that no two adjacent balls have the same color, testing combinatorial reasoning and dynamic programming techniques. It is categorized as a medium difficulty challenge suitable for intermediate programmers.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int n, k;\n  cin >> n >> k;\n  long ans = k;\n  for(int i = 1; i < n; i++)\n    ans *= k-1;\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03861",
        "question": "Score : 200 points\n\nProblem StatementYou are given nonnegative integers a and b (a ≤ b), and a positive integer x.\nAmong the integers between a and b, inclusive, how many are divisible by x?\n\nConstraints\n0 ≤ a ≤ b ≤ 10^{18}\n1 ≤ x ≤ 10^{18}\n\nInputThe input is given from Standard Input in the following format:\na b x\n\nOutputPrint the number of the integers between a and b, inclusive, that are divisible by x.\n\nSample Input 14 8 2\n\nSample Output 13\n\nThere are three integers between 4 and 8, inclusive, that are divisible by 2: 4, 6 and 8.\n\nSample Input 20 5 1\n\nSample Output 26\n\nThere are six integers between 0 and 5, inclusive, that are divisible by 1: 0, 1, 2, 3, 4 and 5.\n\nSample Input 39 9 2\n\nSample Output 30\n\nThere are no integer between 9 and 9, inclusive, that is divisible by 2.\n\nSample Input 41 1000000000000000000 3\n\nSample Output 4333333333333333333\n\nWatch out for integer overflows.",
        "desc": "This C++ problem requires understanding of arithmetic operations, particularly counting numbers divisible by a given integer within a large range, and careful handling of potential integer overflows using appropriate data types. It tests knowledge of mathematical reasoning and efficient implementation for handling inputs up to 10¹⁸, positioning it at an intermediate difficulty level.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int a,b,x, ans = 0;\n  cin >> a >> b >> x;\n  for(int i = 0; a <= b; i++) {\n    if(a%x == 0) ans++;\n    a++;\n  }\n  cout << ans << endl;\n}",
        "error_desc": "1. Variables `a`, `b`, and `x` are declared as `int` instead of `long long`, which cannot handle values up to 10¹⁸.\n2. The `ans` variable is also declared as `int`, causing overflow when the count exceeds the `int` limit.\n3. The program uses a brute-force loop to iterate from `a` to `b`, resulting in inefficiency for large input ranges."
    },
    {
        "problem_id": "p03730",
        "question": "Score : 200 points\n\nProblem StatementWe ask you to select some number of positive integers, and calculate the sum of them.\nIt is allowed to select as many integers as you like, and as large integers as you wish.\nYou have to follow these, however: each selected integer needs to be a multiple of A, and you need to select at least one integer.\nYour objective is to make the sum congruent to C modulo B.\nDetermine whether this is possible.\nIf the objective is achievable, print YES. Otherwise, print NO.\n\nConstraints\n1 ≤ A ≤ 100\n1 ≤ B ≤ 100\n0 ≤ C &lt; B\n\nInputInput is given from Standard Input in the following format:\nA B C\n\nOutputPrint YES or NO.\n\nSample Input 17 5 1\n\nSample Output 1YES\n\nFor example, if you select 7 and 14, the sum 21 is congruent to 1 modulo 5.\n\nSample Input 22 2 1\n\nSample Output 2NO\n\nThe sum of even numbers, no matter how many, is never odd.\n\nSample Input 31 100 97\n\nSample Output 3YES\n\nYou can select 97, since you may select multiples of 1, that is, all integers.\n\nSample Input 440 98 58\n\nSample Output 4YES\n\nSample Input 577 42 36\n\nSample Output 5NO",
        "desc": "The problem asks whether a sum of any number of positive multiples of integer A can be congruent to C modulo B. It tests understanding of modular arithmetic, number theory (especially concepts like greatest common divisors), and possibly dynamic programming or state exploration techniques. The difficulty level is **Medium**.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int a,b,c;\n  string ans = \"YES\";\n  cin >> a >> b >> c;\n  for(int i = 1; i < 1000; i++)\n    if(a*i % b == c) goto Exit;\n  ans = \"NO\";\n  Exit: ;\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03680",
        "question": "Score : 200 points\n\nProblem StatementTakahashi wants to gain muscle, and decides to work out at AtCoder Gym.\nThe exercise machine at the gym has N buttons, and exactly one of the buttons is lighten up.\nThese buttons are numbered 1 through N.\nWhen Button i is lighten up and you press it, the light is turned off, and then Button a_i will be lighten up. It is possible that i=a_i.\nWhen Button i is not lighten up, nothing will happen by pressing it.\nInitially, Button 1 is lighten up. Takahashi wants to quit pressing buttons when Button 2 is lighten up.\nDetermine whether this is possible. If the answer is positive, find the minimum number of times he needs to press buttons.\n\nConstraints\n2 ≤ N ≤ 10^5\n1 ≤ a_i ≤ N\n\nInputInput is given from Standard Input in the following format:\nN\na_1\na_2\n:\na_N\n\nOutputPrint -1 if it is impossible to lighten up Button 2.\nOtherwise, print the minimum number of times we need to press buttons in order to lighten up Button 2.\n\nSample Input 13\n3\n1\n2\n\nSample Output 12\n\nPress Button 1, then Button 3.\n\nSample Input 24\n3\n4\n1\n2\n\nSample Output 2-1\n\nPressing Button 1 lightens up Button 3, and vice versa, so Button 2 will never be lighten up.\n\nSample Input 35\n3\n3\n4\n2\n4\n\nSample Output 33",
        "desc": "This C++ problem requires determining the minimum number of button presses to transition from Button 1 to Button 2 in a system of N buttons with specific toggle rules. It assesses knowledge of graph traversal algorithms, such as breadth-first search, and is classified as a medium to hard difficulty level problem.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int n, a[110000],ans = 1, flag = 0;\n  cin >> n;\n  for(int i = 1; i <= n; i++)\n    cin >> a[i];\n  int x = a[1];\n  for(int i = 0; i < n; i++) {\n    if(x == 2) {\n      flag = 1;\n      break;\n    }\n    x = a[x];\n    ans++;\n  }\n  if(flag) cout << ans << endl;\n  else cout << \"-1\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03679",
        "question": "Score : 100 points\n\nProblem StatementTakahashi has a strong stomach. He never gets a stomachache from eating something whose \"best-by\" date is at most X days earlier.\nHe gets a stomachache if the \"best-by\" date of the food is X+1 or more days earlier, though.\nOther than that, he finds the food delicious if he eats it not later than the \"best-by\" date. Otherwise, he does not find it delicious.\nTakahashi bought some food A days before the \"best-by\" date, and ate it B days after he bought it.\nWrite a program that outputs delicious if he found it delicious, safe if he did not found it delicious but did not get a stomachache either, and dangerous if he got a stomachache.\n\nConstraints\n1 ≤ X,A,B ≤ 10^9\n\nInputInput is given from Standard Input in the following format:\nX A B\n\nOutputPrint delicious if Takahashi found the food delicious; print safe if he neither found it delicious nor got a stomachache; print dangerous if he got a stomachache.\n\nSample Input 14 3 6\n\nSample Output 1safe\n\nHe ate the food three days after the \"best-by\" date. It was not delicious or harmful for him.\n\nSample Input 26 5 1\n\nSample Output 2delicious\n\nHe ate the food by the \"best-by\" date. It was delicious for him.\n\nSample Input 33 7 12\n\nSample Output 3dangerous\n\nHe ate the food five days after the \"best-by\" date. It was harmful for him.",
        "desc": "This C++ problem assesses understanding of conditional statements and arithmetic operations by requiring determination of a food item's status based on comparison of dates and thresholds. It is categorized as an easy-level problem suitable for beginners.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int x,a,b;\n  cin >> x >> a >> b;\n  if(b-a <= 0) cout << \"delicious\" << endl;\n  else if(b-a < x) cout << \"safe\" << endl;\n  else cout << \"dangerous\" << endl;\n}",
        "error_desc": "1. The second condition uses `b - a < x` instead of `b - a <= x`, causing cases where `b - a` equals `x` to be incorrectly classified as dangerous.\n2. The variables `x`, `a`, and `b` are declared as `int`, which may not handle input values up to 10^9 correctly.\n3. The program includes unnecessary headers such as `<string>`, `<string.h>`, `<ctype.h>`, and `<algorithm>`."
    },
    {
        "problem_id": "p03796",
        "question": "Score : 200 points\n\nProblem StatementSnuke loves working out. He is now exercising N times.\nBefore he starts exercising, his power is 1. After he exercises for the i-th time, his power gets multiplied by i.\nFind Snuke's power after he exercises N times. Since the answer can be extremely large, print the answer modulo 10^{9}+7.\n\nConstraints\n1 ≤ N ≤ 10^{5}\n\nInputThe input is given from Standard Input in the following format:\nN\n\nOutputPrint the answer modulo 10^{9}+7.\n\nSample Input 13\n\nSample Output 16\n\nAfter Snuke exercises for the first time, his power gets multiplied by 1 and becomes 1.\nAfter Snuke exercises for the second time, his power gets multiplied by 2 and becomes 2.\nAfter Snuke exercises for the third time, his power gets multiplied by 3 and becomes 6.\n\nSample Input 210\n\nSample Output 23628800\n\nSample Input 3100000\n\nSample Output 3457992974\n\nPrint the answer modulo 10^{9}+7.",
        "desc": "This problem requires calculating the factorial of a given integer \\( N \\) modulo \\( 10^9+7 \\), testing the programmer's understanding of factorial computation, efficient looping or recursion, and modular arithmetic to handle large numbers. It is categorized as an **easy to medium** difficulty level problem.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int n;\n  long ans = 1;\n  cin >> n;\n  for(int i = 2; i <= n; i++) {\n    ans *= i;\n    ans %= (1000000000+7);\n  }\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03545",
        "question": "Score : 300 points\n\nProblem StatementSitting in a station waiting room, Joisino is gazing at her train ticket.\nThe ticket is numbered with four digits A, B, C and D in this order, each between 0 and 9 (inclusive).\nIn the formula A op1 B op2 C op3 D = 7, replace each of the symbols op1, op2 and op3 with + or - so that the formula holds.\nThe given input guarantees that there is a solution. If there are multiple solutions, any of them will be accepted.\n\nConstraints\n0≤A,B,C,D≤9\nAll input values are integers.\nIt is guaranteed that there is a solution.\n\nInputInput is given from Standard Input in the following format:\nABCD\n\nOutputPrint the formula you made, including the part =7.\nUse the signs + and -.\nDo not print a space between a digit and a sign.\n\nSample Input 11222\n\nSample Output 11+2+2+2=7\n\nThis is the only valid solution.\n\nSample Input 20290\n\nSample Output 20-2+9+0=7\n\n0 - 2 + 9 - 0 = 7 is also a valid solution.\n\nSample Input 33242\n\nSample Output 33+2+4-2=7",
        "desc": "This C++ problem challenges programmers to parse a sequence of digits and insert arithmetic operators (`+` or `-`) between them to achieve a specific result, testing skills in brute force search, string manipulation, and algorithm implementation. It is classified as a high-difficulty (300 points) problem, suitable for advanced competitive programming scenarios.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int a,b,c,d;\n  string s;\n  cin >> s;\n  a = s[0] - '0'; b = s[1] - '0';\n  c = s[2] - '0'; d = s[3] - '0';\n  if(a+b+c+d == 7) \n    cout << a << \"+\" << b << \"+\" << c << \"+\" << d << endl;\n  else if(a+b+c-d == 7)\n    cout << a << \"+\" << b << \"+\" << c << \"-\" << d << endl;\n  else if(a+b-c+d == 7)\n    cout << a << \"+\" << b << \"-\" << c << \"+\" << d << endl;\n  else if(a+b-c-d == 7)\n    cout << a << \"+\" << b << \"-\" << c << \"-\" << d << endl;\n  else if(a-b+c+d == 7)\n    cout << a << \"-\" << b << \"+\" << c << \"+\" << d << endl;\n  else if(a-b-c+d == 7)\n    cout << a << \"-\" << b << \"-\" << c << \"+\" << d << endl;\n  else if(a-b+c-d == 7)\n    cout << a << \"-\" << b << \"+\" << c << \"-\" << d << endl;\n  else if(a-b-c-d == 7)\n    cout << a << \"-\" << b << \"-\" << c << \"-\" << d << endl;\n}",
        "error_desc": "1. The code assumes each character in the input string corresponds to a single digit A, B, C, and D, which is incorrect for multi-digit numbers.\n2. The output does not include the required \"=7\" at the end of the formula.\n3. The program fails to handle inputs where the first number A consists of two digits."
    },
    {
        "problem_id": "p03543",
        "question": "Score : 100 points\n\nProblem StatementWe call a 4-digit integer with three or more consecutive same digits, such as 1118, good.\nYou are given a 4-digit integer N. Answer the question: Is N good?\n\nConstraints\n1000 ≤ N ≤ 9999\nN is an integer.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputIf N is good, print Yes; otherwise, print No.\n\nSample Input 11118\n\nSample Output 1Yes\n\nN is good, since it contains three consecutive 1.\n\nSample Input 27777\n\nSample Output 2Yes\n\nAn integer is also good when all the digits are the same.\n\nSample Input 31234\n\nSample Output 3No",
        "desc": "This C++ problem asks whether a given 4-digit integer contains three or more consecutive identical digits, testing concepts such as digit manipulation and conditional logic. It is considered to be of easy to moderate difficulty.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int n,a,b,c,d;\n  cin >> n;\n  a = n/1000; \n  n %= 1000;\n  b = n/100;\n  n %= 100;\n  c = n/10;\n  d = n%10;\n  if(a == b && b == c) cout << \"Yes\" << endl;\n  else if(b == c && c == d) cout << \"Yes\" << endl;\n  else cout << \"No\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03544",
        "question": "Score : 200 points\n\nProblem StatementIt is November 18 now in Japan. By the way, 11 and 18 are adjacent Lucas numbers.\nYou are given an integer N. Find the N-th Lucas number.\nHere, the i-th Lucas number L_i is defined as follows:\n\nL_0=2\nL_1=1\nL_i=L_{i-1}+L_{i-2} (i≥2)\n\nConstraints\n1≤N≤86\nIt is guaranteed that the answer is less than 10^{18}.\nN is an integer.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the N-th Lucas number.\n\nSample Input 15\n\nSample Output 111\n\nL_0=2\nL_1=1\nL_2=L_0+L_1=3\nL_3=L_1+L_2=4\nL_4=L_2+L_3=7\nL_5=L_3+L_4=11\n\nThus, the 5-th Lucas number is 11.\n\nSample Input 286\n\nSample Output 2939587134549734843",
        "desc": "This C++ problem requires computing the N-th Lucas number using iterative or dynamic programming techniques, testing knowledge of linear recurrence relations and efficient handling of large integers within given constraints. It is classified as a medium-difficulty challenge.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int n;\n  long L,L1 = 1,L2 = 2;\n  cin >> n;\n  L = L1 + L2;\n  for(int i = 2; i < n; i++) {\n    L2 = L1;\n    L1 = L;\n    L = L1 + L2;\n  }\n  cout << L << endl;\n}",
        "error_desc": "1. Incorrect initial values for `L1` and `L2`, they should represent `L0=2` and `L1=1`.\n2. The program does not correctly handle the case when `N` is 1, resulting in an incorrect output.\n3. Uses `long` instead of `long long`, which may cause overflow for larger values of `N`."
    },
    {
        "problem_id": "p03573",
        "question": "Score : 100 points\n\nProblem StatementYou are given three integers, A, B and C.\nAmong them, two are the same, but the remaining one is different from the rest.\nFor example, when A=5,B=7,C=5, A and C are the same, but B is different.\nFind the one that is different from the rest among the given three integers.  \n\nConstraints\n-100 \\leq A,B,C \\leq 100 \nA, B and C are integers.\nThe input satisfies the condition in the statement.\n\nInputInput is given from Standard Input in the following format:  \nA B C\n\nOutputAmong A, B and C, print the integer that is different from the rest.\n\nSample Input 15 7 5\n\nSample Output 17\n\nThis is the same case as the one in the statement.\n\nSample Input 21 1 7\n\nSample Output 27\n\nIn this case, C is the one we seek.\n\nSample Input 3-100 100 100\n\nSample Output 3-100",
        "desc": "This C++ problem requires identifying the unique integer among three given numbers where two are identical, testing fundamental concepts such as conditional statements and comparison operations. It is classified as an easy-level exercise, suitable for beginners to practice basic logic implementation and decision-making structures.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int a,b,c;\n  cin >> a >> b >> c;\n  if(a == b) cout << c << endl;\n  if(b == c) cout << a << endl;\n  if(a == c) cout << b << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03631",
        "question": "Score : 100 points\n\nProblem StatementYou are given a three-digit positive integer N.\nDetermine whether N is a palindromic number.\nHere, a palindromic number is an integer that reads the same backward as forward in decimal notation.\n\nConstraints\n100≤N≤999\nN is an integer.\n\nInputInput is given from Standard Input in the following format:  \nN\n\nOutputIf N is a palindromic number, print Yes; otherwise, print No.\n\nSample Input 1575\n\nSample Output 1Yes\n\nN=575 is also 575 when read backward, so it is a palindromic number. You should print Yes.\n\nSample Input 2123\n\nSample Output 2No\n\nN=123 becomes 321 when read backward, so it is not a palindromic number. You should print No.\n\nSample Input 3812\n\nSample Output 3No",
        "desc": "This C++ problem requires determining whether a given three-digit integer is a palindrome by comparing its digits. It tests fundamental concepts such as integer manipulation and conditional statements, and is classified as an easy difficulty level.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  string n;\n  cin >> n;\n  if(n[0] == n[2]) cout << \"Yes\" << endl;\n  else cout << \"No\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p03339",
        "question": "Score : 300 points\n\nProblem StatementThere are N people standing in a row from west to east.\nEach person is facing east or west.\nThe directions of the people is given as a string S of length N.\nThe i-th person from the west is facing east if S_i = E, and west if S_i = W.\nYou will appoint one of the N people as the leader, then command the rest of them to face in the direction of the leader.\nHere, we do not care which direction the leader is facing.\nThe people in the row hate to change their directions, so you would like to select the leader so that the number of people who have to change their directions is minimized.\nFind the minimum number of people who have to change their directions.\n\nConstraints\n2 \\leq N \\leq 3 \\times 10^5\n|S| = N\nS_i is E or W.\n\nInputInput is given from Standard Input in the following format:\nN\nS\n\nOutputPrint the minimum number of people who have to change their directions.\n\nSample Input 15\nWEEWW\n\nSample Output 11\n\nAssume that we appoint the third person from the west as the leader.\nThen, the first person from the west needs to face east and has to turn around.\nThe other people do not need to change their directions, so the number of people who have to change their directions is 1 in this case.\nIt is not possible to have 0 people who have to change their directions, so the answer is 1.\n\nSample Input 212\nWEWEWEEEWWWE\n\nSample Output 24\n\nSample Input 38\nWWWWWEEE\n\nSample Output 33",
        "desc": "The problem requires selecting a leader from a row of N people each facing east or west, such that the minimum number of individuals must change their direction to match the leader’s orientation. It tests understanding of string manipulation and efficient algorithm design for large inputs, and is classified as a high-difficulty (300 points) C++ programming challenge.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int n,ans[310000] = {0};\n  string s;\n  cin >> n >> s;\n  for(int i = 0; i < n; i++) {\n    for(int j = 0; j < n; j++) {\n      if(j < i) {\n        if(s[j] != 'E') ans[i]++;\n      }\n      else if(i < j) {\n        if(s[j] != 'W') ans[i]++;\n      }\n    }\n  }\n  int m = n;\n  for(int i = 0; i < n; i++)\n    m = min(m,ans[i]);\n  cout << m << endl;\n}",
        "error_desc": "1. The use of nested loops results in a time complexity of O(N²), which is inefficient for N up to 3×10⁵.\n2. Initializing an array `ans` with a fixed size of 310000 can lead to unnecessary memory usage.\n3. The approach does not employ optimized algorithms or data structures to minimize the number of direction changes efficiently."
    },
    {
        "problem_id": "p03337",
        "question": "Score : 100 points\n\nProblem StatementYou are given two integers A and B.\nFind the largest value among A+B, A-B and A \\times B.\n\nConstraints\n-1000 \\leq A,B \\leq 1000\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputPrint the largest value among A+B, A-B and A \\times B.\n\nSample Input 13 1\n\nSample Output 14\n\n3+1=4, 3-1=2 and 3 \\times 1=3. The largest among them is 4.\n\nSample Input 24 -2\n\nSample Output 26\n\nThe largest is 4 - (-2) = 6.\n\nSample Input 30 0\n\nSample Output 30",
        "desc": "This C++ problem evaluates the ability to perform basic arithmetic operations (addition, subtraction, multiplication) and determine the maximum value among computed results using conditional logic or comparison functions. It is considered an easy-level question, appropriate for beginners practicing fundamental programming concepts.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int a,b;\n  cin >> a >> b;\n  if(a+b > a-b)\n    cout << max(a+b,a-b) << endl;\n  else cout << max(a*b,a-b) << endl;\n}",
        "error_desc": "1. The code only compares `A+B` with `A-B` and `A*B` with `A-B`, ignoring the need to evaluate all three expressions together.\n2. When `A+B` is greater than `A-B`, the program fails to consider `A*B`, which might be the largest value.\n3. The logic does not ensure that the maximum among `A+B`, `A-B`, and `A*B` is correctly identified in all possible cases."
    },
    {
        "problem_id": "p02570",
        "question": "Score : 100 points\n\nProblem StatementTakahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?\n\nConstraints\n1 \\leq D \\leq 10000\n1 \\leq T \\leq 10000\n1 \\leq S \\leq 10000\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nD T S\n\nOutputIf Takahashi will reach the place in time, print Yes; otherwise, print No.\n\nSample Input 11000 15 80\n\nSample Output 1Yes\n\nIt takes 12.5 minutes to go 1000 meters to the place at a speed of 80 meters per minute. They have planned to meet in 15 minutes so he will arrive in time.\n\nSample Input 22000 20 100\n\nSample Output 2Yes\n\nIt takes 20 minutes to go 2000 meters to the place at a speed of 100 meters per minute. They have planned to meet in 20 minutes so he will arrive just on time.\n\nSample Input 310000 1 1\n\nSample Output 3No\n\nHe will be late.",
        "desc": "This C++ problem assesses the ability to perform basic arithmetic calculations, handle input/output operations, and implement conditional statements to determine if a target can be met within a given time. It is categorized as an easy-level question, suitable for beginners practicing fundamental programming concepts.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  double d,t,s;\n  cin >> d >> t >> s;\n  if(t*s >= d) cout << \"Yes\" << endl;\n  else cout << \"No\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02576",
        "question": "Score : 100 points\n\nProblem StatementTakahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?\n\nConstraints\n1 \\leq N,X,T \\leq 1000\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN X T\n\nOutputPrint an integer representing the minimum number of minutes needed to make N pieces of takoyaki.\n\nSample Input 120 12 6\n\nSample Output 112\n\nHe can make 12 pieces of takoyaki in the first 6 minutes and 8 more in the next 6 minutes, so he can make 20 in a total of 12 minutes.\nNote that being able to make 12 in 6 minutes does not mean he can make 2 in 1 minute.\n\nSample Input 21000 1 1000\n\nSample Output 21000000\n\nIt seems to take a long time to make this kind of takoyaki.",
        "desc": "This C++ problem requires calculating the minimum time to produce a given number of takoyaki using batch processing, testing concepts like integer arithmetic and ceiling division. It is classified as an easy-level problem suitable for beginners to practice basic algorithm implementation.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n int n,x,t;\n cin >> n >> x >> t;\n if(n%x == 0) cout << t * n/x << endl;\n else cout << t * (n/x + 1) << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02582",
        "question": "Score : 100 points\n\nProblem StatementWe have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.\n\nConstraints\n|S| = 3\nEach character of S is S or R.\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputPrint the maximum number of consecutive rainy days in the period.\n\nSample Input 1RRS\n\nSample Output 12\n\nWe had rain on the 1-st and 2-nd days in the period. Here, the maximum number of consecutive rainy days is 2, so we should print 2.\n\nSample Input 2SSS\n\nSample Output 20\n\nIt was sunny throughout the period. We had no rainy days, so we should print 0.\n\nSample Input 3RSR\n\nSample Output 31\n\nWe had rain on the 1-st and 3-rd days - two \"streaks\" of one rainy day, so we should print 1.",
        "desc": "This problem assesses fundamental string manipulation and iteration skills by requiring the identification of the longest consecutive sequence of 'R' characters within a three-character string. It is categorized as an easy-level question, suitable for beginners practicing basic programming concepts.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() {\n  string s;\n  cin >> s;\n  bool a = s[0] == 'R';\n  bool b = s[1] == 'R';\n  bool c = s[2] == 'R';\n  if(a & b & c) cout << \"3\" << endl;\n  else if(a&b | b&c) cout << \"2\" << endl;\n  else if(a | b | c) cout << \"1\" << endl;\n  else cout << \"0\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02577",
        "question": "Score : 200 points\n\nProblem StatementAn integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.\n\nConstraints\n0 \\leq N &lt; 10^{200000}\nN is an integer.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputIf N is a multiple of 9, print Yes; otherwise, print No.\n\nSample Input 1123456789\n\nSample Output 1Yes\n\nThe sum of these digits is 1+2+3+4+5+6+7+8+9=45, which is a multiple of 9, so 123456789 is a multiple of 9.\n\nSample Input 20\n\nSample Output 2Yes\n\nSample Input 331415926535897932384626433832795028841971693993751058209749445923078164062862089986280\n\nSample Output 3No",
        "desc": "This C++ problem requires determining if a very large integer (up to 200,000 digits) is a multiple of nine by summing its digits, testing skills in string manipulation and efficient handling of large inputs. It assesses understanding of divisibility rules and is considered to have a medium difficulty level.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  string n;\n  cin >> n;\n  int sum = 0;\n  for(int i = 0; i < n.size(); i++) {\n    sum += n[i] - '0';\n  }\n  if(sum % 9 == 0)\n    cout << \"Yes\" << endl;\n  else cout << \"No\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02583",
        "question": "Score : 200 points\n\nProblem StatementWe have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i &lt; j &lt; k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.\n\nConstraints\n1 \\leq N \\leq 100\n1 \\leq L_i \\leq 10^9\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN\nL_1 L_2 \\cdots L_N\n\nOutputPrint the number of ways to choose three of the sticks with different lengths that can form a triangle.\n\nSample Input 15\n4 4 9 7 5\n\nSample Output 15\n\nThe following five triples (i, j, k) satisfy the conditions: (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), and (3, 4, 5).\n\nSample Input 26\n4 5 4 3 3 5\n\nSample Output 28\n\nWe have two sticks for each of the lengths 3, 4, and 5. To satisfy the first condition, we have to choose one from each length.\nThere is a triangle whose sides have lengths 3, 4, and 5, so we have 2 ^ 3 = 8 triples (i, j, k) that satisfy the conditions.\n\nSample Input 310\n9 4 6 1 9 6 10 6 6 8\n\nSample Output 339\n\nSample Input 42\n1 1\n\nSample Output 40\n\nNo triple (i, j, k) satisfies 1 \\leq i &lt; j &lt; k \\leq N, so we should print 0.",
        "desc": "This C++ problem assesses knowledge of combinatorial enumeration, handling duplicates, and applying the triangle inequality to determine valid triplets. It is considered an intermediate difficulty level, suitable for those familiar with nested loops and efficient condition checking in algorithm design.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nvoid bubble(int L[], int n) {\n  for(int i = 0; i < n; i++) {\n    for(int j = n-1; j >= i+1; j--) {\n      if(L[j] < L[j-1]) swap(L[j],L[j-1]);\n    }\n  }\n}\nint main() {\n  int n,L[110];\n  cin >> n;\n  for(int i = 0; i < n; i++)\n    cin >> L[i];\n  bubble(L,n);\n  int sum = 0;\n  for(int i = 0; i < n; i++) {\n    for(int j = i+1; j < n; j++) {\n      for(int k = j+1; k < n; k++) {\n        if(L[i] != L[j] & L[j] != L[k] & L[i]+L[j] > L[k])\n          sum++;\n      }\n    }\n  }\n  cout << sum << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p04043",
        "question": "Score : 100 points\n\nProblem StatementIroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.\n\nConstraints\n1≦A,B,C≦10\n\nInputThe input is given from Standard Input in the following format:\nA B C\n\nOutputIf it is possible to construct a Haiku by using each of the phrases once, print YES (case-sensitive). Otherwise, print NO.\n\nSample Input 15 5 7\n\nSample Output 1YES\n\nUsing three phrases of length 5, 5 and 7, it is possible to construct a Haiku.\n\nSample Input 27 7 5\n\nSample Output 2NO",
        "desc": "The problem requires determining if three given integers can be arranged in the specific order of 5, 7, and 5 to form a Haiku, testing understanding of permutations and conditional logic in C++. It is classified as an easy-level challenge suitable for beginners.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  int a,b,c;\n  cin >> a >> b >> c;\n  if(a == 5) {\n    if(b == 5 && c == 7) cout << \"YES\";\n    else if(b == 7 && c == 5) cout << \"YES\";\n    else cout << \"NO\";\n  }\n  else if(b == 5) {\n    if(a == 5 && c == 7) cout << \"YES\";\n    else if(a == 7 && c == 5) cout << \"YES\";\n    else cout << \"NO\";\n  }\n  else if(c == 5) {\n    if(a == 5 && b == 7) cout << \"YES\";\n    else if(a == 7 && b == 5) cout << \"YES\";\n    else cout << \"NO\";\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02594",
        "question": "Score : 100 points\n\nProblem StatementYou will turn on the air conditioner if, and only if, the temperature of the room is 30 degrees Celsius or above.\nThe current temperature of the room is X degrees Celsius. Will you turn on the air conditioner?\n\nConstraints\n-40 \\leq X \\leq 40\nX is an integer.\n\nInputInput is given from Standard Input in the following format:\nX\n\nOutputPrint Yes if you will turn on the air conditioner; print No otherwise.\n\nSample Input 125\n\nSample Output 1No\n\nSample Input 230\n\nSample Output 2Yes",
        "desc": "This C++ problem evaluates the ability to perform input/output operations and apply conditional statements to make decisions based on numerical comparisons. It is classified as an easy-level question, suitable for beginners practicing basic programming fundamentals.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() {\n  int x;\n  cin >> x;\n  if(x >= 30) cout << \"Yes\" << endl;\n  else cout << \"No\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02612",
        "question": "Score : 100 points\n\nProblem StatementWe will buy a product for N yen (the currency of Japan) at a shop.\nIf we use only 1000-yen bills to pay the price, how much change will we receive?\nAssume we use the minimum number of bills required.\n\nConstraints\n1 \\leq N \\leq 10000\nN is an integer.\n\nInputInput is given from Standard Input in the following format:\nN\n\nOutputPrint the amount of change as an integer.\n\nSample Input 11900\n\nSample Output 1100\n\nWe will use two 1000-yen bills to pay the price and receive 100 yen in change.\n\nSample Input 23000\n\nSample Output 20\n\nWe can pay the exact price.",
        "desc": "This C++ problem requires calculating the change received when purchasing an item using the minimum number of 1000-yen bills, leveraging basic arithmetic and integer division concepts. It is classified as an easy-level question, suitable for beginners to practice simple input/output and mathematical operations.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() {\n  int n;\n  cin >> n;\n  if(n%1000 == 0) cout << \"0\" << endl;\n  else  {\n    int t = n/1000 + 1;\n    int ans = 1000 * t - n;\n    cout << ans << endl;\n  }\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02621",
        "question": "Score : 100 points\n\nProblem StatementGiven an integer a as input, print the value a + a^2 + a^3.\n\nConstraints\n1 \\leq a \\leq 10\na is an integer.\n\nInputInput is given from Standard Input in the following format:\na\n\nOutputPrint the value a + a^2 + a^3 as an integer.\n\nSample Input 12\n\nSample Output 114\n\nWhen a = 2, we have a + a^2 + a^3 = 2 + 2^2 + 2^3 = 2 + 4 + 8 = 14.\nPrint the answer as an input. Outputs such as 14.0 will be judged as incorrect.\n\nSample Input 210\n\nSample Output 21110",
        "desc": "This C++ problem tasks the programmer with reading an integer input and calculating the sum of the integer, its square, and its cube, thereby testing fundamental arithmetic operations and basic input/output handling. It is classified as an easy-level question appropriate for beginners.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() {\n  int a;\n  cin >> a;\n  int ans = a + a*a + a*a*a;\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02627",
        "question": "Score : 100 points\n\nProblem StatementAn uppercase or lowercase English letter \\alpha will be given as input.\nIf \\alpha is uppercase, print A; if it is lowercase, print a.\n\nConstraints\n\\alpha is an uppercase (A - Z) or lowercase (a - z) English letter.\n\nInputInput is given from Standard Input in the following format:\nα\n\nOutputIf \\alpha is uppercase, print A; if it is lowercase, print a.\n\nSample Input 1B\n\nSample Output 1A\n\nB is uppercase, so we should print A.\n\nSample Input 2a\n\nSample Output 2a\n\na is lowercase, so we should print a.",
        "desc": "This C++ problem assesses understanding of character classification and conditional logic by requiring the identification of an input letter’s case and outputting a corresponding character ('A' for uppercase, 'a' for lowercase). It is considered a beginner-level question, suitable for those new to handling character data and implementing basic conditional structures.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() {\n  char ch;\n  cin >> ch;\n  if('a' <= ch && ch <= 'z')\n    cout << 'a' << endl;\n  else if('A' <= ch && ch <= 'Z')\n    cout << 'A' << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02639",
        "question": "Score : 100 points\n\nProblem StatementWe have five variables x_1, x_2, x_3, x_4, and x_5.\nThe variable x_i was initially assigned a value of i.\nSnuke chose one of these variables and assigned it 0.\nYou are given the values of the five variables after this assignment.\nFind out which variable Snuke assigned 0.\n\nConstraints\nThe values of x_1, x_2, x_3, x_4, and x_5 given as input are a possible outcome of the assignment by Snuke.\n\nInputInput is given from Standard Input in the following format:\nx_1 x_2 x_3 x_4 x_5\n\nOutputIf the variable Snuke assigned 0 was x_i, print the integer i.\n\nSample Input 10 2 3 4 5\n\nSample Output 11\n\nIn this case, Snuke assigned 0 to x_1, so we should print 1.\n\nSample Input 21 2 0 4 5\n\nSample Output 23",
        "desc": "This problem asks you to identify which of five initially sequential variables was set to zero by comparing the final values to their original assignments, testing skills in input handling and basic arithmetic operations in C++. It is classified as an easy-level programming challenge suitable for beginners.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() {\n  int x[5],ans = 0;\n  for(int i = 0; i < 5; i++) \n    cin >> x[i];\n  for(int i = 0; i < 5; i++) {\n    if(x[i] == 0) \n      ans = i+1;\n  }\n  cout << ans << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02657",
        "question": "Score : 100 points\n\nProblem StatementCompute A \\times B.\n\nConstraints\n1 \\leq A \\leq 100\n1 \\leq B \\leq 100\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nA B\n\nOutputPrint the value A \\times B as an integer.\n\nSample Input 12 5\n\nSample Output 110\n\nWe have 2 \\times 5 = 10.\n\nSample Input 2100 100\n\nSample Output 210000",
        "desc": "This C++ problem requires reading two integer inputs within the range [1, 100] and computing their product, testing fundamental concepts such as input/output operations and basic arithmetic. It is classified as an easy difficulty level, suitable for beginners learning introductory programming and simple problem-solving techniques.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() {\n  int a,b;\n  cin >> a >> b;\n  cout << a*b << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02675",
        "question": "Score: 100 points\n\nProblem Statement\nThe cat Snuke wants to play a popular Japanese game called ÅtCoder, so Iroha has decided to teach him Japanese.\nWhen counting pencils in Japanese, the counter word \"本\" follows the number. The pronunciation of this word varies depending on the number. Specifically, the pronunciation of \"本\" in the phrase \"N 本\" for a positive integer N not exceeding 999 is as follows:\n\nhon when the digit in the one's place of N is 2, 4, 5, 7, or 9;\npon when the digit in the one's place of N is 0, 1, 6 or 8;\nbon when the digit in the one's place of N is 3.\n\nGiven N, print the pronunciation of \"本\" in the phrase \"N 本\".\n\nConstraints\n\nN is a positive integer not exceeding 999.\n\nInput\nInput is given from Standard Input in the following format:\nN\n\nOutput\nPrint the answer.\n\nSample Input 116\n\nSample Output 1pon\n\nThe digit in the one's place of 16 is 6, so the \"本\" in \"16 本\" is pronounced pon.\n\nSample Input 22\n\nSample Output 2hon\n\nSample Input 3183\n\nSample Output 3bon",
        "desc": "The problem asks for determining the correct pronunciation suffix (\"hon\", \"pon\", or \"bon\") for the Japanese counter \"本\" based on the units digit of a given integer \\( N \\) (≤ 999). It tests understanding of input/output handling, digit extraction using modulo operations, and the implementation of conditional logic, and is considered an easy-level C++ programming challenge.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\nusing namespace std;\nint main() {\n  string n;\n  cin >> n;\n  string ch = n.substr(n.size()-1,1);\n  if(ch == \"2\" || ch == \"4\" ||\n  ch == \"5\" || ch == \"7\" || ch == \"9\")\n    cout << \"hon\" << endl;\n  else if(ch == \"0\" || ch == \"1\" || \n  ch == \"6\" || ch == \"8\")\n    cout << \"pon\" << endl;\n  else if(ch == \"3\") cout << \"bon\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02681",
        "question": "Score : 100 points\n\nProblem StatementTakahashi wants to be a member of some web service.\nHe tried to register himself with the ID S, which turned out to be already used by another user.\nThus, he decides to register using a string obtained by appending one character at the end of S as his ID.\nHe is now trying to register with the ID T. Determine whether this string satisfies the property above.\n\nConstraints\nS and T are strings consisting of lowercase English letters.\n1 \\leq |S| \\leq 10\n|T| = |S| + 1\n\nInputInput is given from Standard Input in the following format:\nS\nT\n\nOutputIf T satisfies the property in Problem Statement, print Yes; otherwise, print No.\n\nSample Input 1chokudai\nchokudaiz\n\nSample Output 1Yes\n\nchokudaiz can be obtained by appending z at the end of chokudai.\n\nSample Input 2snuke\nsnekee\n\nSample Output 2No\n\nsnekee cannot be obtained by appending one character at the end of snuke.\n\nSample Input 3a\naa\n\nSample Output 3Yes",
        "desc": "This C++ problem assesses the ability to manipulate and compare strings, specifically by checking if one string is formed by appending a single character to another. It tests fundamental string operations and conditional logic, and is considered to have an easy difficulty level.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  string s,t;\n  cin >> s >> t;\n  if(t.size() == s.size() + 1) {\n    for(int i = 0; i < s.size(); i++) {\n      if(s[i] == t[i]) continue;\n      else cout << \"No\" << endl; goto Exit;\n    }\n  }\n  else {\n    cout << \"No\" << endl; \n    goto Exit;\n  }\n  cout << \"Yes\" << endl;\n  Exit:;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02687",
        "question": "Score : 100 points\n\nProblem StatementAtCoder Inc. holds a contest every Saturday.\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.\n\nConstraints\nS is ABC or ARC.\n\nInputInput is given from Standard Input in the following format:\nS\n\nOutputPrint the string representing the type of the contest held this week.\n\nSample Input 1ABC\n\nSample Output 1ARC\n\nThey held an ABC last week, so they will hold an ARC this week.",
        "desc": "This problem assesses basic string handling and conditional logic in C++, requiring the program to determine and output the alternate contest type based on the input string (\"ABC\" or \"ARC\"). It is categorized as an easy-level question, suitable for testing fundamental programming skills.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  string s;\n  cin >> s;\n  if(s == \"ABC\")\n    cout << \"ARC\" << endl;\n  else cout << \"ABC\" << endl;\n}",
        "error_desc": "No error."
    },
    {
        "problem_id": "p02595",
        "question": "Score : 200 points\n\nProblem StatementWe have N points in the two-dimensional plane. The coordinates of the i-th point are (X_i,Y_i).\nAmong them, we are looking for the points such that the distance from the origin is at most D. How many such points are there?\nWe remind you that the distance between the origin and the point (p, q) can be represented as \\sqrt{p^2+q^2}.\n\nConstraints\n1 \\leq N \\leq 2\\times 10^5\n0 \\leq D \\leq 2\\times 10^5\n|X_i|,|Y_i| \\leq 2\\times 10^5\nAll values in input are integers.\n\nInputInput is given from Standard Input in the following format:\nN D\nX_1 Y_1\n\\vdots\nX_N Y_N\n\nOutputPrint an integer representing the number of points such that the distance from the origin is at most D.\n\nSample Input 14 5\n0 5\n-2 4\n3 4\n4 -4\n\nSample Output 13\n\nThe distance between the origin and each of the given points is as follows:\n\n\\sqrt{0^2+5^2}=5\n\\sqrt{(-2)^2+4^2}=4.472\\ldots\n\\sqrt{3^2+4^2}=5\n\\sqrt{4^2+(-4)^2}=5.656\\ldots\n\nThus, we have three points such that the distance from the origin is at most 5.\n\nSample Input 212 3\n1 1\n1 1\n1 1\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n\nSample Output 27\n\nMultiple points may exist at the same coordinates.\n\nSample Input 320 100000\n14309 -32939\n-56855 100340\n151364 25430\n103789 -113141\n147404 -136977\n-37006 -30929\n188810 -49557\n13419 70401\n-88280 165170\n-196399 137941\n-176527 -61904\n46659 115261\n-153551 114185\n98784 -6820\n94111 -86268\n-30401 61477\n-55056 7872\n5901 -163796\n138819 -185986\n-69848 -96669\n\nSample Output 36",
        "desc": "This C++ problem requires counting how many of up to 200,000 two-dimensional points lie within a specified Euclidean distance from the origin, testing concepts such as efficient iteration, distance calculation, and handling large inputs. It is considered to have a medium to high difficulty level.",
        "program": "#include <bits/stdc++.h>\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <ctype.h>\n#include <algorithm>\nusing namespace std;\nint main() {\n  long n,d,x[210000],y[210000];\n  cin >> n >> d;\n  for(int i = 0; i < n; i++)\n    cin >> x[i] >> y[i];\n  int sum = 0;\n  for(int i = 0; i < n; i++) {\n    if((x[i]*x[i] + y[i]*y[i]) <= d*d) sum++;\n  }\n  cout << sum << endl;\n}",
        "error_desc": "No error."
    }
]